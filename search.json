[{"path":"https://docs.ropensci.org/tarchetypes/CONTRIBUTING.html","id":null,"dir":"","previous_headings":"","what":"Contributing","title":"Contributing","text":"Development community effort, welcome participation.","code":""},{"path":"https://docs.ropensci.org/tarchetypes/CONTRIBUTING.html","id":"code-of-conduct","dir":"","previous_headings":"","what":"Code of conduct","title":"Contributing","text":"Please note package released Contributor Code Conduct.","code":""},{"path":"https://docs.ropensci.org/tarchetypes/CONTRIBUTING.html","id":"discussions","dir":"","previous_headings":"","what":"Discussions","title":"Contributing","text":"https://github.com/ropensci/tarchetypes/discussions, can post general questions, brainstorm ideas, ask help.","code":""},{"path":"https://docs.ropensci.org/tarchetypes/CONTRIBUTING.html","id":"issues","dir":"","previous_headings":"","what":"Issues","title":"Contributing","text":"https://github.com/ropensci/tarchetypes/issues bug reports, performance issues, package maintenance tasks, feature requests. post, please abide following guidelines. posting new issue, please take moment search existing similar issues order avoid duplication. bug reports: can, please install latest GitHub version tarchetypes (.e. remotes::install_github(\"ropensci/tarchetypes\")) verify issue still persists. Describe issue prose clearly concisely possible. Runnable: post enough R code data onlooker can create error computer. Minimal: reduce runtime wherever possible remove complicated details irrelevant issue hand. Readable: format code according tidyverse style guide.","code":""},{"path":"https://docs.ropensci.org/tarchetypes/CONTRIBUTING.html","id":"development","dir":"","previous_headings":"","what":"Development","title":"Contributing","text":"External code contributions extremely helpful right circumstances. recommended steps. Prior contribution, please propose idea new issue thread maintainer can define intent scope work. Fork repository. Follow GitHub flow create new branch, add commits, open pull request. Discuss code maintainer pull request thread. everything looks good, maintainer merge code project. Please also follow additional guidelines. Respect architecture reasoning package. Depending scope work, may want read design documents (package vignettes). possible, keep contributions small enough easily review manually. okay split work multiple pull requests. Format code according tidyverse style guide check formatting lint_package() function lintr package. new features functionality, add tests tests. Tests can automated go tests/testthat/. Tests automated go tests/interactive/. features affecting performance, good practice add profiling studies tests/performance/. Check code coverage covr::package_coverage(). Automated tests cover new changed functionality pull request. Run overall package checks devtools::check() goodpractice::gp() Describe contribution project’s NEWS.md file. sure mention relevent GitHub issue numbers GitHub name done existing news entries. feel contribution substantial enough official author contributor status, please add Authors@R field DESCRIPTION file.","code":""},{"path":"https://docs.ropensci.org/tarchetypes/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2020 Eli Lilly Company Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://docs.ropensci.org/tarchetypes/PULL_REQUEST_TEMPLATE.html","id":null,"dir":"","previous_headings":"","what":"Prework","title":"Prework","text":"understand agree repository’s code conduct. understand agree repository’s contributing guidelines. already submitted issue discussion thread discuss idea maintainer.","code":""},{"path":"https://docs.ropensci.org/tarchetypes/PULL_REQUEST_TEMPLATE.html","id":"related-github-issues-and-pull-requests","dir":"","previous_headings":"","what":"Related GitHub issues and pull requests","title":"Prework","text":"Ref: #","code":""},{"path":"https://docs.ropensci.org/tarchetypes/PULL_REQUEST_TEMPLATE.html","id":"summary","dir":"","previous_headings":"","what":"Summary","title":"Prework","text":"Please explain purpose scope contribution.","code":""},{"path":"https://docs.ropensci.org/tarchetypes/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"William Michael Landau. Author, maintainer. Samantha Oliver. Reviewer. Tristan Mahr. Reviewer. Eli Lilly Company. Copyright holder.","code":""},{"path":"https://docs.ropensci.org/tarchetypes/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"William Michael Landau (2021). tarchetypes: Archetypes Targets. https://docs.ropensci.org/tarchetypes/, https://github.com/ropensci/tarchetypes.","code":"@Manual{,   title = {tarchetypes: Archetypes for Targets},   author = {William Michael Landau},   year = {2021},   note = {{https://docs.ropensci.org/tarchetypes/, https://github.com/ropensci/tarchetypes}}, }"},{"path":"https://docs.ropensci.org/tarchetypes/index.html","id":"tarchetypes-","dir":"","previous_headings":"","what":"Archetypes for Targets","title":"Archetypes for Targets","text":"tarchetypes R package collection target pipeline archetypes targets package. archetypes express complicated pipelines concise syntax, enhances readability thus reproducibility. Archetypes possible flexible metaprogramming capabilities targets. targets, one can define target object outside central pipeline, tar_target_raw() function completely avoids non-standard evaluation. means anyone can write niche interfaces specialized projects. tarchetypes aims include common versatile archetypes usage patterns.","code":""},{"path":"https://docs.ropensci.org/tarchetypes/index.html","id":"grouped-data-frames","dir":"","previous_headings":"","what":"Grouped data frames","title":"Archetypes for Targets","text":"tarchetypes functions easy dynamic branching subsets data frames: tar_group_by(): define row groups using dplyr::group_by() semantics. tar_group_select(): define row groups using tidyselect semantics. tar_group_count(): define given number row groups. tar_group_size(): define row groups given size. define target one functions, downstream dynamic targets automatically branch row groups.","code":"# _targets.R file: library(targets) library(tarchetypes) produce_data <- function() {   expand.grid(var1 = c(\"a\", \"b\"), var2 = c(\"c\", \"d\"), rep = c(1, 2, 3)) } list(   tar_group_by(data, produce_data(), var1, var2),   tar_target(group, data, pattern = map(data)) ) # R console: library(targets) tar_make() #> ▶ dispatched target data #> ● completed target data [0.007 seconds] #> ▶ dispatched branch group_b3d7d010 #> ● completed branch group_b3d7d010 [0 seconds] #> ▶ dispatched branch group_6a76c5c0 #> ● completed branch group_6a76c5c0 [0 seconds] #> ▶ dispatched branch group_164b16bf #> ● completed branch group_164b16bf [0 seconds] #> ▶ dispatched branch group_f5aae602 #> ● completed branch group_f5aae602 [0 seconds] #> ● completed pattern group #> ▶ completed pipeline [0.104 seconds]  # First row group: tar_read(group, branches = 1) #> # A tibble: 3 × 4 #>   var1  var2    rep tar_group #>   <fct> <fct> <dbl>     <int> #> 1 a     c         1         1 #> 2 a     c         2         1 #> 3 a     c         3         1  # Second row group: tar_read(group, branches = 2) #> # A tibble: 3 × 4 #>   var1  var2    rep tar_group #>   <fct> <fct> <dbl>     <int> #> 1 a     d         1         2 #> 2 a     d         2         2 #> 3 a     d         3         2"},{"path":"https://docs.ropensci.org/tarchetypes/index.html","id":"literate-programming","dir":"","previous_headings":"","what":"Literate programming","title":"Archetypes for Targets","text":"Consider following R Markdown report. want define target render report. report calls tar_read(dataset), target needs depend dataset. Without tarchetypes, cumbersome set pipeline correctly. tarchetypes, can simplify pipeline tar_render() archetype. , tar_render() scans code chunks mentions targets tar_load() tar_read(), enforces dependency relationships finds. case, reads report.Rmd forces report depend dataset. way, tar_make() always processes dataset report, automatically reruns report.Rmd whenever dataset changes.","code":"--- title: report output: html_document ---  ```{r} library(targets) tar_read(dataset) ``` # _targets.R library(targets) list(   tar_target(dataset, data.frame(x = letters)),   tar_target(     report, {       # Explicitly mention the symbol `dataset`.       list(dataset)       # Return relative paths to keep the project portable.       fs::path_rel(         # Need to return/track all input/output files.         c(            rmarkdown::render(             input = \"report.Rmd\",             # Always run from the project root             # so the report can find _targets/.             knit_root_dir = getwd(),             quiet = TRUE           ),           \"report.Rmd\"         )       )     },     # Track the input and output files.     format = \"file\",     # Avoid building small reports on HPC.     deployment = \"main\"   ) ) # _targets.R library(targets) library(tarchetypes) list(   tar_target(dataset, data.frame(x = letters)),   tar_render(report, \"report.Rmd\") )"},{"path":"https://docs.ropensci.org/tarchetypes/index.html","id":"alternative-pipeline-syntax","dir":"","previous_headings":"","what":"Alternative pipeline syntax","title":"Archetypes for Targets","text":"tar_plan() drop-replacement drake_plan() targets ecosystem. lets users write targets name/command pairs without call tar_target().","code":"tar_plan(   tar_file(raw_data_file, \"data/raw_data.csv\", format = \"file\"),   # Simple drake-like syntax:   raw_data = read_csv(raw_data_file, col_types = cols()),   data =raw_data %>%     mutate(Ozone = replace_na(Ozone, mean(Ozone, na.rm = TRUE))),   hist = create_plot(data),   fit = biglm(Ozone ~ Wind + Temp, data),   # Needs tar_render() because it is a target archetype:   tar_render(report, \"report.Rmd\") )"},{"path":[]},{"path":"https://docs.ropensci.org/tarchetypes/index.html","id":"documentation","dir":"","previous_headings":"","what":"Documentation","title":"Archetypes for Targets","text":"specific documentation tarchetypes, including help files user-side functions, please visit reference website. documentation targets general, please visit targets reference website. Many linked resources use tarchetypes functions tar_render().","code":""},{"path":"https://docs.ropensci.org/tarchetypes/index.html","id":"help","dir":"","previous_headings":"","what":"Help","title":"Archetypes for Targets","text":"Please read help guide learn best ask help using targets tarchetypes.","code":""},{"path":"https://docs.ropensci.org/tarchetypes/index.html","id":"code-of-conduct","dir":"","previous_headings":"","what":"Code of conduct","title":"Archetypes for Targets","text":"Please note package released Contributor Code Conduct.","code":""},{"path":"https://docs.ropensci.org/tarchetypes/index.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Archetypes for Targets","text":"","code":"citation(\"tarchetypes\") #> To cite tarchetypes in publications use: #>  #>   William Michael Landau (2021). tarchetypes: Archetypes for Targets. #>   https://docs.ropensci.org/tarchetypes/, #>   https://github.com/ropensci/tarchetypes. #>  #> A BibTeX entry for LaTeX users is #>  #>   @Manual{, #>     title = {tarchetypes: Archetypes for Targets}, #>     author = {William Michael Landau}, #>     year = {2021}, #>     note = {{https://docs.ropensci.org/tarchetypes/, https://github.com/ropensci/tarchetypes}}, #>   }"},{"path":"https://docs.ropensci.org/tarchetypes/reference/counter_init.html","id":null,"dir":"Reference","previous_headings":"","what":"Counter constructor. — counter_init","title":"Counter constructor. — counter_init","text":"user-side function. invoke directly.","code":""},{"path":"https://docs.ropensci.org/tarchetypes/reference/counter_init.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Counter constructor. — counter_init","text":"","code":"counter_init(names = NULL)"},{"path":"https://docs.ropensci.org/tarchetypes/reference/counter_init.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Counter constructor. — counter_init","text":"names Character vector names add new counter.","code":""},{"path":"https://docs.ropensci.org/tarchetypes/reference/counter_init.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Counter constructor. — counter_init","text":"new counter object.","code":""},{"path":"https://docs.ropensci.org/tarchetypes/reference/counter_init.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Counter constructor. — counter_init","text":"Creates counter object described https://books.ropensci.org/targets-design/classes.html#counter-class.","code":""},{"path":"https://docs.ropensci.org/tarchetypes/reference/counter_init.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Counter constructor. — counter_init","text":"","code":"counter <- counter_init() counter_set_names(counter, letters)"},{"path":"https://docs.ropensci.org/tarchetypes/reference/counter_set_names.html","id":null,"dir":"Reference","previous_headings":"","what":"Add data to an existing counter object. — counter_set_names","title":"Add data to an existing counter object. — counter_set_names","text":"user-side function. invoke directly.","code":""},{"path":"https://docs.ropensci.org/tarchetypes/reference/counter_set_names.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add data to an existing counter object. — counter_set_names","text":"","code":"counter_set_names(counter, names)"},{"path":"https://docs.ropensci.org/tarchetypes/reference/counter_set_names.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add data to an existing counter object. — counter_set_names","text":"counter counter object, defined internal purposes . names Character vector names add counter.","code":""},{"path":"https://docs.ropensci.org/tarchetypes/reference/counter_set_names.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add data to an existing counter object. — counter_set_names","text":"NULL (invisibly)","code":""},{"path":"https://docs.ropensci.org/tarchetypes/reference/counter_set_names.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add data to an existing counter object. — counter_set_names","text":"","code":"counter <- counter_init() counter_set_names(counter, letters)"},{"path":"https://docs.ropensci.org/tarchetypes/reference/reexports.html","id":null,"dir":"Reference","previous_headings":"","what":"Objects exported from other packages — reexports","title":"Objects exported from other packages — reexports","text":"objects imported packages. Follow links see documentation. tidyselect all_of, any_of, contains, ends_with, everything, last_col, matches, num_range, one_of, starts_with","code":""},{"path":"https://docs.ropensci.org/tarchetypes/reference/tar_age.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a target that runs when the last run gets old — tar_age","title":"Create a target that runs when the last run gets old — tar_age","text":"tar_age() creates target reruns gets old enough. words, target reruns periodically regular intervals time.","code":""},{"path":"https://docs.ropensci.org/tarchetypes/reference/tar_age.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a target that runs when the last run gets old — tar_age","text":"","code":"tar_age(   name,   command,   age,   pattern = NULL,   tidy_eval = targets::tar_option_get(\"tidy_eval\"),   packages = targets::tar_option_get(\"packages\"),   library = targets::tar_option_get(\"library\"),   format = targets::tar_option_get(\"format\"),   repository = targets::tar_option_get(\"repository\"),   iteration = targets::tar_option_get(\"iteration\"),   error = targets::tar_option_get(\"error\"),   memory = targets::tar_option_get(\"memory\"),   garbage_collection = targets::tar_option_get(\"garbage_collection\"),   deployment = targets::tar_option_get(\"deployment\"),   priority = targets::tar_option_get(\"priority\"),   resources = targets::tar_option_get(\"resources\"),   storage = targets::tar_option_get(\"storage\"),   retrieval = targets::tar_option_get(\"retrieval\"),   cue = targets::tar_option_get(\"cue\"),   description = targets::tar_option_get(\"description\") )"},{"path":"https://docs.ropensci.org/tarchetypes/reference/tar_age.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a target that runs when the last run gets old — tar_age","text":"name Character length 1, name target. command R code run target return value. age difftime object length 1, .difftime(3, units = \"days\"). target's output data files older age (according recent time stamp target's output files) target rerun. hand, least one data file younger Sys.time() - age, ordinary invalidation rules apply, target may rerun. want force target run every 3 days, example, set age = .difftime(3, units = \"days\"). pattern Language define branching target. example, pipeline numeric vector targets x y, tar_target(z, x + y, pattern = map(x, y)) implicitly defines branches z compute x[1] + y[1], x[2] + y[2], . See user manual details. tidy_eval Logical, whether enable tidy evaluation interpreting command pattern. TRUE, can use \"bang-bang\" operator !! programmatically insert values global objects. packages Character vector packages load right target runs output data reloaded downstream targets. Use tar_option_set() set packages globally subsequent targets define. library Character vector library paths try loading packages. format Logical, whether rerun target user-specified storage format changed. storage format user-specified tar_target() tar_option_set(). repository Logical, whether rerun target user-specified storage repository changed. storage repository user-specified tar_target() tar_option_set(). iteration Logical, whether rerun target user-specified iteration method changed. iteration method user-specified tar_target() tar_option_set(). error Character length 1, target stops throws error. Options: \"stop\": whole pipeline stops throws error. \"continue\": whole pipeline keeps going. \"abridge\": currently running targets keep running, new targets launch . (Visit https://books.ropensci.org/targets/debugging.html learn debug targets using saved workspaces.) \"null\": errored target continues returns NULL. data hash deliberately wrong target date next run pipeline. memory Character length 1, memory strategy. \"persistent\", target stays memory end pipeline (unless storage \"worker\", case targets unloads value memory right storing order avoid sending copious data network). \"transient\", target gets unloaded every new target completes. Either way, target gets automatically loaded memory whenever another target needs value. cloud-based dynamic files (e.g. format = \"file\" repository = \"aws\"), memory strategy applies temporary local copy file: \"persistent\" means remains end pipeline deleted, \"transient\" means gets deleted soon possible. former conserves bandwidth, latter conserves local storage. garbage_collection Logical, whether run base::gc() just target runs. deployment Character length 1. deployment \"main\", target run central controlling R process. Otherwise, deployment \"worker\" set pipeline distributed/parallel computing, target runs parallel worker. distributed/parallel computing targets, please visit https://books.ropensci.org/targets/crew.html. priority Numeric length 1 0 1. Controls targets get deployed first multiple competing targets ready simultaneously. Targets priorities closer 1 get dispatched earlier (polled earlier tar_make_future()). resources Object returned tar_resources() optional settings high-performance computing functionality, alternative data storage formats, optional capabilities targets. See tar_resources() details. storage Character length 1, relevant tar_make_clustermq() tar_make_future(). Must one following values: \"main\": target's return value sent back host machine saved/uploaded locally. \"worker\": worker saves/uploads value. \"none\": almost never recommended. niche situations, e.g. data needs loaded explicitly another language. use , return value target totally ignored target ends, downstream target still attempts load data file (except retrieval = \"none\"). select storage = \"none\", return value target's command ignored, data saved automatically. dynamic files (format = \"file\") responsibility user write data store inside target. distinguishing feature storage = \"none\" (opposed format = \"file\") general case, downstream targets automatically try load data data store dependency. corollary, storage = \"none\" completely unnecessary format \"file\". retrieval Character length 1, relevant tar_make_clustermq() tar_make_future(). Must one following values: \"main\": target's dependencies loaded host machine sent worker target runs. \"worker\": worker loads targets dependencies. \"none\": dependencies loaded . choice almost never recommended. niche situations, e.g. data needs loaded explicitly another language. cue targets::tar_cue() object. (See \"Cue objects\" section background.) cue object contain optional secondary invalidation rules, anything except mode argument. mode automatically determined age argument tar_age(). description Character length 1, custom free-form human-readable text description target. Descriptions appear target labels functions like tar_manifest() tar_visnetwork(), let select subsets targets names argument functions like tar_make(). example, tar_manifest(names = tar_described_as(starts_with(\"survival model\"))) lists targets whose descriptions start character string \"survival model\".","code":""},{"path":"https://docs.ropensci.org/tarchetypes/reference/tar_age.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a target that runs when the last run gets old — tar_age","text":"target object. See \"Target objects\" section background.","code":""},{"path":"https://docs.ropensci.org/tarchetypes/reference/tar_age.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create a target that runs when the last run gets old — tar_age","text":"tar_age() uses cue tar_cue_age(), uses time stamps targets::tar_meta()$time. See help file targets::tar_timestamp() explanation time stamp calculated.","code":""},{"path":"https://docs.ropensci.org/tarchetypes/reference/tar_age.html","id":"dynamic-branches-at-regular-time-intervals","dir":"Reference","previous_headings":"","what":"Dynamic branches at regular time intervals","title":"Create a target that runs when the last run gets old — tar_age","text":"Time stamps recorded whole dynamic targets, tar_age() good fit dynamic branching. invalidate dynamic branches regular intervals, recommended use targets::tar_older() combination targets::tar_invalidate() right calling tar_make(). example, tar_invalidate(any_of(tar_older(Sys.time - .difftime(1, units = \"weeks\")))) # nolint invalidates targets week old. , next tar_make() rerun targets.","code":""},{"path":"https://docs.ropensci.org/tarchetypes/reference/tar_age.html","id":"target-objects","dir":"Reference","previous_headings":"","what":"Target objects","title":"Create a target that runs when the last run gets old — tar_age","text":"tarchetypes functions target factories, means return target objects lists target objects. Target objects represent skippable steps analysis pipeline described https://books.ropensci.org/targets/. Please read walkthrough https://books.ropensci.org/targets/walkthrough.html understand role target objects analysis pipelines. developers, https://wlandau.github.io/targetopia/contributing.html#target-factories explains target factories (functions like one generate targets) design specification https://books.ropensci.org/targets-design/ details structure composition target objects.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/tarchetypes/reference/tar_age.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a target that runs when the last run gets old — tar_age","text":"","code":"if (identical(Sys.getenv(\"TAR_LONG_EXAMPLES\"), \"true\")) { targets::tar_dir({ # tar_dir() runs code from a temporary directory. targets::tar_script({   library(tarchetypes)   list(     tarchetypes::tar_age(       data,       data.frame(x = seq_len(26)),       age = as.difftime(0.5, units = \"secs\")     )   ) }) targets::tar_make() Sys.sleep(0.6) targets::tar_make() }) }"},{"path":"https://docs.ropensci.org/tarchetypes/reference/tar_append_static_values.html","id":null,"dir":"Reference","previous_headings":"","what":"Append statically mapped values to target output. — tar_append_static_values","title":"Append statically mapped values to target output. — tar_append_static_values","text":"internal use . Users invoke function directly.","code":""},{"path":"https://docs.ropensci.org/tarchetypes/reference/tar_append_static_values.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Append statically mapped values to target output. — tar_append_static_values","text":"","code":"tar_append_static_values(object, values)"},{"path":"https://docs.ropensci.org/tarchetypes/reference/tar_append_static_values.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Append statically mapped values to target output. — tar_append_static_values","text":"object Return value target. Must data frame. values Tibble set static values current target uses.","code":""},{"path":"https://docs.ropensci.org/tarchetypes/reference/tar_change.html","id":null,"dir":"Reference","previous_headings":"","what":"Target that responds to an arbitrary change. — tar_change","title":"Target that responds to an arbitrary change. — tar_change","text":"Create target responds change arbitrary value. value changes, target reruns.","code":""},{"path":"https://docs.ropensci.org/tarchetypes/reference/tar_change.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Target that responds to an arbitrary change. — tar_change","text":"","code":"tar_change(   name,   command,   change,   tidy_eval = targets::tar_option_get(\"tidy_eval\"),   packages = targets::tar_option_get(\"packages\"),   library = targets::tar_option_get(\"library\"),   format = targets::tar_option_get(\"format\"),   repository = targets::tar_option_get(\"repository\"),   iteration = targets::tar_option_get(\"iteration\"),   error = targets::tar_option_get(\"error\"),   memory = targets::tar_option_get(\"memory\"),   garbage_collection = targets::tar_option_get(\"garbage_collection\"),   deployment = targets::tar_option_get(\"deployment\"),   priority = targets::tar_option_get(\"priority\"),   resources = targets::tar_option_get(\"resources\"),   storage = targets::tar_option_get(\"storage\"),   retrieval = targets::tar_option_get(\"retrieval\"),   cue = targets::tar_option_get(\"cue\"),   description = targets::tar_option_get(\"description\") )"},{"path":"https://docs.ropensci.org/tarchetypes/reference/tar_change.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Target that responds to an arbitrary change. — tar_change","text":"name Symbol, name target. target name must valid name symbol R, must start dot. Subsequent targets can refer name symbolically induce dependency relationship: e.g. tar_target(downstream_target, f(upstream_target)) target named downstream_target depends target upstream_target function f(). addition, target's name determines random number generator seed. way, target runs reproducible seed someone else running pipeline get results, two targets pipeline share seed. (Even dynamic branches different names thus different seeds.) can recover seed completed target tar_meta(your_target, seed) run tar_seed_set() result locally recreate target's initial RNG state. command R code run target. change R code upstream change-inducing target. tidy_eval Whether invoke tidy evaluation (e.g. !! operator rlang) soon target defined (tar_make()). Applies arguments command change. packages Character vector packages load right target runs output data reloaded downstream targets. Use tar_option_set() set packages globally subsequent targets define. library Character vector library paths try loading packages. format Optional storage format target's return value. exception format = \"file\", target gets file _targets/objects, format different way save load file. See \"Storage formats\" section detailed list possible data storage formats. repository Character length 1, remote repository target storage. Choices: \"local\": file system local machine. \"aws\": Amazon Web Services (AWS) S3 bucket. Can configured non-AWS S3 bucket using endpoint argument tar_resources_aws(), versioning capabilities may lost . See cloud storage section https://books.ropensci.org/targets/data.html details instructions. \"gcp\": Google Cloud Platform storage bucket. See cloud storage section https://books.ropensci.org/targets/data.html details instructions. Note: repository \"local\" format \"file\" target create single output file. output file uploaded cloud tracked changes exists cloud. local file deleted target runs. iteration Character length 1, name iteration mode target. Choices: \"vector\": branching happens vctrs::vec_slice() aggregation happens vctrs::vec_c(). \"list\", branching happens [[]] aggregation happens list(). \"group\": dplyr::group_by()-like functionality branch subsets non-dynamic data frame. iteration = \"group\", target must dynamic (pattern argument tar_target() must left NULL). target's return value must data frame special tar_group column consecutive integers 1 number groups. integer designates group, branch created collection rows group. See tar_group() function see can create special tar_group column dplyr::group_by(). error Character length 1, target stops throws error. Options: \"stop\": whole pipeline stops throws error. \"continue\": whole pipeline keeps going. \"abridge\": currently running targets keep running, new targets launch . (Visit https://books.ropensci.org/targets/debugging.html learn debug targets using saved workspaces.) \"null\": errored target continues returns NULL. data hash deliberately wrong target date next run pipeline. memory Character length 1, memory strategy. \"persistent\", target stays memory end pipeline (unless storage \"worker\", case targets unloads value memory right storing order avoid sending copious data network). \"transient\", target gets unloaded every new target completes. Either way, target gets automatically loaded memory whenever another target needs value. cloud-based dynamic files (e.g. format = \"file\" repository = \"aws\"), memory strategy applies temporary local copy file: \"persistent\" means remains end pipeline deleted, \"transient\" means gets deleted soon possible. former conserves bandwidth, latter conserves local storage. garbage_collection Logical, whether run base::gc() just target runs. deployment Character length 1. deployment \"main\", target run central controlling R process. Otherwise, deployment \"worker\" set pipeline distributed/parallel computing, target runs parallel worker. distributed/parallel computing targets, please visit https://books.ropensci.org/targets/crew.html. priority Numeric length 1 0 1. Controls targets get deployed first multiple competing targets ready simultaneously. Targets priorities closer 1 get dispatched earlier (polled earlier tar_make_future()). resources Object returned tar_resources() optional settings high-performance computing functionality, alternative data storage formats, optional capabilities targets. See tar_resources() details. storage Character length 1, relevant tar_make_clustermq() tar_make_future(). Must one following values: \"main\": target's return value sent back host machine saved/uploaded locally. \"worker\": worker saves/uploads value. \"none\": almost never recommended. niche situations, e.g. data needs loaded explicitly another language. use , return value target totally ignored target ends, downstream target still attempts load data file (except retrieval = \"none\"). select storage = \"none\", return value target's command ignored, data saved automatically. dynamic files (format = \"file\") responsibility user write data store inside target. distinguishing feature storage = \"none\" (opposed format = \"file\") general case, downstream targets automatically try load data data store dependency. corollary, storage = \"none\" completely unnecessary format \"file\". retrieval Character length 1, relevant tar_make_clustermq() tar_make_future(). Must one following values: \"main\": target's dependencies loaded host machine sent worker target runs. \"worker\": worker loads targets dependencies. \"none\": dependencies loaded . choice almost never recommended. niche situations, e.g. data needs loaded explicitly another language. cue optional object tar_cue() customize rules decide whether target date. applies downstream target. upstream target always runs. description Character length 1, custom free-form human-readable text description target. Descriptions appear target labels functions like tar_manifest() tar_visnetwork(), let select subsets targets names argument functions like tar_make(). example, tar_manifest(names = tar_described_as(starts_with(\"survival model\"))) lists targets whose descriptions start character string \"survival model\".","code":""},{"path":"https://docs.ropensci.org/tarchetypes/reference/tar_change.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Target that responds to an arbitrary change. — tar_change","text":"list two target objects, one upstream one downstream. upstream one triggers change, downstream one responds . See \"Target objects\" section background.","code":""},{"path":"https://docs.ropensci.org/tarchetypes/reference/tar_change.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Target that responds to an arbitrary change. — tar_change","text":"tar_change() creates pair targets, one upstream one downstream. upstream target always runs returns auxiliary value. auxiliary value gets referenced downstream target, causes downstream target rerun auxiliary value changes. behavior cancelled cue tar_cue(depend = FALSE) tar_cue(mode = \"never\"). upstream target always runs, tar_outdated() tar_visnetwork() always show targets outdated. However, tar_make() still skip downstream one upstream target detect change.","code":""},{"path":"https://docs.ropensci.org/tarchetypes/reference/tar_change.html","id":"target-objects","dir":"Reference","previous_headings":"","what":"Target objects","title":"Target that responds to an arbitrary change. — tar_change","text":"tarchetypes functions target factories, means return target objects lists target objects. Target objects represent skippable steps analysis pipeline described https://books.ropensci.org/targets/. Please read walkthrough https://books.ropensci.org/targets/walkthrough.html understand role target objects analysis pipelines. developers, https://wlandau.github.io/targetopia/contributing.html#target-factories explains target factories (functions like one generate targets) design specification https://books.ropensci.org/targets-design/ details structure composition target objects.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/tarchetypes/reference/tar_change.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Target that responds to an arbitrary change. — tar_change","text":"","code":"if (identical(Sys.getenv(\"TAR_LONG_EXAMPLES\"), \"true\")) { targets::tar_dir({ # tar_dir() runs code from a temporary directory. targets::tar_script({   list(     tarchetypes::tar_change(x, command = tempfile(), change = tempfile())   ) }) targets::tar_make() targets::tar_make() }) }"},{"path":"https://docs.ropensci.org/tarchetypes/reference/tar_combine.html","id":null,"dir":"Reference","previous_headings":"","what":"Static aggregation. — tar_combine","title":"Static aggregation. — tar_combine","text":"Aggregate results upstream targets new target.","code":""},{"path":"https://docs.ropensci.org/tarchetypes/reference/tar_combine.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Static aggregation. — tar_combine","text":"","code":"tar_combine(   name,   ...,   command = vctrs::vec_c(!!!.x),   use_names = TRUE,   pattern = NULL,   packages = targets::tar_option_get(\"packages\"),   library = targets::tar_option_get(\"library\"),   format = targets::tar_option_get(\"format\"),   repository = targets::tar_option_get(\"repository\"),   iteration = targets::tar_option_get(\"iteration\"),   error = targets::tar_option_get(\"error\"),   memory = targets::tar_option_get(\"memory\"),   garbage_collection = targets::tar_option_get(\"garbage_collection\"),   deployment = targets::tar_option_get(\"deployment\"),   priority = targets::tar_option_get(\"priority\"),   resources = targets::tar_option_get(\"resources\"),   storage = targets::tar_option_get(\"storage\"),   retrieval = targets::tar_option_get(\"retrieval\"),   cue = targets::tar_option_get(\"cue\"),   description = targets::tar_option_get(\"description\") )"},{"path":"https://docs.ropensci.org/tarchetypes/reference/tar_combine.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Static aggregation. — tar_combine","text":"name Symbol, name new target. ... One target objects list target objects. Lists can arbitrarily nested, list(). command R command aggregate targets. Must contain !!!.x arguments inserted, !!! unquote splice operator rlang. use_names Logical, whether insert names targets command splicing. pattern Language define branching target. example, pipeline numeric vector targets x y, tar_target(z, x + y, pattern = map(x, y)) implicitly defines branches z compute x[1] + y[1], x[2] + y[2], . See user manual details. packages Character vector packages load right target runs output data reloaded downstream targets. Use tar_option_set() set packages globally subsequent targets define. library Character vector library paths try loading packages. format Optional storage format target's return value. exception format = \"file\", target gets file _targets/objects, format different way save load file. See \"Storage formats\" section detailed list possible data storage formats. repository Character length 1, remote repository target storage. Choices: \"local\": file system local machine. \"aws\": Amazon Web Services (AWS) S3 bucket. Can configured non-AWS S3 bucket using endpoint argument tar_resources_aws(), versioning capabilities may lost . See cloud storage section https://books.ropensci.org/targets/data.html details instructions. \"gcp\": Google Cloud Platform storage bucket. See cloud storage section https://books.ropensci.org/targets/data.html details instructions. Note: repository \"local\" format \"file\" target create single output file. output file uploaded cloud tracked changes exists cloud. local file deleted target runs. iteration Character length 1, name iteration mode target. Choices: \"vector\": branching happens vctrs::vec_slice() aggregation happens vctrs::vec_c(). \"list\", branching happens [[]] aggregation happens list(). \"group\": dplyr::group_by()-like functionality branch subsets non-dynamic data frame. iteration = \"group\", target must dynamic (pattern argument tar_target() must left NULL). target's return value must data frame special tar_group column consecutive integers 1 number groups. integer designates group, branch created collection rows group. See tar_group() function see can create special tar_group column dplyr::group_by(). error Character length 1, target stops throws error. Options: \"stop\": whole pipeline stops throws error. \"continue\": whole pipeline keeps going. \"abridge\": currently running targets keep running, new targets launch . (Visit https://books.ropensci.org/targets/debugging.html learn debug targets using saved workspaces.) \"null\": errored target continues returns NULL. data hash deliberately wrong target date next run pipeline. memory Character length 1, memory strategy. \"persistent\", target stays memory end pipeline (unless storage \"worker\", case targets unloads value memory right storing order avoid sending copious data network). \"transient\", target gets unloaded every new target completes. Either way, target gets automatically loaded memory whenever another target needs value. cloud-based dynamic files (e.g. format = \"file\" repository = \"aws\"), memory strategy applies temporary local copy file: \"persistent\" means remains end pipeline deleted, \"transient\" means gets deleted soon possible. former conserves bandwidth, latter conserves local storage. garbage_collection Logical, whether run base::gc() just target runs. deployment Character length 1. deployment \"main\", target run central controlling R process. Otherwise, deployment \"worker\" set pipeline distributed/parallel computing, target runs parallel worker. distributed/parallel computing targets, please visit https://books.ropensci.org/targets/crew.html. priority Numeric length 1 0 1. Controls targets get deployed first multiple competing targets ready simultaneously. Targets priorities closer 1 get dispatched earlier (polled earlier tar_make_future()). resources Object returned tar_resources() optional settings high-performance computing functionality, alternative data storage formats, optional capabilities targets. See tar_resources() details. storage Character length 1, relevant tar_make_clustermq() tar_make_future(). Must one following values: \"main\": target's return value sent back host machine saved/uploaded locally. \"worker\": worker saves/uploads value. \"none\": almost never recommended. niche situations, e.g. data needs loaded explicitly another language. use , return value target totally ignored target ends, downstream target still attempts load data file (except retrieval = \"none\"). select storage = \"none\", return value target's command ignored, data saved automatically. dynamic files (format = \"file\") responsibility user write data store inside target. distinguishing feature storage = \"none\" (opposed format = \"file\") general case, downstream targets automatically try load data data store dependency. corollary, storage = \"none\" completely unnecessary format \"file\". retrieval Character length 1, relevant tar_make_clustermq() tar_make_future(). Must one following values: \"main\": target's dependencies loaded host machine sent worker target runs. \"worker\": worker loads targets dependencies. \"none\": dependencies loaded . choice almost never recommended. niche situations, e.g. data needs loaded explicitly another language. cue optional object tar_cue() customize rules decide whether target date. description Character length 1, custom free-form human-readable text description target. Descriptions appear target labels functions like tar_manifest() tar_visnetwork(), let select subsets targets names argument functions like tar_make(). example, tar_manifest(names = tar_described_as(starts_with(\"survival model\"))) lists targets whose descriptions start character string \"survival model\".","code":""},{"path":"https://docs.ropensci.org/tarchetypes/reference/tar_combine.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Static aggregation. — tar_combine","text":"new target object combine return values upstream targets. See \"Target objects\" section background.","code":""},{"path":"https://docs.ropensci.org/tarchetypes/reference/tar_combine.html","id":"target-objects","dir":"Reference","previous_headings":"","what":"Target objects","title":"Static aggregation. — tar_combine","text":"tarchetypes functions target factories, means return target objects lists target objects. Target objects represent skippable steps analysis pipeline described https://books.ropensci.org/targets/. Please read walkthrough https://books.ropensci.org/targets/walkthrough.html understand role target objects analysis pipelines. developers, https://wlandau.github.io/targetopia/contributing.html#target-factories explains target factories (functions like one generate targets) design specification https://books.ropensci.org/targets-design/ details structure composition target objects.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/tarchetypes/reference/tar_combine.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Static aggregation. — tar_combine","text":"","code":"if (identical(Sys.getenv(\"TAR_LONG_EXAMPLES\"), \"true\")) { targets::tar_dir({ # tar_dir() runs code from a temporary directory. targets::tar_script({   target1 <- targets::tar_target(x, head(mtcars))   target2 <- targets::tar_target(y, tail(mtcars))   target3 <- tarchetypes::tar_combine(     new_target_name,     target1,     target2,     command = bind_rows(!!!.x)   )   list(target1, target2, target3) }) targets::tar_manifest() }) }"},{"path":"https://docs.ropensci.org/tarchetypes/reference/tar_combine_raw.html","id":null,"dir":"Reference","previous_headings":"","what":"Static aggregation (raw version). — tar_combine_raw","title":"Static aggregation (raw version). — tar_combine_raw","text":"Like tar_combine() except name, command, pattern arguments use standard evaluation.","code":""},{"path":"https://docs.ropensci.org/tarchetypes/reference/tar_combine_raw.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Static aggregation (raw version). — tar_combine_raw","text":"","code":"tar_combine_raw(   name,   ...,   command = expression(vctrs::vec_c(!!!.x)),   use_names = TRUE,   pattern = NULL,   packages = targets::tar_option_get(\"packages\"),   library = targets::tar_option_get(\"library\"),   format = targets::tar_option_get(\"format\"),   repository = targets::tar_option_get(\"repository\"),   iteration = targets::tar_option_get(\"iteration\"),   error = targets::tar_option_get(\"error\"),   memory = targets::tar_option_get(\"memory\"),   garbage_collection = targets::tar_option_get(\"garbage_collection\"),   deployment = targets::tar_option_get(\"deployment\"),   priority = targets::tar_option_get(\"priority\"),   resources = targets::tar_option_get(\"resources\"),   storage = targets::tar_option_get(\"storage\"),   retrieval = targets::tar_option_get(\"retrieval\"),   cue = targets::tar_option_get(\"cue\"),   description = targets::tar_option_get(\"description\") )"},{"path":"https://docs.ropensci.org/tarchetypes/reference/tar_combine_raw.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Static aggregation (raw version). — tar_combine_raw","text":"name Character, name new target. ... One target objects list target objects. Lists can arbitrarily nested, list(). command Expression object, R command aggregate targets. Must contain !!!.x arguments inserted, !!! unquote splice operator rlang. use_names Logical, whether insert names targets command splicing. pattern Similar pattern argument tar_target() except object must already expression instead informally quoted code. base::expression() base::quote() can produce objects. packages Character vector packages load right target runs output data reloaded downstream targets. Use tar_option_set() set packages globally subsequent targets define. library Character vector library paths try loading packages. format Optional storage format target's return value. exception format = \"file\", target gets file _targets/objects, format different way save load file. See \"Storage formats\" section detailed list possible data storage formats. repository Character length 1, remote repository target storage. Choices: \"local\": file system local machine. \"aws\": Amazon Web Services (AWS) S3 bucket. Can configured non-AWS S3 bucket using endpoint argument tar_resources_aws(), versioning capabilities may lost . See cloud storage section https://books.ropensci.org/targets/data.html details instructions. \"gcp\": Google Cloud Platform storage bucket. See cloud storage section https://books.ropensci.org/targets/data.html details instructions. Note: repository \"local\" format \"file\" target create single output file. output file uploaded cloud tracked changes exists cloud. local file deleted target runs. iteration Character length 1, name iteration mode target. Choices: \"vector\": branching happens vctrs::vec_slice() aggregation happens vctrs::vec_c(). \"list\", branching happens [[]] aggregation happens list(). \"group\": dplyr::group_by()-like functionality branch subsets non-dynamic data frame. iteration = \"group\", target must dynamic (pattern argument tar_target() must left NULL). target's return value must data frame special tar_group column consecutive integers 1 number groups. integer designates group, branch created collection rows group. See tar_group() function see can create special tar_group column dplyr::group_by(). error Character length 1, target stops throws error. Options: \"stop\": whole pipeline stops throws error. \"continue\": whole pipeline keeps going. \"abridge\": currently running targets keep running, new targets launch . (Visit https://books.ropensci.org/targets/debugging.html learn debug targets using saved workspaces.) \"null\": errored target continues returns NULL. data hash deliberately wrong target date next run pipeline. memory Character length 1, memory strategy. \"persistent\", target stays memory end pipeline (unless storage \"worker\", case targets unloads value memory right storing order avoid sending copious data network). \"transient\", target gets unloaded every new target completes. Either way, target gets automatically loaded memory whenever another target needs value. cloud-based dynamic files (e.g. format = \"file\" repository = \"aws\"), memory strategy applies temporary local copy file: \"persistent\" means remains end pipeline deleted, \"transient\" means gets deleted soon possible. former conserves bandwidth, latter conserves local storage. garbage_collection Logical, whether run base::gc() just target runs. deployment Character length 1. deployment \"main\", target run central controlling R process. Otherwise, deployment \"worker\" set pipeline distributed/parallel computing, target runs parallel worker. distributed/parallel computing targets, please visit https://books.ropensci.org/targets/crew.html. priority Numeric length 1 0 1. Controls targets get deployed first multiple competing targets ready simultaneously. Targets priorities closer 1 get dispatched earlier (polled earlier tar_make_future()). resources Object returned tar_resources() optional settings high-performance computing functionality, alternative data storage formats, optional capabilities targets. See tar_resources() details. storage Character length 1, relevant tar_make_clustermq() tar_make_future(). Must one following values: \"main\": target's return value sent back host machine saved/uploaded locally. \"worker\": worker saves/uploads value. \"none\": almost never recommended. niche situations, e.g. data needs loaded explicitly another language. use , return value target totally ignored target ends, downstream target still attempts load data file (except retrieval = \"none\"). select storage = \"none\", return value target's command ignored, data saved automatically. dynamic files (format = \"file\") responsibility user write data store inside target. distinguishing feature storage = \"none\" (opposed format = \"file\") general case, downstream targets automatically try load data data store dependency. corollary, storage = \"none\" completely unnecessary format \"file\". retrieval Character length 1, relevant tar_make_clustermq() tar_make_future(). Must one following values: \"main\": target's dependencies loaded host machine sent worker target runs. \"worker\": worker loads targets dependencies. \"none\": dependencies loaded . choice almost never recommended. niche situations, e.g. data needs loaded explicitly another language. cue optional object tar_cue() customize rules decide whether target date. description Character length 1, custom free-form human-readable text description target. Descriptions appear target labels functions like tar_manifest() tar_visnetwork(), let select subsets targets names argument functions like tar_make(). example, tar_manifest(names = tar_described_as(starts_with(\"survival model\"))) lists targets whose descriptions start character string \"survival model\".","code":""},{"path":"https://docs.ropensci.org/tarchetypes/reference/tar_combine_raw.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Static aggregation (raw version). — tar_combine_raw","text":"new target object combine return values upstream targets. See \"Target objects\" section background.","code":""},{"path":"https://docs.ropensci.org/tarchetypes/reference/tar_combine_raw.html","id":"target-objects","dir":"Reference","previous_headings":"","what":"Target objects","title":"Static aggregation (raw version). — tar_combine_raw","text":"tarchetypes functions target factories, means return target objects lists target objects. Target objects represent skippable steps analysis pipeline described https://books.ropensci.org/targets/. Please read walkthrough https://books.ropensci.org/targets/walkthrough.html understand role target objects analysis pipelines. developers, https://wlandau.github.io/targetopia/contributing.html#target-factories explains target factories (functions like one generate targets) design specification https://books.ropensci.org/targets-design/ details structure composition target objects.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/tarchetypes/reference/tar_combine_raw.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Static aggregation (raw version). — tar_combine_raw","text":"","code":"if (identical(Sys.getenv(\"TAR_LONG_EXAMPLES\"), \"true\")) { targets::tar_dir({ # tar_dir() runs code from a temporary directory. targets::tar_script({   target1 <- targets::tar_target(x, head(mtcars))   target2 <- targets::tar_target(y, tail(mtcars))   target3 <- tarchetypes::tar_combine(new_target_name, target1, target2)   list(target1, target2, target3) }) targets::tar_manifest() }) }"},{"path":"https://docs.ropensci.org/tarchetypes/reference/tar_cue_age.html","id":null,"dir":"Reference","previous_headings":"","what":"Cue to run a target when the last output reaches a certain age — tar_cue_age","title":"Cue to run a target when the last output reaches a certain age — tar_cue_age","text":"tar_cue_age() creates cue object rerun target recent output data becomes old enough. age target determined targets::tar_timestamp(), way time stamp calculated explained Details section help file function.","code":""},{"path":"https://docs.ropensci.org/tarchetypes/reference/tar_cue_age.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Cue to run a target when the last output reaches a certain age — tar_cue_age","text":"","code":"tar_cue_age(   name,   age,   command = TRUE,   depend = TRUE,   format = TRUE,   repository = TRUE,   iteration = TRUE,   file = TRUE )"},{"path":"https://docs.ropensci.org/tarchetypes/reference/tar_cue_age.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Cue to run a target when the last output reaches a certain age — tar_cue_age","text":"name Symbol, name target. age difftime object length 1, .difftime(3, units = \"days\"). target's output data files older age (according recent time stamp target's output files) target rerun. hand, least one data file younger Sys.time() - age, ordinary invalidation rules apply, target may rerun. want force target run every 3 days, example, set age = .difftime(3, units = \"days\"). command Logical, whether rerun target command changed since last time. depend Logical, whether rerun target value one dependencies changed. format Logical, whether rerun target user-specified storage format changed. storage format user-specified tar_target() tar_option_set(). repository Logical, whether rerun target user-specified storage repository changed. storage repository user-specified tar_target() tar_option_set(). iteration Logical, whether rerun target user-specified iteration method changed. iteration method user-specified tar_target() tar_option_set(). file Logical, whether rerun target file(s) return value changed least one missing.","code":""},{"path":"https://docs.ropensci.org/tarchetypes/reference/tar_cue_age.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Cue to run a target when the last output reaches a certain age — tar_cue_age","text":"cue object. See \"Cue objects\" section background.","code":""},{"path":"https://docs.ropensci.org/tarchetypes/reference/tar_cue_age.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Cue to run a target when the last output reaches a certain age — tar_cue_age","text":"tar_cue_age() uses time stamps tar_meta()$time. time stamp recorded, cue defaults ordinary invalidation rules (.e. mode = \"thorough\" targets::tar_cue()).","code":""},{"path":"https://docs.ropensci.org/tarchetypes/reference/tar_cue_age.html","id":"dynamic-branches-at-regular-time-intervals","dir":"Reference","previous_headings":"","what":"Dynamic branches at regular time intervals","title":"Cue to run a target when the last output reaches a certain age — tar_cue_age","text":"Time stamps recorded whole dynamic targets, tar_age() good fit dynamic branching. invalidate dynamic branches regular intervals, recommended use targets::tar_older() combination targets::tar_invalidate() right calling tar_make(). example, tar_invalidate(any_of(tar_older(Sys.time - .difftime(1, units = \"weeks\")))) # nolint invalidates targets week old. , next tar_make() rerun targets.","code":""},{"path":"https://docs.ropensci.org/tarchetypes/reference/tar_cue_age.html","id":"cue-objects","dir":"Reference","previous_headings":"","what":"Cue objects","title":"Cue to run a target when the last output reaches a certain age — tar_cue_age","text":"cue object object generated targets::tar_cue(), tarchetypes::tar_cue_force(), similar. collection decision rules decide target invalidated/outdated (e.g. tar_make() similar reruns target). can supply cue objects tar_target() function similar. example, tar_target(x, run_stuff(), cue = tar_cue(mode = \"always\")) target always calls run_stuff() tar_make() always shows invalidated/outdated tar_outdated(), tar_visnetwork(), similar functions.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/tarchetypes/reference/tar_cue_age.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Cue to run a target when the last output reaches a certain age — tar_cue_age","text":"","code":"if (identical(Sys.getenv(\"TAR_LONG_EXAMPLES\"), \"true\")) { targets::tar_dir({ # tar_dir() runs code from a temporary directory. targets::tar_script({   library(tarchetypes)   list(     targets::tar_target(       data,       data.frame(x = seq_len(26)),       cue = tarchetypes::tar_cue_age(         name = data,         age = as.difftime(0.5, units = \"secs\")       )     )   ) }) targets::tar_make() Sys.sleep(0.6) targets::tar_make() }) }"},{"path":"https://docs.ropensci.org/tarchetypes/reference/tar_cue_age_raw.html","id":null,"dir":"Reference","previous_headings":"","what":"Cue to run a target when the last run reaches a certain age\n(raw version) — tar_cue_age_raw","title":"Cue to run a target when the last run reaches a certain age\n(raw version) — tar_cue_age_raw","text":"tar_cue_age_raw() acts like tar_cue_age() except name argument character string, symbol. tar_cue_age_raw() creates cue object rerun target recent output data becomes old enough. age target determined targets::tar_timestamp(), way time stamp calculated explained Details section help file function.","code":""},{"path":"https://docs.ropensci.org/tarchetypes/reference/tar_cue_age_raw.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Cue to run a target when the last run reaches a certain age\n(raw version) — tar_cue_age_raw","text":"","code":"tar_cue_age_raw(   name,   age,   command = TRUE,   depend = TRUE,   format = TRUE,   repository = TRUE,   iteration = TRUE,   file = TRUE )"},{"path":"https://docs.ropensci.org/tarchetypes/reference/tar_cue_age_raw.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Cue to run a target when the last run reaches a certain age\n(raw version) — tar_cue_age_raw","text":"name Character length 1, name target. age difftime object length 1, .difftime(3, units = \"days\"). target's output data files older age (according recent time stamp target's output files) target rerun. hand, least one data file younger Sys.time() - age, ordinary invalidation rules apply, target may rerun. want force target run every 3 days, example, set age = .difftime(3, units = \"days\"). command Logical, whether rerun target command changed since last time. depend Logical, whether rerun target value one dependencies changed. format Logical, whether rerun target user-specified storage format changed. storage format user-specified tar_target() tar_option_set(). repository Logical, whether rerun target user-specified storage repository changed. storage repository user-specified tar_target() tar_option_set(). iteration Logical, whether rerun target user-specified iteration method changed. iteration method user-specified tar_target() tar_option_set(). file Logical, whether rerun target file(s) return value changed least one missing.","code":""},{"path":"https://docs.ropensci.org/tarchetypes/reference/tar_cue_age_raw.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Cue to run a target when the last run reaches a certain age\n(raw version) — tar_cue_age_raw","text":"cue object. See \"Cue objects\" section background.","code":""},{"path":"https://docs.ropensci.org/tarchetypes/reference/tar_cue_age_raw.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Cue to run a target when the last run reaches a certain age\n(raw version) — tar_cue_age_raw","text":"tar_cue_age_raw() uses time stamps tar_meta()$time. time stamp recorded, cue defaults ordinary invalidation rules (.e. mode = \"thorough\" targets::tar_cue()).","code":""},{"path":"https://docs.ropensci.org/tarchetypes/reference/tar_cue_age_raw.html","id":"dynamic-branches-at-regular-time-intervals","dir":"Reference","previous_headings":"","what":"Dynamic branches at regular time intervals","title":"Cue to run a target when the last run reaches a certain age\n(raw version) — tar_cue_age_raw","text":"Time stamps recorded whole dynamic targets, tar_age() good fit dynamic branching. invalidate dynamic branches regular intervals, recommended use targets::tar_older() combination targets::tar_invalidate() right calling tar_make(). example, tar_invalidate(any_of(tar_older(Sys.time - .difftime(1, units = \"weeks\")))) # nolint invalidates targets week old. , next tar_make() rerun targets.","code":""},{"path":"https://docs.ropensci.org/tarchetypes/reference/tar_cue_age_raw.html","id":"cue-objects","dir":"Reference","previous_headings":"","what":"Cue objects","title":"Cue to run a target when the last run reaches a certain age\n(raw version) — tar_cue_age_raw","text":"cue object object generated targets::tar_cue(), tarchetypes::tar_cue_force(), similar. collection decision rules decide target invalidated/outdated (e.g. tar_make() similar reruns target). can supply cue objects tar_target() function similar. example, tar_target(x, run_stuff(), cue = tar_cue(mode = \"always\")) target always calls run_stuff() tar_make() always shows invalidated/outdated tar_outdated(), tar_visnetwork(), similar functions.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/tarchetypes/reference/tar_cue_age_raw.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Cue to run a target when the last run reaches a certain age\n(raw version) — tar_cue_age_raw","text":"","code":"if (identical(Sys.getenv(\"TAR_LONG_EXAMPLES\"), \"true\")) { targets::tar_dir({ # tar_dir() runs code from a temporary directory. targets::tar_script({   library(tarchetypes)   list(     targets::tar_target(       data,       data.frame(x = seq_len(26)),       cue = tarchetypes::tar_cue_age_raw(         name = \"data\",         age = as.difftime(0.5, units = \"secs\")       )     )   ) }) targets::tar_make() Sys.sleep(0.6) targets::tar_make() }) }"},{"path":"https://docs.ropensci.org/tarchetypes/reference/tar_cue_force.html","id":null,"dir":"Reference","previous_headings":"","what":"Cue to force a target to run if a condition is true — tar_cue_force","title":"Cue to force a target to run if a condition is true — tar_cue_force","text":"tar_cue_force() creates cue object force target run arbitrary condition evaluates TRUE. Supply returned cue object cue argument targets::tar_target() similar.","code":""},{"path":"https://docs.ropensci.org/tarchetypes/reference/tar_cue_force.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Cue to force a target to run if a condition is true — tar_cue_force","text":"","code":"tar_cue_force(   condition,   command = TRUE,   depend = TRUE,   format = TRUE,   repository = TRUE,   iteration = TRUE,   file = TRUE )"},{"path":"https://docs.ropensci.org/tarchetypes/reference/tar_cue_force.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Cue to force a target to run if a condition is true — tar_cue_force","text":"condition Logical vector evaluated locally target defined. element condition TRUE, target definitely rerun pipeline runs. Otherwise, target may may rerun, depending invalidation rules. condition evaluated cue factory called, condition depend upstream targets, quick calculate. command Logical, whether rerun target command changed since last time. depend Logical, whether rerun target value one dependencies changed. format Logical, whether rerun target user-specified storage format changed. storage format user-specified tar_target() tar_option_set(). repository Logical, whether rerun target user-specified storage repository changed. storage repository user-specified tar_target() tar_option_set(). iteration Logical, whether rerun target user-specified iteration method changed. iteration method user-specified tar_target() tar_option_set(). file Logical, whether rerun target file(s) return value changed least one missing.","code":""},{"path":"https://docs.ropensci.org/tarchetypes/reference/tar_cue_force.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Cue to force a target to run if a condition is true — tar_cue_force","text":"cue object. See \"Cue objects\" section background.","code":""},{"path":"https://docs.ropensci.org/tarchetypes/reference/tar_cue_force.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Cue to force a target to run if a condition is true — tar_cue_force","text":"tar_cue_force() tar_force() operate differently. former defines cue object based eagerly evaluated condition, tar_force() puts condition special upstream target always runs. Unlike tar_cue_force(), condition tar_force() can depend upstream targets, drawback targets defined tar_force() always show outdated functions like tar_outdated() tar_visnetwork() even though tar_make() may still skip main target condition met.","code":""},{"path":"https://docs.ropensci.org/tarchetypes/reference/tar_cue_force.html","id":"cue-objects","dir":"Reference","previous_headings":"","what":"Cue objects","title":"Cue to force a target to run if a condition is true — tar_cue_force","text":"cue object object generated targets::tar_cue(), tarchetypes::tar_cue_force(), similar. collection decision rules decide target invalidated/outdated (e.g. tar_make() similar reruns target). can supply cue objects tar_target() function similar. example, tar_target(x, run_stuff(), cue = tar_cue(mode = \"always\")) target always calls run_stuff() tar_make() always shows invalidated/outdated tar_outdated(), tar_visnetwork(), similar functions.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/tarchetypes/reference/tar_cue_force.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Cue to force a target to run if a condition is true — tar_cue_force","text":"","code":"if (identical(Sys.getenv(\"TAR_LONG_EXAMPLES\"), \"true\")) { targets::tar_dir({ # tar_dir() runs code from a temporary directory. targets::tar_script({   library(tarchetypes)   list(     targets::tar_target(       data,       data.frame(x = seq_len(26)),       cue = tarchetypes::tar_cue_force(1 > 0)     )   ) }) targets::tar_make() targets::tar_make() }) }"},{"path":"https://docs.ropensci.org/tarchetypes/reference/tar_cue_skip.html","id":null,"dir":"Reference","previous_headings":"","what":"Cue to skip a target if a condition is true — tar_cue_skip","title":"Cue to skip a target if a condition is true — tar_cue_skip","text":"tar_cue_skip() creates cue object skip target arbitrary condition evaluates TRUE. target still builds never built . Supply returned cue object cue argument targets::tar_target() similar.","code":""},{"path":"https://docs.ropensci.org/tarchetypes/reference/tar_cue_skip.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Cue to skip a target if a condition is true — tar_cue_skip","text":"","code":"tar_cue_skip(   condition,   command = TRUE,   depend = TRUE,   format = TRUE,   repository = TRUE,   iteration = TRUE,   file = TRUE )"},{"path":"https://docs.ropensci.org/tarchetypes/reference/tar_cue_skip.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Cue to skip a target if a condition is true — tar_cue_skip","text":"condition Logical vector evaluated locally target defined. element condition TRUE, pipeline skip target unless target never built . elements condition FALSE, target may may rerun, depending invalidation rules. condition evaluated cue factory called, condition depend upstream targets, quick calculate. command Logical, whether rerun target command changed since last time. depend Logical, whether rerun target value one dependencies changed. format Logical, whether rerun target user-specified storage format changed. storage format user-specified tar_target() tar_option_set(). repository Logical, whether rerun target user-specified storage repository changed. storage repository user-specified tar_target() tar_option_set(). iteration Logical, whether rerun target user-specified iteration method changed. iteration method user-specified tar_target() tar_option_set(). file Logical, whether rerun target file(s) return value changed least one missing.","code":""},{"path":"https://docs.ropensci.org/tarchetypes/reference/tar_cue_skip.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Cue to skip a target if a condition is true — tar_cue_skip","text":"cue object. See \"Cue objects\" section background.","code":""},{"path":"https://docs.ropensci.org/tarchetypes/reference/tar_cue_skip.html","id":"cue-objects","dir":"Reference","previous_headings":"","what":"Cue objects","title":"Cue to skip a target if a condition is true — tar_cue_skip","text":"cue object object generated targets::tar_cue(), tarchetypes::tar_cue_force(), similar. collection decision rules decide target invalidated/outdated (e.g. tar_make() similar reruns target). can supply cue objects tar_target() function similar. example, tar_target(x, run_stuff(), cue = tar_cue(mode = \"always\")) target always calls run_stuff() tar_make() always shows invalidated/outdated tar_outdated(), tar_visnetwork(), similar functions.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/tarchetypes/reference/tar_cue_skip.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Cue to skip a target if a condition is true — tar_cue_skip","text":"","code":"if (identical(Sys.getenv(\"TAR_LONG_EXAMPLES\"), \"true\")) { targets::tar_dir({ # tar_dir() runs code from a temporary directory. targets::tar_script({   library(tarchetypes)   list(     targets::tar_target(       data,       data.frame(x = seq_len(26)),       cue = tarchetypes::tar_cue_skip(1 > 0)     )   ) }) targets::tar_make() targets::tar_script({   library(tarchetypes)   list(     targets::tar_target(       data,       data.frame(x = seq_len(25)), # Change the command.       cue = tarchetypes::tar_cue_skip(1 > 0)     )   ) }) targets::tar_make() targets::tar_make() }) }"},{"path":"https://docs.ropensci.org/tarchetypes/reference/tar_download.html","id":null,"dir":"Reference","previous_headings":"","what":"Target that downloads URLs. — tar_download","title":"Target that downloads URLs. — tar_download","text":"Create target downloads file one URLs automatically reruns remote data changes (according ETags last-modified time stamps).","code":""},{"path":"https://docs.ropensci.org/tarchetypes/reference/tar_download.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Target that downloads URLs. — tar_download","text":"","code":"tar_download(   name,   urls,   paths,   method = NULL,   quiet = TRUE,   mode = \"w\",   cacheOK = TRUE,   extra = NULL,   headers = NULL,   iteration = targets::tar_option_get(\"iteration\"),   error = targets::tar_option_get(\"error\"),   memory = targets::tar_option_get(\"memory\"),   garbage_collection = targets::tar_option_get(\"garbage_collection\"),   deployment = targets::tar_option_get(\"deployment\"),   priority = targets::tar_option_get(\"priority\"),   resources = targets::tar_option_get(\"resources\"),   storage = targets::tar_option_get(\"storage\"),   retrieval = targets::tar_option_get(\"retrieval\"),   cue = targets::tar_option_get(\"cue\"),   description = targets::tar_option_get(\"description\") )"},{"path":"https://docs.ropensci.org/tarchetypes/reference/tar_download.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Target that downloads URLs. — tar_download","text":"name Symbol, name target. target name must valid name symbol R, must start dot. Subsequent targets can refer name symbolically induce dependency relationship: e.g. tar_target(downstream_target, f(upstream_target)) target named downstream_target depends target upstream_target function f(). addition, target's name determines random number generator seed. way, target runs reproducible seed someone else running pipeline get results, two targets pipeline share seed. (Even dynamic branches different names thus different seeds.) can recover seed completed target tar_meta(your_target, seed) run tar_seed_set() result locally recreate target's initial RNG state. urls Character vector URLs track download. Must known declared pipeline runs. paths Character vector local file paths download URLs. Must known declared pipeline runs. method Method used downloading files.  Current     download methods \"internal\", \"libcurl\",     \"wget\", \"curl\" \"wininet\" (Windows     ), value \"auto\": see ‘Details’     ‘Note’. method can also set option     \"download.file.method\": see options(). quiet TRUE, suppress status messages (),     progress bar. mode character.  mode write file.  Useful     values \"w\", \"wb\" (binary), \"\" (append)     \"ab\".  used methods \"wget\" \"curl\".     See also ‘Details’, notably using \"wb\" Windows. cacheOK logical.  server-side cached value acceptable? extra character vector additional command-line arguments     \"wget\" \"curl\" methods. headers named character vector additional HTTP headers     use HTTP[S] requests.  ignored non-HTTP[S] URLs.      User-Agent header taken HTTPUserAgent option     (see options) automatically used first header. iteration Character length 1, name iteration mode target. Choices: \"vector\": branching happens vctrs::vec_slice() aggregation happens vctrs::vec_c(). \"list\", branching happens [[]] aggregation happens list(). \"group\": dplyr::group_by()-like functionality branch subsets non-dynamic data frame. iteration = \"group\", target must dynamic (pattern argument tar_target() must left NULL). target's return value must data frame special tar_group column consecutive integers 1 number groups. integer designates group, branch created collection rows group. See tar_group() function see can create special tar_group column dplyr::group_by(). error Character length 1, target stops throws error. Options: \"stop\": whole pipeline stops throws error. \"continue\": whole pipeline keeps going. \"abridge\": currently running targets keep running, new targets launch . (Visit https://books.ropensci.org/targets/debugging.html learn debug targets using saved workspaces.) \"null\": errored target continues returns NULL. data hash deliberately wrong target date next run pipeline. memory Character length 1, memory strategy. \"persistent\", target stays memory end pipeline (unless storage \"worker\", case targets unloads value memory right storing order avoid sending copious data network). \"transient\", target gets unloaded every new target completes. Either way, target gets automatically loaded memory whenever another target needs value. cloud-based dynamic files (e.g. format = \"file\" repository = \"aws\"), memory strategy applies temporary local copy file: \"persistent\" means remains end pipeline deleted, \"transient\" means gets deleted soon possible. former conserves bandwidth, latter conserves local storage. garbage_collection Logical, whether run base::gc() just target runs. deployment Character length 1. deployment \"main\", target run central controlling R process. Otherwise, deployment \"worker\" set pipeline distributed/parallel computing, target runs parallel worker. distributed/parallel computing targets, please visit https://books.ropensci.org/targets/crew.html. priority Numeric length 1 0 1. Controls targets get deployed first multiple competing targets ready simultaneously. Targets priorities closer 1 get dispatched earlier (polled earlier tar_make_future()). resources Object returned tar_resources() optional settings high-performance computing functionality, alternative data storage formats, optional capabilities targets. See tar_resources() details. storage Character length 1, relevant tar_make_clustermq() tar_make_future(). Must one following values: \"main\": target's return value sent back host machine saved/uploaded locally. \"worker\": worker saves/uploads value. \"none\": almost never recommended. niche situations, e.g. data needs loaded explicitly another language. use , return value target totally ignored target ends, downstream target still attempts load data file (except retrieval = \"none\"). select storage = \"none\", return value target's command ignored, data saved automatically. dynamic files (format = \"file\") responsibility user write data store inside target. distinguishing feature storage = \"none\" (opposed format = \"file\") general case, downstream targets automatically try load data data store dependency. corollary, storage = \"none\" completely unnecessary format \"file\". retrieval Character length 1, relevant tar_make_clustermq() tar_make_future(). Must one following values: \"main\": target's dependencies loaded host machine sent worker target runs. \"worker\": worker loads targets dependencies. \"none\": dependencies loaded . choice almost never recommended. niche situations, e.g. data needs loaded explicitly another language. cue optional object tar_cue() customize rules decide whether target date. description Character length 1, custom free-form human-readable text description target. Descriptions appear target labels functions like tar_manifest() tar_visnetwork(), let select subsets targets names argument functions like tar_make(). example, tar_manifest(names = tar_described_as(starts_with(\"survival model\"))) lists targets whose descriptions start character string \"survival model\".","code":""},{"path":"https://docs.ropensci.org/tarchetypes/reference/tar_download.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Target that downloads URLs. — tar_download","text":"list two target objects, one upstream one downstream. upstream one watches URL changes, downstream one downloads . See \"Target objects\" section background.","code":""},{"path":"https://docs.ropensci.org/tarchetypes/reference/tar_download.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Target that downloads URLs. — tar_download","text":"tar_download() creates pair targets, one upstream one downstream. upstream target uses format = \"url\" (see targets::tar_target()) track files one URLs, automatically invalidate target ETags last-modified time stamps change. downstream target depends upstream one, downloads files, tracks using format = \"file\".","code":""},{"path":"https://docs.ropensci.org/tarchetypes/reference/tar_download.html","id":"target-objects","dir":"Reference","previous_headings":"","what":"Target objects","title":"Target that downloads URLs. — tar_download","text":"tarchetypes functions target factories, means return target objects lists target objects. Target objects represent skippable steps analysis pipeline described https://books.ropensci.org/targets/. Please read walkthrough https://books.ropensci.org/targets/walkthrough.html understand role target objects analysis pipelines. developers, https://wlandau.github.io/targetopia/contributing.html#target-factories explains target factories (functions like one generate targets) design specification https://books.ropensci.org/targets-design/ details structure composition target objects.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/tarchetypes/reference/tar_download.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Target that downloads URLs. — tar_download","text":"","code":"if (identical(Sys.getenv(\"TAR_LONG_EXAMPLES\"), \"true\")) { targets::tar_dir({ # tar_dir() runs code from a temporary directory. targets::tar_script({   list(     tarchetypes::tar_download(       x,       urls = c(\"https://httpbin.org/etag/test\", \"https://r-project.org\"),       paths = c(\"downloaded_file_1\", \"downloaded_file_2\")     )   ) }) targets::tar_make() targets::tar_read(x) }) }"},{"path":"https://docs.ropensci.org/tarchetypes/reference/tar_download_run.html","id":null,"dir":"Reference","previous_headings":"","what":"Download multiple URLs and return the local paths. — tar_download_run","title":"Download multiple URLs and return the local paths. — tar_download_run","text":"user-side function. invoke directly.","code":""},{"path":"https://docs.ropensci.org/tarchetypes/reference/tar_download_run.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Download multiple URLs and return the local paths. — tar_download_run","text":"","code":"tar_download_run(urls, paths, method, quiet, mode, cacheOK, extra, headers)"},{"path":"https://docs.ropensci.org/tarchetypes/reference/tar_download_run.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Download multiple URLs and return the local paths. — tar_download_run","text":"urls Character vector URLs track download. Must known declared pipeline runs. paths Character vector local file paths download URLs. Must known declared pipeline runs. method Method used downloading files.  Current     download methods \"internal\", \"libcurl\",     \"wget\", \"curl\" \"wininet\" (Windows     ), value \"auto\": see ‘Details’     ‘Note’. method can also set option     \"download.file.method\": see options(). quiet TRUE, suppress status messages (),     progress bar. mode character.  mode write file.  Useful     values \"w\", \"wb\" (binary), \"\" (append)     \"ab\".  used methods \"wget\" \"curl\".     See also ‘Details’, notably using \"wb\" Windows. cacheOK logical.  server-side cached value acceptable? extra character vector additional command-line arguments     \"wget\" \"curl\" methods. headers named character vector additional HTTP headers     use HTTP[S] requests.  ignored non-HTTP[S] URLs.      User-Agent header taken HTTPUserAgent option     (see options) automatically used first header.","code":""},{"path":"https://docs.ropensci.org/tarchetypes/reference/tar_download_run.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Download multiple URLs and return the local paths. — tar_download_run","text":"character vector file paths URLs downloaded.","code":""},{"path":"https://docs.ropensci.org/tarchetypes/reference/tar_download_run.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Download multiple URLs and return the local paths. — tar_download_run","text":"","code":"if (identical(Sys.getenv(\"TAR_LONG_EXAMPLES\"), \"true\")) {   tarchetypes::tar_download_run(     urls = \"https://httpbin.org/etag/test\",     paths = tempfile(),     method = NULL,     quiet = TRUE,     mode = \"w\",     cacheOK = NULL,     extra = NULL,     headers = NULL   ) }"},{"path":"https://docs.ropensci.org/tarchetypes/reference/tar_eval.html","id":null,"dir":"Reference","previous_headings":"","what":"Evaluate multiple expressions created with symbol substitution. — tar_eval","title":"Evaluate multiple expressions created with symbol substitution. — tar_eval","text":"Loop grid values, create expression object one, evaluate expression. Helps general metaprogramming.","code":""},{"path":"https://docs.ropensci.org/tarchetypes/reference/tar_eval.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Evaluate multiple expressions created with symbol substitution. — tar_eval","text":"","code":"tar_eval(expr, values, envir = parent.frame())"},{"path":"https://docs.ropensci.org/tarchetypes/reference/tar_eval.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Evaluate multiple expressions created with symbol substitution. — tar_eval","text":"expr Starting expression. Values iteratively substituted place symbols expr create new expression, new expression evaluated. values List values substitute expr create expressions. elements values must length. envir Environment evaluate new expressions.","code":""},{"path":"https://docs.ropensci.org/tarchetypes/reference/tar_eval.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Evaluate multiple expressions created with symbol substitution. — tar_eval","text":"list return values generated expression objects. Often, values target objects. See \"Target objects\" section background target objects specifically.","code":""},{"path":"https://docs.ropensci.org/tarchetypes/reference/tar_eval.html","id":"target-objects","dir":"Reference","previous_headings":"","what":"Target objects","title":"Evaluate multiple expressions created with symbol substitution. — tar_eval","text":"tarchetypes functions target factories, means return target objects lists target objects. Target objects represent skippable steps analysis pipeline described https://books.ropensci.org/targets/. Please read walkthrough https://books.ropensci.org/targets/walkthrough.html understand role target objects analysis pipelines. developers, https://wlandau.github.io/targetopia/contributing.html#target-factories explains target factories (functions like one generate targets) design specification https://books.ropensci.org/targets-design/ details structure composition target objects.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/tarchetypes/reference/tar_eval.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Evaluate multiple expressions created with symbol substitution. — tar_eval","text":"","code":"# tar_map() is incompatible with tar_render() because the latter # operates on preexisting tar_target() objects. By contrast, # tar_eval() and tar_sub() iterate over the literal code # farther upstream. values <- list(   name = lapply(c(\"name1\", \"name2\"), as.symbol),   file = list(\"file1.Rmd\", \"file2.Rmd\") ) tar_sub(list(name, file), values = values) #> [[1]] #> expression(list(name1, \"file1.Rmd\")) #>  #> [[2]] #> expression(list(name2, \"file2.Rmd\")) #>  tar_sub(tar_render(name, file), values = values) #> [[1]] #> expression(tar_render(name1, \"file1.Rmd\")) #>  #> [[2]] #> expression(tar_render(name2, \"file2.Rmd\")) #>  path <- tempfile() file.create(path) #> [1] TRUE str(tar_eval(tar_render(name, path), values = values)) #> List of 2 #>  $ :Classes 'tar_stem', 'tar_builder', 'tar_target', 'environment' <environment: 0x55adbe8270b0>  #>  $ :Classes 'tar_stem', 'tar_builder', 'tar_target', 'environment' <environment: 0x55adbe97e2d0>  # So in your _targets.R file, you can define a pipeline like as below. # Just make sure to set a unique name for each target # (which tar_map() does automatically). values <- list(   name = lapply(c(\"name1\", \"name2\"), as.symbol),   file = c(path, path) ) list(   tar_eval(tar_render(name, file), values = values) ) #> [[1]] #> [[1]][[1]] #> <tar_stem>  #>   name: name1  #>   description:   #>   command: #>     tarchetypes::tar_render_run(path = \"/tmp/Rtmp27PrcL/file457170a6f9b\",  #>         args = list(input = \"/tmp/Rtmp27PrcL/file457170a6f9b\", knit_root_dir = getwd(),  #>             quiet = TRUE), deps = list())  #>   format: file  #>   repository: local  #>   iteration method: vector  #>   error mode: stop  #>   memory mode: persistent  #>   storage mode: main  #>   retrieval mode: main  #>   deployment mode: main  #>   priority: 0  #>   resources: #>     list()  #>   cue: #>     mode: thorough #>     command: TRUE #>     depend: TRUE #>     format: TRUE #>     repository: TRUE #>     iteration: TRUE #>     file: TRUE #>     seed: TRUE  #>   packages: #>     tarchetypes #>     stats #>     graphics #>     grDevices #>     utils #>     datasets #>     methods #>     base  #>   library: #>     NULL #> [[1]][[2]] #> <tar_stem>  #>   name: name2  #>   description:   #>   command: #>     tarchetypes::tar_render_run(path = \"/tmp/Rtmp27PrcL/file457170a6f9b\",  #>         args = list(input = \"/tmp/Rtmp27PrcL/file457170a6f9b\", knit_root_dir = getwd(),  #>             quiet = TRUE), deps = list())  #>   format: file  #>   repository: local  #>   iteration method: vector  #>   error mode: stop  #>   memory mode: persistent  #>   storage mode: main  #>   retrieval mode: main  #>   deployment mode: main  #>   priority: 0  #>   resources: #>     list()  #>   cue: #>     mode: thorough #>     command: TRUE #>     depend: TRUE #>     format: TRUE #>     repository: TRUE #>     iteration: TRUE #>     file: TRUE #>     seed: TRUE  #>   packages: #>     tarchetypes #>     stats #>     graphics #>     grDevices #>     utils #>     datasets #>     methods #>     base  #>   library: #>     NULL #>"},{"path":"https://docs.ropensci.org/tarchetypes/reference/tar_eval_raw.html","id":null,"dir":"Reference","previous_headings":"","what":"Evaluate multiple expressions created with symbol substitution\n(raw version). — tar_eval_raw","title":"Evaluate multiple expressions created with symbol substitution\n(raw version). — tar_eval_raw","text":"Loop grid values, create expression object one, evaluate expression. Helps general metaprogramming. Unlike tar_sub(), quotes expr argument, tar_sub_raw() assumes expr expression object.","code":""},{"path":"https://docs.ropensci.org/tarchetypes/reference/tar_eval_raw.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Evaluate multiple expressions created with symbol substitution\n(raw version). — tar_eval_raw","text":"","code":"tar_eval_raw(expr, values, envir = parent.frame())"},{"path":"https://docs.ropensci.org/tarchetypes/reference/tar_eval_raw.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Evaluate multiple expressions created with symbol substitution\n(raw version). — tar_eval_raw","text":"expr Expression object starting expression. Values iteratively substituted place symbols expr create new expression, expression evaluated. values List values substitute expr create expressions. elements values must length. envir Environment evaluate new expressions.","code":""},{"path":"https://docs.ropensci.org/tarchetypes/reference/tar_eval_raw.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Evaluate multiple expressions created with symbol substitution\n(raw version). — tar_eval_raw","text":"list return values evaluating expression objects. Often, values target objects. See \"Target objects\" section background target objects specifically.","code":""},{"path":"https://docs.ropensci.org/tarchetypes/reference/tar_eval_raw.html","id":"target-objects","dir":"Reference","previous_headings":"","what":"Target objects","title":"Evaluate multiple expressions created with symbol substitution\n(raw version). — tar_eval_raw","text":"tarchetypes functions target factories, means return target objects lists target objects. Target objects represent skippable steps analysis pipeline described https://books.ropensci.org/targets/. Please read walkthrough https://books.ropensci.org/targets/walkthrough.html understand role target objects analysis pipelines. developers, https://wlandau.github.io/targetopia/contributing.html#target-factories explains target factories (functions like one generate targets) design specification https://books.ropensci.org/targets-design/ details structure composition target objects.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/tarchetypes/reference/tar_eval_raw.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Evaluate multiple expressions created with symbol substitution\n(raw version). — tar_eval_raw","text":"","code":"# tar_map() is incompatible with tar_render() because the latter # operates on preexisting tar_target() objects. By contrast, # tar_eval_raw() and tar_sub_raw() iterate over code farther upstream. values <- list(   name = lapply(c(\"name1\", \"name2\"), as.symbol),   file = c(\"file1.Rmd\", \"file2.Rmd\") ) tar_sub_raw(quote(list(name, file)), values = values) #> [[1]] #> expression(list(name1, \"file1.Rmd\")) #>  #> [[2]] #> expression(list(name2, \"file2.Rmd\")) #>  tar_sub_raw(quote(tar_render(name, file)), values = values) #> [[1]] #> expression(tar_render(name1, \"file1.Rmd\")) #>  #> [[2]] #> expression(tar_render(name2, \"file2.Rmd\")) #>  path <- tempfile() file.create(path) #> [1] TRUE str(tar_eval_raw(quote(tar_render(name, path)), values = values)) #> List of 2 #>  $ :Classes 'tar_stem', 'tar_builder', 'tar_target', 'environment' <environment: 0x55adbe876918>  #>  $ :Classes 'tar_stem', 'tar_builder', 'tar_target', 'environment' <environment: 0x55adbea48018>  # So in your _targets.R file, you can define a pipeline like as below. # Just make sure to set a unique name for each target # (which tar_map() does automatically). values <- list(   name = lapply(c(\"name1\", \"name2\"), as.symbol),   file = c(path, path) ) list(   tar_eval_raw(quote(tar_render(name, file)), values = values) ) #> [[1]] #> [[1]][[1]] #> <tar_stem>  #>   name: name1  #>   description:   #>   command: #>     tarchetypes::tar_render_run(path = \"/tmp/Rtmp27PrcL/file4574cea427a\",  #>         args = list(input = \"/tmp/Rtmp27PrcL/file4574cea427a\", knit_root_dir = getwd(),  #>             quiet = TRUE), deps = list())  #>   format: file  #>   repository: local  #>   iteration method: vector  #>   error mode: stop  #>   memory mode: persistent  #>   storage mode: main  #>   retrieval mode: main  #>   deployment mode: main  #>   priority: 0  #>   resources: #>     list()  #>   cue: #>     mode: thorough #>     command: TRUE #>     depend: TRUE #>     format: TRUE #>     repository: TRUE #>     iteration: TRUE #>     file: TRUE #>     seed: TRUE  #>   packages: #>     tarchetypes #>     stats #>     graphics #>     grDevices #>     utils #>     datasets #>     methods #>     base  #>   library: #>     NULL #> [[1]][[2]] #> <tar_stem>  #>   name: name2  #>   description:   #>   command: #>     tarchetypes::tar_render_run(path = \"/tmp/Rtmp27PrcL/file4574cea427a\",  #>         args = list(input = \"/tmp/Rtmp27PrcL/file4574cea427a\", knit_root_dir = getwd(),  #>             quiet = TRUE), deps = list())  #>   format: file  #>   repository: local  #>   iteration method: vector  #>   error mode: stop  #>   memory mode: persistent  #>   storage mode: main  #>   retrieval mode: main  #>   deployment mode: main  #>   priority: 0  #>   resources: #>     list()  #>   cue: #>     mode: thorough #>     command: TRUE #>     depend: TRUE #>     format: TRUE #>     repository: TRUE #>     iteration: TRUE #>     file: TRUE #>     seed: TRUE  #>   packages: #>     tarchetypes #>     stats #>     graphics #>     grDevices #>     utils #>     datasets #>     methods #>     base  #>   library: #>     NULL #>"},{"path":"https://docs.ropensci.org/tarchetypes/reference/tar_file_read.html","id":null,"dir":"Reference","previous_headings":"","what":"Track a file and read the contents. — tar_file_read","title":"Track a file and read the contents. — tar_file_read","text":"Create pair targets: one track file format = \"file\", another read file.","code":""},{"path":"https://docs.ropensci.org/tarchetypes/reference/tar_file_read.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Track a file and read the contents. — tar_file_read","text":"","code":"tar_file_read(   name,   command,   read,   tidy_eval = targets::tar_option_get(\"tidy_eval\"),   packages = targets::tar_option_get(\"packages\"),   library = targets::tar_option_get(\"library\"),   format = targets::tar_option_get(\"format\"),   format_file = c(\"file\", \"file_fast\"),   repository = targets::tar_option_get(\"repository\"),   error = targets::tar_option_get(\"error\"),   memory = targets::tar_option_get(\"memory\"),   garbage_collection = targets::tar_option_get(\"garbage_collection\"),   deployment = targets::tar_option_get(\"deployment\"),   priority = targets::tar_option_get(\"priority\"),   resources = targets::tar_option_get(\"resources\"),   storage = targets::tar_option_get(\"storage\"),   retrieval = targets::tar_option_get(\"retrieval\"),   cue = targets::tar_option_get(\"cue\"),   description = targets::tar_option_get(\"description\") )"},{"path":"https://docs.ropensci.org/tarchetypes/reference/tar_file_read.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Track a file and read the contents. — tar_file_read","text":"name Symbol, name target. target name must valid name symbol R, must start dot. Subsequent targets can refer name symbolically induce dependency relationship: e.g. tar_target(downstream_target, f(upstream_target)) target named downstream_target depends target upstream_target function f(). addition, target's name determines random number generator seed. way, target runs reproducible seed someone else running pipeline get results, two targets pipeline share seed. (Even dynamic branches different names thus different seeds.) can recover seed completed target tar_meta(your_target, seed) run tar_seed_set() result locally recreate target's initial RNG state. command R code runs format = \"file\" target returns file tracked. read R code read file. Must include !!.x file path goes: example, read = readr::read_csv(file = !!.x, col_types = readr::cols()). tidy_eval Logical, whether enable tidy evaluation interpreting command pattern. TRUE, can use \"bang-bang\" operator !! programmatically insert values global objects. packages Character vector packages load right target runs output data reloaded downstream targets. Use tar_option_set() set packages globally subsequent targets define. library Character vector library paths try loading packages. format Optional storage format target's return value. exception format = \"file\", target gets file _targets/objects, format different way save load file. See \"Storage formats\" section detailed list possible data storage formats. format_file Storage format file target, either \"file\" \"file_fast\". repository Character length 1, remote repository target storage. Choices: \"local\": file system local machine. \"aws\": Amazon Web Services (AWS) S3 bucket. Can configured non-AWS S3 bucket using endpoint argument tar_resources_aws(), versioning capabilities may lost . See cloud storage section https://books.ropensci.org/targets/data.html details instructions. \"gcp\": Google Cloud Platform storage bucket. See cloud storage section https://books.ropensci.org/targets/data.html details instructions. Note: repository \"local\" format \"file\" target create single output file. output file uploaded cloud tracked changes exists cloud. local file deleted target runs. error Character length 1, target stops throws error. Options: \"stop\": whole pipeline stops throws error. \"continue\": whole pipeline keeps going. \"abridge\": currently running targets keep running, new targets launch . (Visit https://books.ropensci.org/targets/debugging.html learn debug targets using saved workspaces.) \"null\": errored target continues returns NULL. data hash deliberately wrong target date next run pipeline. memory Character length 1, memory strategy. \"persistent\", target stays memory end pipeline (unless storage \"worker\", case targets unloads value memory right storing order avoid sending copious data network). \"transient\", target gets unloaded every new target completes. Either way, target gets automatically loaded memory whenever another target needs value. cloud-based dynamic files (e.g. format = \"file\" repository = \"aws\"), memory strategy applies temporary local copy file: \"persistent\" means remains end pipeline deleted, \"transient\" means gets deleted soon possible. former conserves bandwidth, latter conserves local storage. garbage_collection Logical, whether run base::gc() just target runs. deployment Character length 1. deployment \"main\", target run central controlling R process. Otherwise, deployment \"worker\" set pipeline distributed/parallel computing, target runs parallel worker. distributed/parallel computing targets, please visit https://books.ropensci.org/targets/crew.html. priority Numeric length 1 0 1. Controls targets get deployed first multiple competing targets ready simultaneously. Targets priorities closer 1 get dispatched earlier (polled earlier tar_make_future()). resources Object returned tar_resources() optional settings high-performance computing functionality, alternative data storage formats, optional capabilities targets. See tar_resources() details. storage Character length 1, relevant tar_make_clustermq() tar_make_future(). Must one following values: \"main\": target's return value sent back host machine saved/uploaded locally. \"worker\": worker saves/uploads value. \"none\": almost never recommended. niche situations, e.g. data needs loaded explicitly another language. use , return value target totally ignored target ends, downstream target still attempts load data file (except retrieval = \"none\"). select storage = \"none\", return value target's command ignored, data saved automatically. dynamic files (format = \"file\") responsibility user write data store inside target. distinguishing feature storage = \"none\" (opposed format = \"file\") general case, downstream targets automatically try load data data store dependency. corollary, storage = \"none\" completely unnecessary format \"file\". retrieval Character length 1, relevant tar_make_clustermq() tar_make_future(). Must one following values: \"main\": target's dependencies loaded host machine sent worker target runs. \"worker\": worker loads targets dependencies. \"none\": dependencies loaded . choice almost never recommended. niche situations, e.g. data needs loaded explicitly another language. cue optional object tar_cue() customize rules decide whether target date. description Character length 1, custom free-form human-readable text description target. Descriptions appear target labels functions like tar_manifest() tar_visnetwork(), let select subsets targets names argument functions like tar_make(). example, tar_manifest(names = tar_described_as(starts_with(\"survival model\"))) lists targets whose descriptions start character string \"survival model\".","code":""},{"path":"https://docs.ropensci.org/tarchetypes/reference/tar_file_read.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Track a file and read the contents. — tar_file_read","text":"list two new target objects track file read contents. See \"Target objects\" section background.","code":""},{"path":"https://docs.ropensci.org/tarchetypes/reference/tar_file_read.html","id":"target-objects","dir":"Reference","previous_headings":"","what":"Target objects","title":"Track a file and read the contents. — tar_file_read","text":"tarchetypes functions target factories, means return target objects lists target objects. Target objects represent skippable steps analysis pipeline described https://books.ropensci.org/targets/. Please read walkthrough https://books.ropensci.org/targets/walkthrough.html understand role target objects analysis pipelines. developers, https://wlandau.github.io/targetopia/contributing.html#target-factories explains target factories (functions like one generate targets) design specification https://books.ropensci.org/targets-design/ details structure composition target objects.","code":""},{"path":"https://docs.ropensci.org/tarchetypes/reference/tar_file_read.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Track a file and read the contents. — tar_file_read","text":"","code":"if (identical(Sys.getenv(\"TAR_LONG_EXAMPLES\"), \"true\")) { targets::tar_dir({ # tar_dir() runs code from a temporary directory. targets::tar_script({   tar_file_read(data, get_path(), read_csv(file = !!.x, col_types = cols())) }) targets::tar_manifest() }) }"},{"path":"https://docs.ropensci.org/tarchetypes/reference/tar_files.html","id":null,"dir":"Reference","previous_headings":"","what":"Dynamic branching over output or input files. — tar_files","title":"Dynamic branching over output or input files. — tar_files","text":"Dynamic branching output input files.","code":""},{"path":"https://docs.ropensci.org/tarchetypes/reference/tar_files.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Dynamic branching over output or input files. — tar_files","text":"","code":"tar_files(   name,   command,   tidy_eval = targets::tar_option_get(\"tidy_eval\"),   packages = targets::tar_option_get(\"packages\"),   library = targets::tar_option_get(\"library\"),   format = c(\"file\", \"file_fast\", \"url\", \"aws_file\"),   repository = targets::tar_option_get(\"repository\"),   iteration = targets::tar_option_get(\"iteration\"),   error = targets::tar_option_get(\"error\"),   memory = targets::tar_option_get(\"memory\"),   garbage_collection = targets::tar_option_get(\"garbage_collection\"),   deployment = targets::tar_option_get(\"deployment\"),   priority = targets::tar_option_get(\"priority\"),   resources = targets::tar_option_get(\"resources\"),   storage = targets::tar_option_get(\"storage\"),   retrieval = targets::tar_option_get(\"retrieval\"),   cue = targets::tar_option_get(\"cue\"),   description = targets::tar_option_get(\"description\") )"},{"path":"https://docs.ropensci.org/tarchetypes/reference/tar_files.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Dynamic branching over output or input files. — tar_files","text":"name Symbol, name target. target name must valid name symbol R, must start dot. Subsequent targets can refer name symbolically induce dependency relationship: e.g. tar_target(downstream_target, f(upstream_target)) target named downstream_target depends target upstream_target function f(). addition, target's name determines random number generator seed. way, target runs reproducible seed someone else running pipeline get results, two targets pipeline share seed. (Even dynamic branches different names thus different seeds.) can recover seed completed target tar_meta(your_target, seed) run tar_seed_set() result locally recreate target's initial RNG state. command R code run target. tidy_eval Logical, whether enable tidy evaluation interpreting command pattern. TRUE, can use \"bang-bang\" operator !! programmatically insert values global objects. packages Character vector packages load right target runs output data reloaded downstream targets. Use tar_option_set() set packages globally subsequent targets define. library Character vector library paths try loading packages. format Character length 1. Must \"file\", \"url\", \"aws_file\". See format argument targets::tar_target() details. repository Character length 1, remote repository target storage. Choices: \"local\": file system local machine. \"aws\": Amazon Web Services (AWS) S3 bucket. Can configured non-AWS S3 bucket using endpoint argument tar_resources_aws(), versioning capabilities may lost . See cloud storage section https://books.ropensci.org/targets/data.html details instructions. \"gcp\": Google Cloud Platform storage bucket. See cloud storage section https://books.ropensci.org/targets/data.html details instructions. Note: repository \"local\" format \"file\" target create single output file. output file uploaded cloud tracked changes exists cloud. local file deleted target runs. iteration Character length 1, name iteration mode target. Choices: \"vector\": branching happens vctrs::vec_slice() aggregation happens vctrs::vec_c(). \"list\", branching happens [[]] aggregation happens list(). \"group\": dplyr::group_by()-like functionality branch subsets non-dynamic data frame. iteration = \"group\", target must dynamic (pattern argument tar_target() must left NULL). target's return value must data frame special tar_group column consecutive integers 1 number groups. integer designates group, branch created collection rows group. See tar_group() function see can create special tar_group column dplyr::group_by(). error Character length 1, target stops throws error. Options: \"stop\": whole pipeline stops throws error. \"continue\": whole pipeline keeps going. \"abridge\": currently running targets keep running, new targets launch . (Visit https://books.ropensci.org/targets/debugging.html learn debug targets using saved workspaces.) \"null\": errored target continues returns NULL. data hash deliberately wrong target date next run pipeline. memory Character length 1, memory strategy. \"persistent\", target stays memory end pipeline (unless storage \"worker\", case targets unloads value memory right storing order avoid sending copious data network). \"transient\", target gets unloaded every new target completes. Either way, target gets automatically loaded memory whenever another target needs value. cloud-based dynamic files (e.g. format = \"file\" repository = \"aws\"), memory strategy applies temporary local copy file: \"persistent\" means remains end pipeline deleted, \"transient\" means gets deleted soon possible. former conserves bandwidth, latter conserves local storage. garbage_collection Logical, whether run base::gc() just target runs. deployment Character length 1. deployment \"main\", target run central controlling R process. Otherwise, deployment \"worker\" set pipeline distributed/parallel computing, target runs parallel worker. distributed/parallel computing targets, please visit https://books.ropensci.org/targets/crew.html. priority Numeric length 1 0 1. Controls targets get deployed first multiple competing targets ready simultaneously. Targets priorities closer 1 get dispatched earlier (polled earlier tar_make_future()). resources Object returned tar_resources() optional settings high-performance computing functionality, alternative data storage formats, optional capabilities targets. See tar_resources() details. storage Character length 1, relevant tar_make_clustermq() tar_make_future(). Must one following values: \"main\": target's return value sent back host machine saved/uploaded locally. \"worker\": worker saves/uploads value. \"none\": almost never recommended. niche situations, e.g. data needs loaded explicitly another language. use , return value target totally ignored target ends, downstream target still attempts load data file (except retrieval = \"none\"). select storage = \"none\", return value target's command ignored, data saved automatically. dynamic files (format = \"file\") responsibility user write data store inside target. distinguishing feature storage = \"none\" (opposed format = \"file\") general case, downstream targets automatically try load data data store dependency. corollary, storage = \"none\" completely unnecessary format \"file\". retrieval Character length 1, relevant tar_make_clustermq() tar_make_future(). Must one following values: \"main\": target's dependencies loaded host machine sent worker target runs. \"worker\": worker loads targets dependencies. \"none\": dependencies loaded . choice almost never recommended. niche situations, e.g. data needs loaded explicitly another language. cue optional object tar_cue() customize rules decide whether target date. applies downstream target. upstream target always runs. description Character length 1, custom free-form human-readable text description target. Descriptions appear target labels functions like tar_manifest() tar_visnetwork(), let select subsets targets names argument functions like tar_make(). example, tar_manifest(names = tar_described_as(starts_with(\"survival model\"))) lists targets whose descriptions start character string \"survival model\".","code":""},{"path":"https://docs.ropensci.org/tarchetypes/reference/tar_files.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Dynamic branching over output or input files. — tar_files","text":"list two targets, one upstream one downstream. upstream one work returns file paths, downstream target pattern applies format = \"file\", format = \"file_fast\", format = \"url\". See \"Target objects\" section background.","code":""},{"path":"https://docs.ropensci.org/tarchetypes/reference/tar_files.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Dynamic branching over output or input files. — tar_files","text":"tar_files() creates pair targets, one upstream one downstream. upstream target work returns file paths, downstream target pattern applies format = \"file\", format = \"file_fast\", format = \"url\". (URLs input-, must already exist beforehand.) correct way dynamically iterate file/url targets. makes sure downstream patterns rerun branches files/urls change. information, visit https://github.com/ropensci/targets/issues/136 https://github.com/ropensci/drake/issues/1302.","code":""},{"path":"https://docs.ropensci.org/tarchetypes/reference/tar_files.html","id":"target-objects","dir":"Reference","previous_headings":"","what":"Target objects","title":"Dynamic branching over output or input files. — tar_files","text":"tarchetypes functions target factories, means return target objects lists target objects. Target objects represent skippable steps analysis pipeline described https://books.ropensci.org/targets/. Please read walkthrough https://books.ropensci.org/targets/walkthrough.html understand role target objects analysis pipelines. developers, https://wlandau.github.io/targetopia/contributing.html#target-factories explains target factories (functions like one generate targets) design specification https://books.ropensci.org/targets-design/ details structure composition target objects.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/tarchetypes/reference/tar_files.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Dynamic branching over output or input files. — tar_files","text":"","code":"if (identical(Sys.getenv(\"TAR_LONG_EXAMPLES\"), \"true\")) { targets::tar_dir({ # tar_dir() runs code from a temporary directory. targets::tar_script({   # Do not use temp files in real projects   # or else your targets will always rerun.   paths <- unlist(replicate(2, tempfile()))   file.create(paths)   list(     tarchetypes::tar_files(x, paths)   ) }) targets::tar_make() targets::tar_read(x) }) }"},{"path":"https://docs.ropensci.org/tarchetypes/reference/tar_files_input.html","id":null,"dir":"Reference","previous_headings":"","what":"Dynamic branching over input files or URLs — tar_files_input","title":"Dynamic branching over input files or URLs — tar_files_input","text":"Dynamic branching input files URLs.","code":""},{"path":"https://docs.ropensci.org/tarchetypes/reference/tar_files_input.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Dynamic branching over input files or URLs — tar_files_input","text":"","code":"tar_files_input(   name,   files,   batches = length(files),   format = c(\"file\", \"file_fast\", \"url\", \"aws_file\"),   repository = targets::tar_option_get(\"repository\"),   iteration = targets::tar_option_get(\"iteration\"),   error = targets::tar_option_get(\"error\"),   memory = targets::tar_option_get(\"memory\"),   garbage_collection = targets::tar_option_get(\"garbage_collection\"),   priority = targets::tar_option_get(\"priority\"),   resources = targets::tar_option_get(\"resources\"),   cue = targets::tar_option_get(\"cue\"),   description = targets::tar_option_get(\"description\") )"},{"path":"https://docs.ropensci.org/tarchetypes/reference/tar_files_input.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Dynamic branching over input files or URLs — tar_files_input","text":"name Symbol, name target. target name must valid name symbol R, must start dot. Subsequent targets can refer name symbolically induce dependency relationship: e.g. tar_target(downstream_target, f(upstream_target)) target named downstream_target depends target upstream_target function f(). addition, target's name determines random number generator seed. way, target runs reproducible seed someone else running pipeline get results, two targets pipeline share seed. (Even dynamic branches different names thus different seeds.) can recover seed completed target tar_meta(your_target, seed) run tar_seed_set() result locally recreate target's initial RNG state. files Nonempty character vector known existing input files track changes. batches Positive integer length 1, number batches partition files. default one file per batch (maximum number batches) simplest handle cause lot overhead consume lot computing resources. Consider reducing number batches number files heavy workloads. format Character, either \"file\", \"file_fast\", \"url\". See format argument targets::tar_target() details. repository Character length 1, remote repository target storage. Choices: \"local\": file system local machine. \"aws\": Amazon Web Services (AWS) S3 bucket. Can configured non-AWS S3 bucket using endpoint argument tar_resources_aws(), versioning capabilities may lost . See cloud storage section https://books.ropensci.org/targets/data.html details instructions. \"gcp\": Google Cloud Platform storage bucket. See cloud storage section https://books.ropensci.org/targets/data.html details instructions. Note: repository \"local\" format \"file\" target create single output file. output file uploaded cloud tracked changes exists cloud. local file deleted target runs. iteration Character, iteration method. Must method supported iteration argument targets::tar_target(). iteration method upstream target always \"list\" order support batching. error Character length 1, target stops throws error. Options: \"stop\": whole pipeline stops throws error. \"continue\": whole pipeline keeps going. \"abridge\": currently running targets keep running, new targets launch . (Visit https://books.ropensci.org/targets/debugging.html learn debug targets using saved workspaces.) \"null\": errored target continues returns NULL. data hash deliberately wrong target date next run pipeline. memory Character length 1, memory strategy. \"persistent\", target stays memory end pipeline (unless storage \"worker\", case targets unloads value memory right storing order avoid sending copious data network). \"transient\", target gets unloaded every new target completes. Either way, target gets automatically loaded memory whenever another target needs value. cloud-based dynamic files (e.g. format = \"file\" repository = \"aws\"), memory strategy applies temporary local copy file: \"persistent\" means remains end pipeline deleted, \"transient\" means gets deleted soon possible. former conserves bandwidth, latter conserves local storage. garbage_collection Logical, whether run base::gc() just target runs. priority Numeric length 1 0 1. Controls targets get deployed first multiple competing targets ready simultaneously. Targets priorities closer 1 get dispatched earlier (polled earlier tar_make_future()). resources Object returned tar_resources() optional settings high-performance computing functionality, alternative data storage formats, optional capabilities targets. See tar_resources() details. cue optional object tar_cue() customize rules decide whether target date. applies downstream target. upstream target always runs. description Character length 1, custom free-form human-readable text description target. Descriptions appear target labels functions like tar_manifest() tar_visnetwork(), let select subsets targets names argument functions like tar_make(). example, tar_manifest(names = tar_described_as(starts_with(\"survival model\"))) lists targets whose descriptions start character string \"survival model\".","code":""},{"path":"https://docs.ropensci.org/tarchetypes/reference/tar_files_input.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Dynamic branching over input files or URLs — tar_files_input","text":"list two targets, one upstream one downstream. upstream one work returns file paths, downstream target pattern applies format = \"file\" format = \"url\". See \"Target objects\" section background.","code":""},{"path":"https://docs.ropensci.org/tarchetypes/reference/tar_files_input.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Dynamic branching over input files or URLs — tar_files_input","text":"tar_files_input() like tar_files() convenient files question already exist known advance. Whereas tar_files() always appears outdated (e.g. tar_outdated()) always needs check files needs branch , tar_files_input() appear date files changed since last tar_make(). addition, tar_files_input() automatically groups input files batches reduce overhead increase efficiency parallel processing. tar_files_input() creates pair targets, one upstream one downstream. upstream target work returns file paths, downstream target pattern applies format = \"file\", format = \"file_fast\", format = \"url\". correct way dynamically iterate file/url targets. makes sure downstream patterns rerun branches files/urls change. information, visit https://github.com/ropensci/targets/issues/136 https://github.com/ropensci/drake/issues/1302.","code":""},{"path":"https://docs.ropensci.org/tarchetypes/reference/tar_files_input.html","id":"target-objects","dir":"Reference","previous_headings":"","what":"Target objects","title":"Dynamic branching over input files or URLs — tar_files_input","text":"tarchetypes functions target factories, means return target objects lists target objects. Target objects represent skippable steps analysis pipeline described https://books.ropensci.org/targets/. Please read walkthrough https://books.ropensci.org/targets/walkthrough.html understand role target objects analysis pipelines. developers, https://wlandau.github.io/targetopia/contributing.html#target-factories explains target factories (functions like one generate targets) design specification https://books.ropensci.org/targets-design/ details structure composition target objects.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/tarchetypes/reference/tar_files_input.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Dynamic branching over input files or URLs — tar_files_input","text":"","code":"if (identical(Sys.getenv(\"TAR_LONG_EXAMPLES\"), \"true\")) { targets::tar_dir({ # tar_dir() runs code from a temporary directory. targets::tar_script({   # Do not use temp files in real projects   # or else your targets will always rerun.   paths <- unlist(replicate(4, tempfile()))   file.create(paths)   list(     tarchetypes::tar_files_input(       x,       paths,       batches = 2     )   ) }) targets::tar_make() targets::tar_read(x) targets::tar_read(x, branches = 1) }) }"},{"path":"https://docs.ropensci.org/tarchetypes/reference/tar_files_input_raw.html","id":null,"dir":"Reference","previous_headings":"","what":"Dynamic branching over input files or URLs (raw version). — tar_files_input_raw","title":"Dynamic branching over input files or URLs (raw version). — tar_files_input_raw","text":"Dynamic branching input files URLs.","code":""},{"path":"https://docs.ropensci.org/tarchetypes/reference/tar_files_input_raw.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Dynamic branching over input files or URLs (raw version). — tar_files_input_raw","text":"","code":"tar_files_input_raw(   name,   files,   batches = length(files),   format = c(\"file\", \"file_fast\", \"url\", \"aws_file\"),   repository = targets::tar_option_get(\"repository\"),   iteration = targets::tar_option_get(\"iteration\"),   error = targets::tar_option_get(\"error\"),   memory = targets::tar_option_get(\"memory\"),   garbage_collection = targets::tar_option_get(\"garbage_collection\"),   priority = targets::tar_option_get(\"priority\"),   resources = targets::tar_option_get(\"resources\"),   cue = targets::tar_option_get(\"cue\"),   description = targets::tar_option_get(\"description\") )"},{"path":"https://docs.ropensci.org/tarchetypes/reference/tar_files_input_raw.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Dynamic branching over input files or URLs (raw version). — tar_files_input_raw","text":"name Symbol, name target. target name must valid name symbol R, must start dot. Subsequent targets can refer name symbolically induce dependency relationship: e.g. tar_target(downstream_target, f(upstream_target)) target named downstream_target depends target upstream_target function f(). addition, target's name determines random number generator seed. way, target runs reproducible seed someone else running pipeline get results, two targets pipeline share seed. (Even dynamic branches different names thus different seeds.) can recover seed completed target tar_meta(your_target, seed) run tar_seed_set() result locally recreate target's initial RNG state. files Nonempty character vector known existing input files track changes. batches Positive integer length 1, number batches partition files. default one file per batch (maximum number batches) simplest handle cause lot overhead consume lot computing resources. Consider reducing number batches number files heavy workloads. format Character, either \"file\", \"file_fast\", \"url\". See format argument targets::tar_target() details. repository Character length 1, remote repository target storage. Choices: \"local\": file system local machine. \"aws\": Amazon Web Services (AWS) S3 bucket. Can configured non-AWS S3 bucket using endpoint argument tar_resources_aws(), versioning capabilities may lost . See cloud storage section https://books.ropensci.org/targets/data.html details instructions. \"gcp\": Google Cloud Platform storage bucket. See cloud storage section https://books.ropensci.org/targets/data.html details instructions. Note: repository \"local\" format \"file\" target create single output file. output file uploaded cloud tracked changes exists cloud. local file deleted target runs. iteration Character, iteration method. Must method supported iteration argument targets::tar_target(). iteration method upstream target always \"list\" order support batching. error Character length 1, target stops throws error. Options: \"stop\": whole pipeline stops throws error. \"continue\": whole pipeline keeps going. \"abridge\": currently running targets keep running, new targets launch . (Visit https://books.ropensci.org/targets/debugging.html learn debug targets using saved workspaces.) \"null\": errored target continues returns NULL. data hash deliberately wrong target date next run pipeline. memory Character length 1, memory strategy. \"persistent\", target stays memory end pipeline (unless storage \"worker\", case targets unloads value memory right storing order avoid sending copious data network). \"transient\", target gets unloaded every new target completes. Either way, target gets automatically loaded memory whenever another target needs value. cloud-based dynamic files (e.g. format = \"file\" repository = \"aws\"), memory strategy applies temporary local copy file: \"persistent\" means remains end pipeline deleted, \"transient\" means gets deleted soon possible. former conserves bandwidth, latter conserves local storage. garbage_collection Logical, whether run base::gc() just target runs. priority Numeric length 1 0 1. Controls targets get deployed first multiple competing targets ready simultaneously. Targets priorities closer 1 get dispatched earlier (polled earlier tar_make_future()). resources Object returned tar_resources() optional settings high-performance computing functionality, alternative data storage formats, optional capabilities targets. See tar_resources() details. cue optional object tar_cue() customize rules decide whether target date. applies downstream target. upstream target always runs. description Character length 1, custom free-form human-readable text description target. Descriptions appear target labels functions like tar_manifest() tar_visnetwork(), let select subsets targets names argument functions like tar_make(). example, tar_manifest(names = tar_described_as(starts_with(\"survival model\"))) lists targets whose descriptions start character string \"survival model\".","code":""},{"path":"https://docs.ropensci.org/tarchetypes/reference/tar_files_input_raw.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Dynamic branching over input files or URLs (raw version). — tar_files_input_raw","text":"list two targets, one upstream one downstream. upstream one work returns file paths, downstream target pattern applies format = \"file\" format = \"url\". See \"Target objects\" section background.","code":""},{"path":"https://docs.ropensci.org/tarchetypes/reference/tar_files_input_raw.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Dynamic branching over input files or URLs (raw version). — tar_files_input_raw","text":"tar_files_input_raw() similar tar_files_input() except name argument must character string. tar_files_input_raw() creates pair targets, one upstream one downstream. upstream target work returns file paths, downstream target pattern applies format = \"file\" format = \"url\". correct way dynamically iterate file/url targets. makes sure downstream patterns rerun branches files/urls change. information, visit https://github.com/ropensci/targets/issues/136 https://github.com/ropensci/drake/issues/1302.","code":""},{"path":"https://docs.ropensci.org/tarchetypes/reference/tar_files_input_raw.html","id":"target-objects","dir":"Reference","previous_headings":"","what":"Target objects","title":"Dynamic branching over input files or URLs (raw version). — tar_files_input_raw","text":"tarchetypes functions target factories, means return target objects lists target objects. Target objects represent skippable steps analysis pipeline described https://books.ropensci.org/targets/. Please read walkthrough https://books.ropensci.org/targets/walkthrough.html understand role target objects analysis pipelines. developers, https://wlandau.github.io/targetopia/contributing.html#target-factories explains target factories (functions like one generate targets) design specification https://books.ropensci.org/targets-design/ details structure composition target objects.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/tarchetypes/reference/tar_files_input_raw.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Dynamic branching over input files or URLs (raw version). — tar_files_input_raw","text":"","code":"if (identical(Sys.getenv(\"TAR_LONG_EXAMPLES\"), \"true\")) { targets::tar_dir({ # tar_dir() runs code from a temporary directory. targets::tar_script({   # Do not use temp files in real projects   # or else your targets will always rerun.   paths <- unlist(replicate(4, tempfile()))   file.create(paths)   list(     tarchetypes::tar_files_input_raw(       \"x\",       paths,       batches = 2     )   ) }) targets::tar_make() targets::tar_read(x) targets::tar_read(x, branches = 1) }) }"},{"path":"https://docs.ropensci.org/tarchetypes/reference/tar_files_raw.html","id":null,"dir":"Reference","previous_headings":"","what":"Dynamic branching over output or input files (raw version). — tar_files_raw","title":"Dynamic branching over output or input files (raw version). — tar_files_raw","text":"Dynamic branching output input files.","code":""},{"path":"https://docs.ropensci.org/tarchetypes/reference/tar_files_raw.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Dynamic branching over output or input files (raw version). — tar_files_raw","text":"","code":"tar_files_raw(   name,   command,   packages = targets::tar_option_get(\"packages\"),   library = targets::tar_option_get(\"library\"),   format = c(\"file\", \"file_fast\", \"url\", \"aws_file\"),   repository = targets::tar_option_get(\"repository\"),   iteration = targets::tar_option_get(\"iteration\"),   error = targets::tar_option_get(\"error\"),   memory = targets::tar_option_get(\"memory\"),   garbage_collection = targets::tar_option_get(\"garbage_collection\"),   deployment = targets::tar_option_get(\"deployment\"),   priority = targets::tar_option_get(\"priority\"),   resources = targets::tar_option_get(\"resources\"),   storage = targets::tar_option_get(\"storage\"),   retrieval = targets::tar_option_get(\"retrieval\"),   cue = targets::tar_option_get(\"cue\"),   description = targets::tar_option_get(\"description\") )"},{"path":"https://docs.ropensci.org/tarchetypes/reference/tar_files_raw.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Dynamic branching over output or input files (raw version). — tar_files_raw","text":"name Symbol, name target. target name must valid name symbol R, must start dot. Subsequent targets can refer name symbolically induce dependency relationship: e.g. tar_target(downstream_target, f(upstream_target)) target named downstream_target depends target upstream_target function f(). addition, target's name determines random number generator seed. way, target runs reproducible seed someone else running pipeline get results, two targets pipeline share seed. (Even dynamic branches different names thus different seeds.) can recover seed completed target tar_meta(your_target, seed) run tar_seed_set() result locally recreate target's initial RNG state. command R code run target. packages Character vector packages load right target runs output data reloaded downstream targets. Use tar_option_set() set packages globally subsequent targets define. library Character vector library paths try loading packages. format Character length 1. Must \"file\", \"url\", \"aws_file\". See format argument targets::tar_target() details. repository Character length 1, remote repository target storage. Choices: \"local\": file system local machine. \"aws\": Amazon Web Services (AWS) S3 bucket. Can configured non-AWS S3 bucket using endpoint argument tar_resources_aws(), versioning capabilities may lost . See cloud storage section https://books.ropensci.org/targets/data.html details instructions. \"gcp\": Google Cloud Platform storage bucket. See cloud storage section https://books.ropensci.org/targets/data.html details instructions. Note: repository \"local\" format \"file\" target create single output file. output file uploaded cloud tracked changes exists cloud. local file deleted target runs. iteration Character length 1, name iteration mode target. Choices: \"vector\": branching happens vctrs::vec_slice() aggregation happens vctrs::vec_c(). \"list\", branching happens [[]] aggregation happens list(). \"group\": dplyr::group_by()-like functionality branch subsets non-dynamic data frame. iteration = \"group\", target must dynamic (pattern argument tar_target() must left NULL). target's return value must data frame special tar_group column consecutive integers 1 number groups. integer designates group, branch created collection rows group. See tar_group() function see can create special tar_group column dplyr::group_by(). error Character length 1, target stops throws error. Options: \"stop\": whole pipeline stops throws error. \"continue\": whole pipeline keeps going. \"abridge\": currently running targets keep running, new targets launch . (Visit https://books.ropensci.org/targets/debugging.html learn debug targets using saved workspaces.) \"null\": errored target continues returns NULL. data hash deliberately wrong target date next run pipeline. memory Character length 1, memory strategy. \"persistent\", target stays memory end pipeline (unless storage \"worker\", case targets unloads value memory right storing order avoid sending copious data network). \"transient\", target gets unloaded every new target completes. Either way, target gets automatically loaded memory whenever another target needs value. cloud-based dynamic files (e.g. format = \"file\" repository = \"aws\"), memory strategy applies temporary local copy file: \"persistent\" means remains end pipeline deleted, \"transient\" means gets deleted soon possible. former conserves bandwidth, latter conserves local storage. garbage_collection Logical, whether run base::gc() just target runs. deployment Character length 1. deployment \"main\", target run central controlling R process. Otherwise, deployment \"worker\" set pipeline distributed/parallel computing, target runs parallel worker. distributed/parallel computing targets, please visit https://books.ropensci.org/targets/crew.html. priority Numeric length 1 0 1. Controls targets get deployed first multiple competing targets ready simultaneously. Targets priorities closer 1 get dispatched earlier (polled earlier tar_make_future()). resources Object returned tar_resources() optional settings high-performance computing functionality, alternative data storage formats, optional capabilities targets. See tar_resources() details. storage Character length 1, relevant tar_make_clustermq() tar_make_future(). Must one following values: \"main\": target's return value sent back host machine saved/uploaded locally. \"worker\": worker saves/uploads value. \"none\": almost never recommended. niche situations, e.g. data needs loaded explicitly another language. use , return value target totally ignored target ends, downstream target still attempts load data file (except retrieval = \"none\"). select storage = \"none\", return value target's command ignored, data saved automatically. dynamic files (format = \"file\") responsibility user write data store inside target. distinguishing feature storage = \"none\" (opposed format = \"file\") general case, downstream targets automatically try load data data store dependency. corollary, storage = \"none\" completely unnecessary format \"file\". retrieval Character length 1, relevant tar_make_clustermq() tar_make_future(). Must one following values: \"main\": target's dependencies loaded host machine sent worker target runs. \"worker\": worker loads targets dependencies. \"none\": dependencies loaded . choice almost never recommended. niche situations, e.g. data needs loaded explicitly another language. cue optional object tar_cue() customize rules decide whether target date. applies downstream target. upstream target always runs. description Character length 1, custom free-form human-readable text description target. Descriptions appear target labels functions like tar_manifest() tar_visnetwork(), let select subsets targets names argument functions like tar_make(). example, tar_manifest(names = tar_described_as(starts_with(\"survival model\"))) lists targets whose descriptions start character string \"survival model\".","code":""},{"path":"https://docs.ropensci.org/tarchetypes/reference/tar_files_raw.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Dynamic branching over output or input files (raw version). — tar_files_raw","text":"list two targets, one upstream one downstream. upstream one work returns file paths, downstream target pattern applies format = \"file\", format = \"file_fast\", format = \"url\". See \"Target objects\" section background.","code":""},{"path":"https://docs.ropensci.org/tarchetypes/reference/tar_files_raw.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Dynamic branching over output or input files (raw version). — tar_files_raw","text":"tar_files_raw() similar tar_files() except name argument must character string command must language object. tar_files_raw() creates pair targets, one upstream one downstream. upstream target work returns file paths, downstream target pattern applies format = \"file\", format = \"file_fast\", format = \"url\". (URLs input-, must already exist beforehand.) correct way dynamically iterate file/url targets. makes sure downstream patterns rerun branches files/urls change. information, visit https://github.com/ropensci/targets/issues/136 https://github.com/ropensci/drake/issues/1302.","code":""},{"path":"https://docs.ropensci.org/tarchetypes/reference/tar_files_raw.html","id":"target-objects","dir":"Reference","previous_headings":"","what":"Target objects","title":"Dynamic branching over output or input files (raw version). — tar_files_raw","text":"tarchetypes functions target factories, means return target objects lists target objects. Target objects represent skippable steps analysis pipeline described https://books.ropensci.org/targets/. Please read walkthrough https://books.ropensci.org/targets/walkthrough.html understand role target objects analysis pipelines. developers, https://wlandau.github.io/targetopia/contributing.html#target-factories explains target factories (functions like one generate targets) design specification https://books.ropensci.org/targets-design/ details structure composition target objects.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/tarchetypes/reference/tar_files_raw.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Dynamic branching over output or input files (raw version). — tar_files_raw","text":"","code":"if (identical(Sys.getenv(\"TAR_LONG_EXAMPLES\"), \"true\")) { targets::tar_dir({ # tar_dir() runs code from a temporary directory. targets::tar_script({   # Do not use temp files in real projects   # or else your targets will always rerun.   paths <- unlist(replicate(2, tempfile()))   file.create(paths)   command <- as.call(list(`c`, paths))   list(     tarchetypes::tar_files_raw(\"x\", command)   ) }) targets::tar_make() targets::tar_read(x) }) }"},{"path":"https://docs.ropensci.org/tarchetypes/reference/tar_force.html","id":null,"dir":"Reference","previous_headings":"","what":"Target with a custom condition to force execution. — tar_force","title":"Target with a custom condition to force execution. — tar_force","text":"Create target always runs user-defined condition rule met.","code":""},{"path":"https://docs.ropensci.org/tarchetypes/reference/tar_force.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Target with a custom condition to force execution. — tar_force","text":"","code":"tar_force(   name,   command,   force,   tidy_eval = targets::tar_option_get(\"tidy_eval\"),   packages = targets::tar_option_get(\"packages\"),   library = targets::tar_option_get(\"library\"),   format = targets::tar_option_get(\"format\"),   repository = targets::tar_option_get(\"repository\"),   iteration = targets::tar_option_get(\"iteration\"),   error = targets::tar_option_get(\"error\"),   memory = targets::tar_option_get(\"memory\"),   garbage_collection = targets::tar_option_get(\"garbage_collection\"),   deployment = targets::tar_option_get(\"deployment\"),   priority = targets::tar_option_get(\"priority\"),   resources = targets::tar_option_get(\"resources\"),   storage = targets::tar_option_get(\"storage\"),   retrieval = targets::tar_option_get(\"retrieval\"),   cue = targets::tar_option_get(\"cue\"),   description = targets::tar_option_get(\"description\") )"},{"path":"https://docs.ropensci.org/tarchetypes/reference/tar_force.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Target with a custom condition to force execution. — tar_force","text":"name Symbol, name target. target name must valid name symbol R, must start dot. Subsequent targets can refer name symbolically induce dependency relationship: e.g. tar_target(downstream_target, f(upstream_target)) target named downstream_target depends target upstream_target function f(). addition, target's name determines random number generator seed. way, target runs reproducible seed someone else running pipeline get results, two targets pipeline share seed. (Even dynamic branches different names thus different seeds.) can recover seed completed target tar_meta(your_target, seed) run tar_seed_set() result locally recreate target's initial RNG state. command R code run target. force R code condition forces build. evaluates TRUE, work run tar_make(). tidy_eval Whether invoke tidy evaluation (e.g. !! operator rlang) soon target defined (tar_make()). Applies arguments command force. packages Character vector packages load right target runs output data reloaded downstream targets. Use tar_option_set() set packages globally subsequent targets define. library Character vector library paths try loading packages. format Optional storage format target's return value. exception format = \"file\", target gets file _targets/objects, format different way save load file. See \"Storage formats\" section detailed list possible data storage formats. repository Character length 1, remote repository target storage. Choices: \"local\": file system local machine. \"aws\": Amazon Web Services (AWS) S3 bucket. Can configured non-AWS S3 bucket using endpoint argument tar_resources_aws(), versioning capabilities may lost . See cloud storage section https://books.ropensci.org/targets/data.html details instructions. \"gcp\": Google Cloud Platform storage bucket. See cloud storage section https://books.ropensci.org/targets/data.html details instructions. Note: repository \"local\" format \"file\" target create single output file. output file uploaded cloud tracked changes exists cloud. local file deleted target runs. iteration Character length 1, name iteration mode target. Choices: \"vector\": branching happens vctrs::vec_slice() aggregation happens vctrs::vec_c(). \"list\", branching happens [[]] aggregation happens list(). \"group\": dplyr::group_by()-like functionality branch subsets non-dynamic data frame. iteration = \"group\", target must dynamic (pattern argument tar_target() must left NULL). target's return value must data frame special tar_group column consecutive integers 1 number groups. integer designates group, branch created collection rows group. See tar_group() function see can create special tar_group column dplyr::group_by(). error Character length 1, target stops throws error. Options: \"stop\": whole pipeline stops throws error. \"continue\": whole pipeline keeps going. \"abridge\": currently running targets keep running, new targets launch . (Visit https://books.ropensci.org/targets/debugging.html learn debug targets using saved workspaces.) \"null\": errored target continues returns NULL. data hash deliberately wrong target date next run pipeline. memory Character length 1, memory strategy. \"persistent\", target stays memory end pipeline (unless storage \"worker\", case targets unloads value memory right storing order avoid sending copious data network). \"transient\", target gets unloaded every new target completes. Either way, target gets automatically loaded memory whenever another target needs value. cloud-based dynamic files (e.g. format = \"file\" repository = \"aws\"), memory strategy applies temporary local copy file: \"persistent\" means remains end pipeline deleted, \"transient\" means gets deleted soon possible. former conserves bandwidth, latter conserves local storage. garbage_collection Logical, whether run base::gc() just target runs. deployment Character length 1. deployment \"main\", target run central controlling R process. Otherwise, deployment \"worker\" set pipeline distributed/parallel computing, target runs parallel worker. distributed/parallel computing targets, please visit https://books.ropensci.org/targets/crew.html. priority Numeric length 1 0 1. Controls targets get deployed first multiple competing targets ready simultaneously. Targets priorities closer 1 get dispatched earlier (polled earlier tar_make_future()). resources Object returned tar_resources() optional settings high-performance computing functionality, alternative data storage formats, optional capabilities targets. See tar_resources() details. storage Character length 1, relevant tar_make_clustermq() tar_make_future(). Must one following values: \"main\": target's return value sent back host machine saved/uploaded locally. \"worker\": worker saves/uploads value. \"none\": almost never recommended. niche situations, e.g. data needs loaded explicitly another language. use , return value target totally ignored target ends, downstream target still attempts load data file (except retrieval = \"none\"). select storage = \"none\", return value target's command ignored, data saved automatically. dynamic files (format = \"file\") responsibility user write data store inside target. distinguishing feature storage = \"none\" (opposed format = \"file\") general case, downstream targets automatically try load data data store dependency. corollary, storage = \"none\" completely unnecessary format \"file\". retrieval Character length 1, relevant tar_make_clustermq() tar_make_future(). Must one following values: \"main\": target's dependencies loaded host machine sent worker target runs. \"worker\": worker loads targets dependencies. \"none\": dependencies loaded . choice almost never recommended. niche situations, e.g. data needs loaded explicitly another language. cue optional object tar_cue() customize rules decide whether target date. applies downstream target. upstream target always runs. description Character length 1, custom free-form human-readable text description target. Descriptions appear target labels functions like tar_manifest() tar_visnetwork(), let select subsets targets names argument functions like tar_make(). example, tar_manifest(names = tar_described_as(starts_with(\"survival model\"))) lists targets whose descriptions start character string \"survival model\".","code":""},{"path":"https://docs.ropensci.org/tarchetypes/reference/tar_force.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Target with a custom condition to force execution. — tar_force","text":"list 2 targets objects: one indicate whether custom condition met, another respond actual work. See \"Target objects\" section background.","code":""},{"path":"https://docs.ropensci.org/tarchetypes/reference/tar_force.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Target with a custom condition to force execution. — tar_force","text":"tar_force() creates target always runs custom condition met. implementation builds top tar_change(). Thus, pair targets created: upstream auxiliary target indicate custom condition downstream target responds work. tar_force() actually use tar_cue_force(), mechanism totally different. upstream target always runs, tar_outdated() tar_visnetwork() always show targets outdated. However, tar_make() still skip downstream one upstream custom condition met.","code":""},{"path":"https://docs.ropensci.org/tarchetypes/reference/tar_force.html","id":"target-objects","dir":"Reference","previous_headings":"","what":"Target objects","title":"Target with a custom condition to force execution. — tar_force","text":"tarchetypes functions target factories, means return target objects lists target objects. Target objects represent skippable steps analysis pipeline described https://books.ropensci.org/targets/. Please read walkthrough https://books.ropensci.org/targets/walkthrough.html understand role target objects analysis pipelines. developers, https://wlandau.github.io/targetopia/contributing.html#target-factories explains target factories (functions like one generate targets) design specification https://books.ropensci.org/targets-design/ details structure composition target objects.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/tarchetypes/reference/tar_force.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Target with a custom condition to force execution. — tar_force","text":"","code":"if (identical(Sys.getenv(\"TAR_LONG_EXAMPLES\"), \"true\")) { targets::tar_dir({ # tar_dir() runs code from a temporary directory. targets::tar_script({   list(     tarchetypes::tar_force(x, tempfile(), force = 1 > 0)   ) }) targets::tar_make() targets::tar_make() }) }"},{"path":"https://docs.ropensci.org/tarchetypes/reference/tar_force_change.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert a condition into a change. — tar_force_change","title":"Convert a condition into a change. — tar_force_change","text":"Supports tar_force(). really internal function meant called users directly.","code":""},{"path":"https://docs.ropensci.org/tarchetypes/reference/tar_force_change.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert a condition into a change. — tar_force_change","text":"","code":"tar_force_change(condition)"},{"path":"https://docs.ropensci.org/tarchetypes/reference/tar_force_change.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert a condition into a change. — tar_force_change","text":"condition Logical, whether run downstream target tar_force().","code":""},{"path":"https://docs.ropensci.org/tarchetypes/reference/tar_force_change.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert a condition into a change. — tar_force_change","text":"hash changes downstream target supposed run.","code":""},{"path":"https://docs.ropensci.org/tarchetypes/reference/tar_formats.html","id":null,"dir":"Reference","previous_headings":"","what":"Target formats — tar_formats","title":"Target formats — tar_formats","text":"Target archetypes specialized storage formats.","code":""},{"path":"https://docs.ropensci.org/tarchetypes/reference/tar_formats.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Target formats — tar_formats","text":"","code":"tar_url(   name,   command,   pattern = NULL,   tidy_eval = targets::tar_option_get(\"tidy_eval\"),   packages = targets::tar_option_get(\"packages\"),   library = targets::tar_option_get(\"library\"),   repository = targets::tar_option_get(\"repository\"),   iteration = targets::tar_option_get(\"iteration\"),   error = targets::tar_option_get(\"error\"),   memory = targets::tar_option_get(\"memory\"),   garbage_collection = targets::tar_option_get(\"garbage_collection\"),   deployment = targets::tar_option_get(\"deployment\"),   priority = targets::tar_option_get(\"priority\"),   resources = targets::tar_option_get(\"resources\"),   storage = targets::tar_option_get(\"storage\"),   retrieval = targets::tar_option_get(\"retrieval\"),   cue = targets::tar_option_get(\"cue\"),   description = targets::tar_option_get(\"description\") )  tar_file(   name,   command,   pattern = NULL,   tidy_eval = targets::tar_option_get(\"tidy_eval\"),   packages = targets::tar_option_get(\"packages\"),   library = targets::tar_option_get(\"library\"),   repository = targets::tar_option_get(\"repository\"),   iteration = targets::tar_option_get(\"iteration\"),   error = targets::tar_option_get(\"error\"),   memory = targets::tar_option_get(\"memory\"),   garbage_collection = targets::tar_option_get(\"garbage_collection\"),   deployment = targets::tar_option_get(\"deployment\"),   priority = targets::tar_option_get(\"priority\"),   resources = targets::tar_option_get(\"resources\"),   storage = targets::tar_option_get(\"storage\"),   retrieval = targets::tar_option_get(\"retrieval\"),   cue = targets::tar_option_get(\"cue\"),   description = targets::tar_option_get(\"description\") )  tar_file_fast(   name,   command,   pattern = NULL,   tidy_eval = targets::tar_option_get(\"tidy_eval\"),   packages = targets::tar_option_get(\"packages\"),   library = targets::tar_option_get(\"library\"),   repository = targets::tar_option_get(\"repository\"),   iteration = targets::tar_option_get(\"iteration\"),   error = targets::tar_option_get(\"error\"),   memory = targets::tar_option_get(\"memory\"),   garbage_collection = targets::tar_option_get(\"garbage_collection\"),   deployment = targets::tar_option_get(\"deployment\"),   priority = targets::tar_option_get(\"priority\"),   resources = targets::tar_option_get(\"resources\"),   storage = targets::tar_option_get(\"storage\"),   retrieval = targets::tar_option_get(\"retrieval\"),   cue = targets::tar_option_get(\"cue\"),   description = targets::tar_option_get(\"description\") )  tar_rds(   name,   command,   pattern = NULL,   tidy_eval = targets::tar_option_get(\"tidy_eval\"),   packages = targets::tar_option_get(\"packages\"),   library = targets::tar_option_get(\"library\"),   repository = targets::tar_option_get(\"repository\"),   iteration = targets::tar_option_get(\"iteration\"),   error = targets::tar_option_get(\"error\"),   memory = targets::tar_option_get(\"memory\"),   garbage_collection = targets::tar_option_get(\"garbage_collection\"),   deployment = targets::tar_option_get(\"deployment\"),   priority = targets::tar_option_get(\"priority\"),   resources = targets::tar_option_get(\"resources\"),   storage = targets::tar_option_get(\"storage\"),   retrieval = targets::tar_option_get(\"retrieval\"),   cue = targets::tar_option_get(\"cue\"),   description = targets::tar_option_get(\"description\") )  tar_qs(   name,   command,   pattern = NULL,   tidy_eval = targets::tar_option_get(\"tidy_eval\"),   packages = targets::tar_option_get(\"packages\"),   library = targets::tar_option_get(\"library\"),   repository = targets::tar_option_get(\"repository\"),   iteration = targets::tar_option_get(\"iteration\"),   error = targets::tar_option_get(\"error\"),   memory = targets::tar_option_get(\"memory\"),   garbage_collection = targets::tar_option_get(\"garbage_collection\"),   deployment = targets::tar_option_get(\"deployment\"),   priority = targets::tar_option_get(\"priority\"),   resources = targets::tar_option_get(\"resources\"),   storage = targets::tar_option_get(\"storage\"),   retrieval = targets::tar_option_get(\"retrieval\"),   cue = targets::tar_option_get(\"cue\"),   description = targets::tar_option_get(\"description\") )  tar_keras(   name,   command,   pattern = NULL,   tidy_eval = targets::tar_option_get(\"tidy_eval\"),   packages = targets::tar_option_get(\"packages\"),   library = targets::tar_option_get(\"library\"),   repository = targets::tar_option_get(\"repository\"),   iteration = targets::tar_option_get(\"iteration\"),   error = targets::tar_option_get(\"error\"),   memory = targets::tar_option_get(\"memory\"),   garbage_collection = targets::tar_option_get(\"garbage_collection\"),   deployment = targets::tar_option_get(\"deployment\"),   priority = targets::tar_option_get(\"priority\"),   resources = targets::tar_option_get(\"resources\"),   storage = targets::tar_option_get(\"storage\"),   retrieval = targets::tar_option_get(\"retrieval\"),   cue = targets::tar_option_get(\"cue\"),   description = targets::tar_option_get(\"description\") )  tar_torch(   name,   command,   pattern = NULL,   tidy_eval = targets::tar_option_get(\"tidy_eval\"),   packages = targets::tar_option_get(\"packages\"),   library = targets::tar_option_get(\"library\"),   repository = targets::tar_option_get(\"repository\"),   iteration = targets::tar_option_get(\"iteration\"),   error = targets::tar_option_get(\"error\"),   memory = targets::tar_option_get(\"memory\"),   garbage_collection = targets::tar_option_get(\"garbage_collection\"),   deployment = targets::tar_option_get(\"deployment\"),   priority = targets::tar_option_get(\"priority\"),   resources = targets::tar_option_get(\"resources\"),   storage = targets::tar_option_get(\"storage\"),   retrieval = targets::tar_option_get(\"retrieval\"),   cue = targets::tar_option_get(\"cue\"),   description = targets::tar_option_get(\"description\") )  tar_format_feather(   name,   command,   pattern = NULL,   tidy_eval = targets::tar_option_get(\"tidy_eval\"),   packages = targets::tar_option_get(\"packages\"),   library = targets::tar_option_get(\"library\"),   repository = targets::tar_option_get(\"repository\"),   iteration = targets::tar_option_get(\"iteration\"),   error = targets::tar_option_get(\"error\"),   memory = targets::tar_option_get(\"memory\"),   garbage_collection = targets::tar_option_get(\"garbage_collection\"),   deployment = targets::tar_option_get(\"deployment\"),   priority = targets::tar_option_get(\"priority\"),   resources = targets::tar_option_get(\"resources\"),   storage = targets::tar_option_get(\"storage\"),   retrieval = targets::tar_option_get(\"retrieval\"),   cue = targets::tar_option_get(\"cue\"),   description = targets::tar_option_get(\"description\") )  tar_parquet(   name,   command,   pattern = NULL,   tidy_eval = targets::tar_option_get(\"tidy_eval\"),   packages = targets::tar_option_get(\"packages\"),   library = targets::tar_option_get(\"library\"),   repository = targets::tar_option_get(\"repository\"),   iteration = targets::tar_option_get(\"iteration\"),   error = targets::tar_option_get(\"error\"),   memory = targets::tar_option_get(\"memory\"),   garbage_collection = targets::tar_option_get(\"garbage_collection\"),   deployment = targets::tar_option_get(\"deployment\"),   priority = targets::tar_option_get(\"priority\"),   resources = targets::tar_option_get(\"resources\"),   storage = targets::tar_option_get(\"storage\"),   retrieval = targets::tar_option_get(\"retrieval\"),   cue = targets::tar_option_get(\"cue\"),   description = targets::tar_option_get(\"description\") )  tar_fst(   name,   command,   pattern = NULL,   tidy_eval = targets::tar_option_get(\"tidy_eval\"),   packages = targets::tar_option_get(\"packages\"),   library = targets::tar_option_get(\"library\"),   repository = targets::tar_option_get(\"repository\"),   iteration = targets::tar_option_get(\"iteration\"),   error = targets::tar_option_get(\"error\"),   memory = targets::tar_option_get(\"memory\"),   garbage_collection = targets::tar_option_get(\"garbage_collection\"),   deployment = targets::tar_option_get(\"deployment\"),   priority = targets::tar_option_get(\"priority\"),   resources = targets::tar_option_get(\"resources\"),   storage = targets::tar_option_get(\"storage\"),   retrieval = targets::tar_option_get(\"retrieval\"),   cue = targets::tar_option_get(\"cue\"),   description = targets::tar_option_get(\"description\") )  tar_fst_dt(   name,   command,   pattern = NULL,   tidy_eval = targets::tar_option_get(\"tidy_eval\"),   packages = targets::tar_option_get(\"packages\"),   library = targets::tar_option_get(\"library\"),   repository = targets::tar_option_get(\"repository\"),   iteration = targets::tar_option_get(\"iteration\"),   error = targets::tar_option_get(\"error\"),   memory = targets::tar_option_get(\"memory\"),   garbage_collection = targets::tar_option_get(\"garbage_collection\"),   deployment = targets::tar_option_get(\"deployment\"),   priority = targets::tar_option_get(\"priority\"),   resources = targets::tar_option_get(\"resources\"),   storage = targets::tar_option_get(\"storage\"),   retrieval = targets::tar_option_get(\"retrieval\"),   cue = targets::tar_option_get(\"cue\"),   description = targets::tar_option_get(\"description\") )  tar_fst_tbl(   name,   command,   pattern = NULL,   tidy_eval = targets::tar_option_get(\"tidy_eval\"),   packages = targets::tar_option_get(\"packages\"),   library = targets::tar_option_get(\"library\"),   repository = targets::tar_option_get(\"repository\"),   iteration = targets::tar_option_get(\"iteration\"),   error = targets::tar_option_get(\"error\"),   memory = targets::tar_option_get(\"memory\"),   garbage_collection = targets::tar_option_get(\"garbage_collection\"),   deployment = targets::tar_option_get(\"deployment\"),   priority = targets::tar_option_get(\"priority\"),   resources = targets::tar_option_get(\"resources\"),   storage = targets::tar_option_get(\"storage\"),   retrieval = targets::tar_option_get(\"retrieval\"),   cue = targets::tar_option_get(\"cue\"),   description = targets::tar_option_get(\"description\") )  tar_aws_file(   name,   command,   pattern = NULL,   tidy_eval = targets::tar_option_get(\"tidy_eval\"),   packages = targets::tar_option_get(\"packages\"),   library = targets::tar_option_get(\"library\"),   repository = targets::tar_option_get(\"repository\"),   iteration = targets::tar_option_get(\"iteration\"),   error = targets::tar_option_get(\"error\"),   memory = targets::tar_option_get(\"memory\"),   garbage_collection = targets::tar_option_get(\"garbage_collection\"),   deployment = targets::tar_option_get(\"deployment\"),   priority = targets::tar_option_get(\"priority\"),   resources = targets::tar_option_get(\"resources\"),   storage = targets::tar_option_get(\"storage\"),   retrieval = targets::tar_option_get(\"retrieval\"),   cue = targets::tar_option_get(\"cue\"),   description = targets::tar_option_get(\"description\") )  tar_aws_rds(   name,   command,   pattern = NULL,   tidy_eval = targets::tar_option_get(\"tidy_eval\"),   packages = targets::tar_option_get(\"packages\"),   library = targets::tar_option_get(\"library\"),   repository = targets::tar_option_get(\"repository\"),   iteration = targets::tar_option_get(\"iteration\"),   error = targets::tar_option_get(\"error\"),   memory = targets::tar_option_get(\"memory\"),   garbage_collection = targets::tar_option_get(\"garbage_collection\"),   deployment = targets::tar_option_get(\"deployment\"),   priority = targets::tar_option_get(\"priority\"),   resources = targets::tar_option_get(\"resources\"),   storage = targets::tar_option_get(\"storage\"),   retrieval = targets::tar_option_get(\"retrieval\"),   cue = targets::tar_option_get(\"cue\"),   description = targets::tar_option_get(\"description\") )  tar_aws_qs(   name,   command,   pattern = NULL,   tidy_eval = targets::tar_option_get(\"tidy_eval\"),   packages = targets::tar_option_get(\"packages\"),   library = targets::tar_option_get(\"library\"),   repository = targets::tar_option_get(\"repository\"),   iteration = targets::tar_option_get(\"iteration\"),   error = targets::tar_option_get(\"error\"),   memory = targets::tar_option_get(\"memory\"),   garbage_collection = targets::tar_option_get(\"garbage_collection\"),   deployment = targets::tar_option_get(\"deployment\"),   priority = targets::tar_option_get(\"priority\"),   resources = targets::tar_option_get(\"resources\"),   storage = targets::tar_option_get(\"storage\"),   retrieval = targets::tar_option_get(\"retrieval\"),   cue = targets::tar_option_get(\"cue\"),   description = targets::tar_option_get(\"description\") )  tar_aws_keras(   name,   command,   pattern = NULL,   tidy_eval = targets::tar_option_get(\"tidy_eval\"),   packages = targets::tar_option_get(\"packages\"),   library = targets::tar_option_get(\"library\"),   repository = targets::tar_option_get(\"repository\"),   iteration = targets::tar_option_get(\"iteration\"),   error = targets::tar_option_get(\"error\"),   memory = targets::tar_option_get(\"memory\"),   garbage_collection = targets::tar_option_get(\"garbage_collection\"),   deployment = targets::tar_option_get(\"deployment\"),   priority = targets::tar_option_get(\"priority\"),   resources = targets::tar_option_get(\"resources\"),   storage = targets::tar_option_get(\"storage\"),   retrieval = targets::tar_option_get(\"retrieval\"),   cue = targets::tar_option_get(\"cue\"),   description = targets::tar_option_get(\"description\") )  tar_aws_torch(   name,   command,   pattern = NULL,   tidy_eval = targets::tar_option_get(\"tidy_eval\"),   packages = targets::tar_option_get(\"packages\"),   library = targets::tar_option_get(\"library\"),   repository = targets::tar_option_get(\"repository\"),   iteration = targets::tar_option_get(\"iteration\"),   error = targets::tar_option_get(\"error\"),   memory = targets::tar_option_get(\"memory\"),   garbage_collection = targets::tar_option_get(\"garbage_collection\"),   deployment = targets::tar_option_get(\"deployment\"),   priority = targets::tar_option_get(\"priority\"),   resources = targets::tar_option_get(\"resources\"),   storage = targets::tar_option_get(\"storage\"),   retrieval = targets::tar_option_get(\"retrieval\"),   cue = targets::tar_option_get(\"cue\"),   description = targets::tar_option_get(\"description\") )  tar_format_aws_feather(   name,   command,   pattern = NULL,   tidy_eval = targets::tar_option_get(\"tidy_eval\"),   packages = targets::tar_option_get(\"packages\"),   library = targets::tar_option_get(\"library\"),   repository = targets::tar_option_get(\"repository\"),   iteration = targets::tar_option_get(\"iteration\"),   error = targets::tar_option_get(\"error\"),   memory = targets::tar_option_get(\"memory\"),   garbage_collection = targets::tar_option_get(\"garbage_collection\"),   deployment = targets::tar_option_get(\"deployment\"),   priority = targets::tar_option_get(\"priority\"),   resources = targets::tar_option_get(\"resources\"),   storage = targets::tar_option_get(\"storage\"),   retrieval = targets::tar_option_get(\"retrieval\"),   cue = targets::tar_option_get(\"cue\"),   description = targets::tar_option_get(\"description\") )  tar_aws_parquet(   name,   command,   pattern = NULL,   tidy_eval = targets::tar_option_get(\"tidy_eval\"),   packages = targets::tar_option_get(\"packages\"),   library = targets::tar_option_get(\"library\"),   repository = targets::tar_option_get(\"repository\"),   iteration = targets::tar_option_get(\"iteration\"),   error = targets::tar_option_get(\"error\"),   memory = targets::tar_option_get(\"memory\"),   garbage_collection = targets::tar_option_get(\"garbage_collection\"),   deployment = targets::tar_option_get(\"deployment\"),   priority = targets::tar_option_get(\"priority\"),   resources = targets::tar_option_get(\"resources\"),   storage = targets::tar_option_get(\"storage\"),   retrieval = targets::tar_option_get(\"retrieval\"),   cue = targets::tar_option_get(\"cue\"),   description = targets::tar_option_get(\"description\") )  tar_aws_fst(   name,   command,   pattern = NULL,   tidy_eval = targets::tar_option_get(\"tidy_eval\"),   packages = targets::tar_option_get(\"packages\"),   library = targets::tar_option_get(\"library\"),   repository = targets::tar_option_get(\"repository\"),   iteration = targets::tar_option_get(\"iteration\"),   error = targets::tar_option_get(\"error\"),   memory = targets::tar_option_get(\"memory\"),   garbage_collection = targets::tar_option_get(\"garbage_collection\"),   deployment = targets::tar_option_get(\"deployment\"),   priority = targets::tar_option_get(\"priority\"),   resources = targets::tar_option_get(\"resources\"),   storage = targets::tar_option_get(\"storage\"),   retrieval = targets::tar_option_get(\"retrieval\"),   cue = targets::tar_option_get(\"cue\"),   description = targets::tar_option_get(\"description\") )  tar_aws_fst_dt(   name,   command,   pattern = NULL,   tidy_eval = targets::tar_option_get(\"tidy_eval\"),   packages = targets::tar_option_get(\"packages\"),   library = targets::tar_option_get(\"library\"),   repository = targets::tar_option_get(\"repository\"),   iteration = targets::tar_option_get(\"iteration\"),   error = targets::tar_option_get(\"error\"),   memory = targets::tar_option_get(\"memory\"),   garbage_collection = targets::tar_option_get(\"garbage_collection\"),   deployment = targets::tar_option_get(\"deployment\"),   priority = targets::tar_option_get(\"priority\"),   resources = targets::tar_option_get(\"resources\"),   storage = targets::tar_option_get(\"storage\"),   retrieval = targets::tar_option_get(\"retrieval\"),   cue = targets::tar_option_get(\"cue\"),   description = targets::tar_option_get(\"description\") )  tar_aws_fst_tbl(   name,   command,   pattern = NULL,   tidy_eval = targets::tar_option_get(\"tidy_eval\"),   packages = targets::tar_option_get(\"packages\"),   library = targets::tar_option_get(\"library\"),   repository = targets::tar_option_get(\"repository\"),   iteration = targets::tar_option_get(\"iteration\"),   error = targets::tar_option_get(\"error\"),   memory = targets::tar_option_get(\"memory\"),   garbage_collection = targets::tar_option_get(\"garbage_collection\"),   deployment = targets::tar_option_get(\"deployment\"),   priority = targets::tar_option_get(\"priority\"),   resources = targets::tar_option_get(\"resources\"),   storage = targets::tar_option_get(\"storage\"),   retrieval = targets::tar_option_get(\"retrieval\"),   cue = targets::tar_option_get(\"cue\"),   description = targets::tar_option_get(\"description\") )"},{"path":"https://docs.ropensci.org/tarchetypes/reference/tar_formats.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Target formats — tar_formats","text":"name Symbol, name target. target name must valid name symbol R, must start dot. Subsequent targets can refer name symbolically induce dependency relationship: e.g. tar_target(downstream_target, f(upstream_target)) target named downstream_target depends target upstream_target function f(). addition, target's name determines random number generator seed. way, target runs reproducible seed someone else running pipeline get results, two targets pipeline share seed. (Even dynamic branches different names thus different seeds.) can recover seed completed target tar_meta(your_target, seed) run tar_seed_set() result locally recreate target's initial RNG state. command R code run target. pattern Language define branching target. example, pipeline numeric vector targets x y, tar_target(z, x + y, pattern = map(x, y)) implicitly defines branches z compute x[1] + y[1], x[2] + y[2], . See user manual details. tidy_eval Logical, whether enable tidy evaluation interpreting command pattern. TRUE, can use \"bang-bang\" operator !! programmatically insert values global objects. packages Character vector packages load right target runs output data reloaded downstream targets. Use tar_option_set() set packages globally subsequent targets define. library Character vector library paths try loading packages. repository Character length 1, remote repository target storage. Choices: \"local\": file system local machine. \"aws\": Amazon Web Services (AWS) S3 bucket. Can configured non-AWS S3 bucket using endpoint argument tar_resources_aws(), versioning capabilities may lost . See cloud storage section https://books.ropensci.org/targets/data.html details instructions. \"gcp\": Google Cloud Platform storage bucket. See cloud storage section https://books.ropensci.org/targets/data.html details instructions. Note: repository \"local\" format \"file\" target create single output file. output file uploaded cloud tracked changes exists cloud. local file deleted target runs. iteration Character length 1, name iteration mode target. Choices: \"vector\": branching happens vctrs::vec_slice() aggregation happens vctrs::vec_c(). \"list\", branching happens [[]] aggregation happens list(). \"group\": dplyr::group_by()-like functionality branch subsets non-dynamic data frame. iteration = \"group\", target must dynamic (pattern argument tar_target() must left NULL). target's return value must data frame special tar_group column consecutive integers 1 number groups. integer designates group, branch created collection rows group. See tar_group() function see can create special tar_group column dplyr::group_by(). error Character length 1, target stops throws error. Options: \"stop\": whole pipeline stops throws error. \"continue\": whole pipeline keeps going. \"abridge\": currently running targets keep running, new targets launch . (Visit https://books.ropensci.org/targets/debugging.html learn debug targets using saved workspaces.) \"null\": errored target continues returns NULL. data hash deliberately wrong target date next run pipeline. memory Character length 1, memory strategy. \"persistent\", target stays memory end pipeline (unless storage \"worker\", case targets unloads value memory right storing order avoid sending copious data network). \"transient\", target gets unloaded every new target completes. Either way, target gets automatically loaded memory whenever another target needs value. cloud-based dynamic files (e.g. format = \"file\" repository = \"aws\"), memory strategy applies temporary local copy file: \"persistent\" means remains end pipeline deleted, \"transient\" means gets deleted soon possible. former conserves bandwidth, latter conserves local storage. garbage_collection Logical, whether run base::gc() just target runs. deployment Character length 1. deployment \"main\", target run central controlling R process. Otherwise, deployment \"worker\" set pipeline distributed/parallel computing, target runs parallel worker. distributed/parallel computing targets, please visit https://books.ropensci.org/targets/crew.html. priority Numeric length 1 0 1. Controls targets get deployed first multiple competing targets ready simultaneously. Targets priorities closer 1 get dispatched earlier (polled earlier tar_make_future()). resources Object returned tar_resources() optional settings high-performance computing functionality, alternative data storage formats, optional capabilities targets. See tar_resources() details. storage Character length 1, relevant tar_make_clustermq() tar_make_future(). Must one following values: \"main\": target's return value sent back host machine saved/uploaded locally. \"worker\": worker saves/uploads value. \"none\": almost never recommended. niche situations, e.g. data needs loaded explicitly another language. use , return value target totally ignored target ends, downstream target still attempts load data file (except retrieval = \"none\"). select storage = \"none\", return value target's command ignored, data saved automatically. dynamic files (format = \"file\") responsibility user write data store inside target. distinguishing feature storage = \"none\" (opposed format = \"file\") general case, downstream targets automatically try load data data store dependency. corollary, storage = \"none\" completely unnecessary format \"file\". retrieval Character length 1, relevant tar_make_clustermq() tar_make_future(). Must one following values: \"main\": target's dependencies loaded host machine sent worker target runs. \"worker\": worker loads targets dependencies. \"none\": dependencies loaded . choice almost never recommended. niche situations, e.g. data needs loaded explicitly another language. cue optional object tar_cue() customize rules decide whether target date. description Character length 1, custom free-form human-readable text description target. Descriptions appear target labels functions like tar_manifest() tar_visnetwork(), let select subsets targets names argument functions like tar_make(). example, tar_manifest(names = tar_described_as(starts_with(\"survival model\"))) lists targets whose descriptions start character string \"survival model\".","code":""},{"path":"https://docs.ropensci.org/tarchetypes/reference/tar_formats.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Target formats — tar_formats","text":"tar_target() object eponymous storage format. See \"Target objects\" section background.","code":""},{"path":"https://docs.ropensci.org/tarchetypes/reference/tar_formats.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Target formats — tar_formats","text":"functions shorthand targets specialized storage formats. example, tar_qs(name, fun()) equivalent tar_target(name, fun(), format = \"qs\"). details specialized storage formats, open help file targets::tar_target() function read format argument.","code":""},{"path":"https://docs.ropensci.org/tarchetypes/reference/tar_formats.html","id":"target-objects","dir":"Reference","previous_headings":"","what":"Target objects","title":"Target formats — tar_formats","text":"tarchetypes functions target factories, means return target objects lists target objects. Target objects represent skippable steps analysis pipeline described https://books.ropensci.org/targets/. Please read walkthrough https://books.ropensci.org/targets/walkthrough.html understand role target objects analysis pipelines. developers, https://wlandau.github.io/targetopia/contributing.html#target-factories explains target factories (functions like one generate targets) design specification https://books.ropensci.org/targets-design/ details structure composition target objects.","code":""},{"path":"https://docs.ropensci.org/tarchetypes/reference/tar_formats.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Target formats — tar_formats","text":"","code":"if (identical(Sys.getenv(\"TAR_LONG_EXAMPLES\"), \"true\")) { targets::tar_dir({ # tar_dir() runs code from a temporary directory. targets::tar_script(   list(     tarchetypes::tar_rds(x, 1)   ) ) targets::tar_make() }) }"},{"path":"https://docs.ropensci.org/tarchetypes/reference/tar_group_by.html","id":null,"dir":"Reference","previous_headings":"","what":"Group a data frame target by one or more variables. — tar_group_by","title":"Group a data frame target by one or more variables. — tar_group_by","text":"Create target outputs grouped data frame dplyr::group_by() targets::tar_group(). Downstream dynamic branching targets iterate groups rows.","code":""},{"path":"https://docs.ropensci.org/tarchetypes/reference/tar_group_by.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Group a data frame target by one or more variables. — tar_group_by","text":"","code":"tar_group_by(   name,   command,   ...,   tidy_eval = targets::tar_option_get(\"tidy_eval\"),   packages = targets::tar_option_get(\"packages\"),   library = targets::tar_option_get(\"library\"),   format = targets::tar_option_get(\"format\"),   repository = targets::tar_option_get(\"repository\"),   error = targets::tar_option_get(\"error\"),   memory = targets::tar_option_get(\"memory\"),   garbage_collection = targets::tar_option_get(\"garbage_collection\"),   deployment = targets::tar_option_get(\"deployment\"),   priority = targets::tar_option_get(\"priority\"),   resources = targets::tar_option_get(\"resources\"),   storage = targets::tar_option_get(\"storage\"),   retrieval = targets::tar_option_get(\"retrieval\"),   cue = targets::tar_option_get(\"cue\"),   description = targets::tar_option_get(\"description\") )"},{"path":"https://docs.ropensci.org/tarchetypes/reference/tar_group_by.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Group a data frame target by one or more variables. — tar_group_by","text":"name Symbol, name target. target name must valid name symbol R, must start dot. Subsequent targets can refer name symbolically induce dependency relationship: e.g. tar_target(downstream_target, f(upstream_target)) target named downstream_target depends target upstream_target function f(). addition, target's name determines random number generator seed. way, target runs reproducible seed someone else running pipeline get results, two targets pipeline share seed. (Even dynamic branches different names thus different seeds.) can recover seed completed target tar_meta(your_target, seed) run tar_seed_set() result locally recreate target's initial RNG state. command R code run target. ... Symbols, variables output data frame group . tidy_eval Logical, whether enable tidy evaluation interpreting command pattern. TRUE, can use \"bang-bang\" operator !! programmatically insert values global objects. packages Character vector packages load right target runs output data reloaded downstream targets. Use tar_option_set() set packages globally subsequent targets define. library Character vector library paths try loading packages. format Optional storage format target's return value. exception format = \"file\", target gets file _targets/objects, format different way save load file. See \"Storage formats\" section detailed list possible data storage formats. repository Character length 1, remote repository target storage. Choices: \"local\": file system local machine. \"aws\": Amazon Web Services (AWS) S3 bucket. Can configured non-AWS S3 bucket using endpoint argument tar_resources_aws(), versioning capabilities may lost . See cloud storage section https://books.ropensci.org/targets/data.html details instructions. \"gcp\": Google Cloud Platform storage bucket. See cloud storage section https://books.ropensci.org/targets/data.html details instructions. Note: repository \"local\" format \"file\" target create single output file. output file uploaded cloud tracked changes exists cloud. local file deleted target runs. error Character length 1, target stops throws error. Options: \"stop\": whole pipeline stops throws error. \"continue\": whole pipeline keeps going. \"abridge\": currently running targets keep running, new targets launch . (Visit https://books.ropensci.org/targets/debugging.html learn debug targets using saved workspaces.) \"null\": errored target continues returns NULL. data hash deliberately wrong target date next run pipeline. memory Character length 1, memory strategy. \"persistent\", target stays memory end pipeline (unless storage \"worker\", case targets unloads value memory right storing order avoid sending copious data network). \"transient\", target gets unloaded every new target completes. Either way, target gets automatically loaded memory whenever another target needs value. cloud-based dynamic files (e.g. format = \"file\" repository = \"aws\"), memory strategy applies temporary local copy file: \"persistent\" means remains end pipeline deleted, \"transient\" means gets deleted soon possible. former conserves bandwidth, latter conserves local storage. garbage_collection Logical, whether run base::gc() just target runs. deployment Character length 1. deployment \"main\", target run central controlling R process. Otherwise, deployment \"worker\" set pipeline distributed/parallel computing, target runs parallel worker. distributed/parallel computing targets, please visit https://books.ropensci.org/targets/crew.html. priority Numeric length 1 0 1. Controls targets get deployed first multiple competing targets ready simultaneously. Targets priorities closer 1 get dispatched earlier (polled earlier tar_make_future()). resources Object returned tar_resources() optional settings high-performance computing functionality, alternative data storage formats, optional capabilities targets. See tar_resources() details. storage Character length 1, relevant tar_make_clustermq() tar_make_future(). Must one following values: \"main\": target's return value sent back host machine saved/uploaded locally. \"worker\": worker saves/uploads value. \"none\": almost never recommended. niche situations, e.g. data needs loaded explicitly another language. use , return value target totally ignored target ends, downstream target still attempts load data file (except retrieval = \"none\"). select storage = \"none\", return value target's command ignored, data saved automatically. dynamic files (format = \"file\") responsibility user write data store inside target. distinguishing feature storage = \"none\" (opposed format = \"file\") general case, downstream targets automatically try load data data store dependency. corollary, storage = \"none\" completely unnecessary format \"file\". retrieval Character length 1, relevant tar_make_clustermq() tar_make_future(). Must one following values: \"main\": target's dependencies loaded host machine sent worker target runs. \"worker\": worker loads targets dependencies. \"none\": dependencies loaded . choice almost never recommended. niche situations, e.g. data needs loaded explicitly another language. cue optional object tar_cue() customize rules decide whether target date. description Character length 1, custom free-form human-readable text description target. Descriptions appear target labels functions like tar_manifest() tar_visnetwork(), let select subsets targets names argument functions like tar_make(). example, tar_manifest(names = tar_described_as(starts_with(\"survival model\"))) lists targets whose descriptions start character string \"survival model\".","code":""},{"path":"https://docs.ropensci.org/tarchetypes/reference/tar_group_by.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Group a data frame target by one or more variables. — tar_group_by","text":"target object generate grouped data frame allows downstream dynamic targets branch groups rows. See \"Target objects\" section background.","code":""},{"path":"https://docs.ropensci.org/tarchetypes/reference/tar_group_by.html","id":"target-objects","dir":"Reference","previous_headings":"","what":"Target objects","title":"Group a data frame target by one or more variables. — tar_group_by","text":"tarchetypes functions target factories, means return target objects lists target objects. Target objects represent skippable steps analysis pipeline described https://books.ropensci.org/targets/. Please read walkthrough https://books.ropensci.org/targets/walkthrough.html understand role target objects analysis pipelines. developers, https://wlandau.github.io/targetopia/contributing.html#target-factories explains target factories (functions like one generate targets) design specification https://books.ropensci.org/targets-design/ details structure composition target objects.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/tarchetypes/reference/tar_group_by.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Group a data frame target by one or more variables. — tar_group_by","text":"","code":"if (identical(Sys.getenv(\"TAR_LONG_EXAMPLES\"), \"true\")) { targets::tar_dir({ # tar_dir() runs code from a temporary directory. targets::tar_script({   produce_data <- function() {     expand.grid(var1 = c(\"a\", \"b\"), var2 = c(\"c\", \"d\"), rep = c(1, 2, 3))   }   list(     tarchetypes::tar_group_by(data, produce_data(), var1, var2),     tar_target(group, data, pattern = map(data))   ) }) targets::tar_make() # Read the first row group: targets::tar_read(group, branches = 1) # Read the second row group: targets::tar_read(group, branches = 2) }) }"},{"path":"https://docs.ropensci.org/tarchetypes/reference/tar_group_by_run.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate a grouped data frame within tar_group_by() — tar_group_by_run","title":"Generate a grouped data frame within tar_group_by() — tar_group_by_run","text":"user-side function. invoke directly.","code":""},{"path":"https://docs.ropensci.org/tarchetypes/reference/tar_group_by_run.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate a grouped data frame within tar_group_by() — tar_group_by_run","text":"","code":"tar_group_by_run(data, by)"},{"path":"https://docs.ropensci.org/tarchetypes/reference/tar_group_by_run.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate a grouped data frame within tar_group_by() — tar_group_by_run","text":"data data frame group. Nonempty character vector names variables group .","code":""},{"path":"https://docs.ropensci.org/tarchetypes/reference/tar_group_count.html","id":null,"dir":"Reference","previous_headings":"","what":"Group the rows of a data frame into a given number groups — tar_group_count","title":"Group the rows of a data frame into a given number groups — tar_group_count","text":"Create target outputs grouped data frame downstream dynamic branching. Set maximum number groups using count. number rows per group varies approximately uniform.","code":""},{"path":"https://docs.ropensci.org/tarchetypes/reference/tar_group_count.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Group the rows of a data frame into a given number groups — tar_group_count","text":"","code":"tar_group_count(   name,   command,   count,   tidy_eval = targets::tar_option_get(\"tidy_eval\"),   packages = targets::tar_option_get(\"packages\"),   library = targets::tar_option_get(\"library\"),   format = targets::tar_option_get(\"format\"),   repository = targets::tar_option_get(\"repository\"),   error = targets::tar_option_get(\"error\"),   memory = targets::tar_option_get(\"memory\"),   garbage_collection = targets::tar_option_get(\"garbage_collection\"),   deployment = targets::tar_option_get(\"deployment\"),   priority = targets::tar_option_get(\"priority\"),   resources = targets::tar_option_get(\"resources\"),   storage = targets::tar_option_get(\"storage\"),   retrieval = targets::tar_option_get(\"retrieval\"),   cue = targets::tar_option_get(\"cue\"),   description = targets::tar_option_get(\"description\") )"},{"path":"https://docs.ropensci.org/tarchetypes/reference/tar_group_count.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Group the rows of a data frame into a given number groups — tar_group_count","text":"name Symbol, name target. target name must valid name symbol R, must start dot. Subsequent targets can refer name symbolically induce dependency relationship: e.g. tar_target(downstream_target, f(upstream_target)) target named downstream_target depends target upstream_target function f(). addition, target's name determines random number generator seed. way, target runs reproducible seed someone else running pipeline get results, two targets pipeline share seed. (Even dynamic branches different names thus different seeds.) can recover seed completed target tar_meta(your_target, seed) run tar_seed_set() result locally recreate target's initial RNG state. command R code run target. count Positive integer, maximum number row groups tidy_eval Logical, whether enable tidy evaluation interpreting command pattern. TRUE, can use \"bang-bang\" operator !! programmatically insert values global objects. packages Character vector packages load right target runs output data reloaded downstream targets. Use tar_option_set() set packages globally subsequent targets define. library Character vector library paths try loading packages. format Optional storage format target's return value. exception format = \"file\", target gets file _targets/objects, format different way save load file. See \"Storage formats\" section detailed list possible data storage formats. repository Character length 1, remote repository target storage. Choices: \"local\": file system local machine. \"aws\": Amazon Web Services (AWS) S3 bucket. Can configured non-AWS S3 bucket using endpoint argument tar_resources_aws(), versioning capabilities may lost . See cloud storage section https://books.ropensci.org/targets/data.html details instructions. \"gcp\": Google Cloud Platform storage bucket. See cloud storage section https://books.ropensci.org/targets/data.html details instructions. Note: repository \"local\" format \"file\" target create single output file. output file uploaded cloud tracked changes exists cloud. local file deleted target runs. error Character length 1, target stops throws error. Options: \"stop\": whole pipeline stops throws error. \"continue\": whole pipeline keeps going. \"abridge\": currently running targets keep running, new targets launch . (Visit https://books.ropensci.org/targets/debugging.html learn debug targets using saved workspaces.) \"null\": errored target continues returns NULL. data hash deliberately wrong target date next run pipeline. memory Character length 1, memory strategy. \"persistent\", target stays memory end pipeline (unless storage \"worker\", case targets unloads value memory right storing order avoid sending copious data network). \"transient\", target gets unloaded every new target completes. Either way, target gets automatically loaded memory whenever another target needs value. cloud-based dynamic files (e.g. format = \"file\" repository = \"aws\"), memory strategy applies temporary local copy file: \"persistent\" means remains end pipeline deleted, \"transient\" means gets deleted soon possible. former conserves bandwidth, latter conserves local storage. garbage_collection Logical, whether run base::gc() just target runs. deployment Character length 1. deployment \"main\", target run central controlling R process. Otherwise, deployment \"worker\" set pipeline distributed/parallel computing, target runs parallel worker. distributed/parallel computing targets, please visit https://books.ropensci.org/targets/crew.html. priority Numeric length 1 0 1. Controls targets get deployed first multiple competing targets ready simultaneously. Targets priorities closer 1 get dispatched earlier (polled earlier tar_make_future()). resources Object returned tar_resources() optional settings high-performance computing functionality, alternative data storage formats, optional capabilities targets. See tar_resources() details. storage Character length 1, relevant tar_make_clustermq() tar_make_future(). Must one following values: \"main\": target's return value sent back host machine saved/uploaded locally. \"worker\": worker saves/uploads value. \"none\": almost never recommended. niche situations, e.g. data needs loaded explicitly another language. use , return value target totally ignored target ends, downstream target still attempts load data file (except retrieval = \"none\"). select storage = \"none\", return value target's command ignored, data saved automatically. dynamic files (format = \"file\") responsibility user write data store inside target. distinguishing feature storage = \"none\" (opposed format = \"file\") general case, downstream targets automatically try load data data store dependency. corollary, storage = \"none\" completely unnecessary format \"file\". retrieval Character length 1, relevant tar_make_clustermq() tar_make_future(). Must one following values: \"main\": target's dependencies loaded host machine sent worker target runs. \"worker\": worker loads targets dependencies. \"none\": dependencies loaded . choice almost never recommended. niche situations, e.g. data needs loaded explicitly another language. cue optional object tar_cue() customize rules decide whether target date. description Character length 1, custom free-form human-readable text description target. Descriptions appear target labels functions like tar_manifest() tar_visnetwork(), let select subsets targets names argument functions like tar_make(). example, tar_manifest(names = tar_described_as(starts_with(\"survival model\"))) lists targets whose descriptions start character string \"survival model\".","code":""},{"path":"https://docs.ropensci.org/tarchetypes/reference/tar_group_count.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Group the rows of a data frame into a given number groups — tar_group_count","text":"target object generate grouped data frame allows downstream dynamic targets branch groups rows. See \"Target objects\" section background.","code":""},{"path":"https://docs.ropensci.org/tarchetypes/reference/tar_group_count.html","id":"target-objects","dir":"Reference","previous_headings":"","what":"Target objects","title":"Group the rows of a data frame into a given number groups — tar_group_count","text":"tarchetypes functions target factories, means return target objects lists target objects. Target objects represent skippable steps analysis pipeline described https://books.ropensci.org/targets/. Please read walkthrough https://books.ropensci.org/targets/walkthrough.html understand role target objects analysis pipelines. developers, https://wlandau.github.io/targetopia/contributing.html#target-factories explains target factories (functions like one generate targets) design specification https://books.ropensci.org/targets-design/ details structure composition target objects.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/tarchetypes/reference/tar_group_count.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Group the rows of a data frame into a given number groups — tar_group_count","text":"","code":"if (identical(Sys.getenv(\"TAR_LONG_EXAMPLES\"), \"true\")) { targets::tar_dir({ # tar_dir() runs code from a temporary directory. targets::tar_script({   produce_data <- function() {     expand.grid(var1 = c(\"a\", \"b\"), var2 = c(\"c\", \"d\"), rep = c(1, 2, 3))   }   list(     tarchetypes::tar_group_count(data, produce_data(), count = 2),     tar_target(group, data, pattern = map(data))   ) }) targets::tar_make() # Read the first row group: targets::tar_read(group, branches = 1) # Read the second row group: targets::tar_read(group, branches = 2) }) }"},{"path":"https://docs.ropensci.org/tarchetypes/reference/tar_group_count_index.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate the tar_group column for tar_group_count(). — tar_group_count_index","title":"Generate the tar_group column for tar_group_count(). — tar_group_count_index","text":"user-side function. invoke directly.","code":""},{"path":"https://docs.ropensci.org/tarchetypes/reference/tar_group_count_index.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate the tar_group column for tar_group_count(). — tar_group_count_index","text":"","code":"tar_group_count_index(data, count)"},{"path":"https://docs.ropensci.org/tarchetypes/reference/tar_group_count_index.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate the tar_group column for tar_group_count(). — tar_group_count_index","text":"data data frame group. count Maximum number groups.","code":""},{"path":"https://docs.ropensci.org/tarchetypes/reference/tar_group_count_run.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate a grouped data frame within tar_group_count(). — tar_group_count_run","title":"Generate a grouped data frame within tar_group_count(). — tar_group_count_run","text":"user-side function. invoke directly.","code":""},{"path":"https://docs.ropensci.org/tarchetypes/reference/tar_group_count_run.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate a grouped data frame within tar_group_count(). — tar_group_count_run","text":"","code":"tar_group_count_run(data, count)"},{"path":"https://docs.ropensci.org/tarchetypes/reference/tar_group_count_run.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate a grouped data frame within tar_group_count(). — tar_group_count_run","text":"data data frame group. count Maximum number groups.","code":""},{"path":"https://docs.ropensci.org/tarchetypes/reference/tar_group_select.html","id":null,"dir":"Reference","previous_headings":"","what":"Group a data frame target with tidyselect semantics. — tar_group_select","title":"Group a data frame target with tidyselect semantics. — tar_group_select","text":"Create target outputs grouped data frame dplyr::group_by() targets::tar_group(). Unlike tar_group_by(), tar_group_select() expects select grouping variables using tidyselect semantics. Downstream dynamic branching targets iterate groups rows.","code":""},{"path":"https://docs.ropensci.org/tarchetypes/reference/tar_group_select.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Group a data frame target with tidyselect semantics. — tar_group_select","text":"","code":"tar_group_select(   name,   command,   by = NULL,   tidy_eval = targets::tar_option_get(\"tidy_eval\"),   packages = targets::tar_option_get(\"packages\"),   library = targets::tar_option_get(\"library\"),   format = targets::tar_option_get(\"format\"),   repository = targets::tar_option_get(\"repository\"),   error = targets::tar_option_get(\"error\"),   memory = targets::tar_option_get(\"memory\"),   garbage_collection = targets::tar_option_get(\"garbage_collection\"),   deployment = targets::tar_option_get(\"deployment\"),   priority = targets::tar_option_get(\"priority\"),   resources = targets::tar_option_get(\"resources\"),   storage = targets::tar_option_get(\"storage\"),   retrieval = targets::tar_option_get(\"retrieval\"),   cue = targets::tar_option_get(\"cue\"),   description = targets::tar_option_get(\"description\") )"},{"path":"https://docs.ropensci.org/tarchetypes/reference/tar_group_select.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Group a data frame target with tidyselect semantics. — tar_group_select","text":"name Symbol, name target. target name must valid name symbol R, must start dot. Subsequent targets can refer name symbolically induce dependency relationship: e.g. tar_target(downstream_target, f(upstream_target)) target named downstream_target depends target upstream_target function f(). addition, target's name determines random number generator seed. way, target runs reproducible seed someone else running pipeline get results, two targets pipeline share seed. (Even dynamic branches different names thus different seeds.) can recover seed completed target tar_meta(your_target, seed) run tar_seed_set() result locally recreate target's initial RNG state. command R code run target. Tidyselect semantics specify variables group . Alternatively, can supply character vector. tidy_eval Logical, whether enable tidy evaluation interpreting command pattern. TRUE, can use \"bang-bang\" operator !! programmatically insert values global objects. packages Character vector packages load right target runs output data reloaded downstream targets. Use tar_option_set() set packages globally subsequent targets define. library Character vector library paths try loading packages. format Optional storage format target's return value. exception format = \"file\", target gets file _targets/objects, format different way save load file. See \"Storage formats\" section detailed list possible data storage formats. repository Character length 1, remote repository target storage. Choices: \"local\": file system local machine. \"aws\": Amazon Web Services (AWS) S3 bucket. Can configured non-AWS S3 bucket using endpoint argument tar_resources_aws(), versioning capabilities may lost . See cloud storage section https://books.ropensci.org/targets/data.html details instructions. \"gcp\": Google Cloud Platform storage bucket. See cloud storage section https://books.ropensci.org/targets/data.html details instructions. Note: repository \"local\" format \"file\" target create single output file. output file uploaded cloud tracked changes exists cloud. local file deleted target runs. error Character length 1, target stops throws error. Options: \"stop\": whole pipeline stops throws error. \"continue\": whole pipeline keeps going. \"abridge\": currently running targets keep running, new targets launch . (Visit https://books.ropensci.org/targets/debugging.html learn debug targets using saved workspaces.) \"null\": errored target continues returns NULL. data hash deliberately wrong target date next run pipeline. memory Character length 1, memory strategy. \"persistent\", target stays memory end pipeline (unless storage \"worker\", case targets unloads value memory right storing order avoid sending copious data network). \"transient\", target gets unloaded every new target completes. Either way, target gets automatically loaded memory whenever another target needs value. cloud-based dynamic files (e.g. format = \"file\" repository = \"aws\"), memory strategy applies temporary local copy file: \"persistent\" means remains end pipeline deleted, \"transient\" means gets deleted soon possible. former conserves bandwidth, latter conserves local storage. garbage_collection Logical, whether run base::gc() just target runs. deployment Character length 1. deployment \"main\", target run central controlling R process. Otherwise, deployment \"worker\" set pipeline distributed/parallel computing, target runs parallel worker. distributed/parallel computing targets, please visit https://books.ropensci.org/targets/crew.html. priority Numeric length 1 0 1. Controls targets get deployed first multiple competing targets ready simultaneously. Targets priorities closer 1 get dispatched earlier (polled earlier tar_make_future()). resources Object returned tar_resources() optional settings high-performance computing functionality, alternative data storage formats, optional capabilities targets. See tar_resources() details. storage Character length 1, relevant tar_make_clustermq() tar_make_future(). Must one following values: \"main\": target's return value sent back host machine saved/uploaded locally. \"worker\": worker saves/uploads value. \"none\": almost never recommended. niche situations, e.g. data needs loaded explicitly another language. use , return value target totally ignored target ends, downstream target still attempts load data file (except retrieval = \"none\"). select storage = \"none\", return value target's command ignored, data saved automatically. dynamic files (format = \"file\") responsibility user write data store inside target. distinguishing feature storage = \"none\" (opposed format = \"file\") general case, downstream targets automatically try load data data store dependency. corollary, storage = \"none\" completely unnecessary format \"file\". retrieval Character length 1, relevant tar_make_clustermq() tar_make_future(). Must one following values: \"main\": target's dependencies loaded host machine sent worker target runs. \"worker\": worker loads targets dependencies. \"none\": dependencies loaded . choice almost never recommended. niche situations, e.g. data needs loaded explicitly another language. cue optional object tar_cue() customize rules decide whether target date. description Character length 1, custom free-form human-readable text description target. Descriptions appear target labels functions like tar_manifest() tar_visnetwork(), let select subsets targets names argument functions like tar_make(). example, tar_manifest(names = tar_described_as(starts_with(\"survival model\"))) lists targets whose descriptions start character string \"survival model\".","code":""},{"path":"https://docs.ropensci.org/tarchetypes/reference/tar_group_select.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Group a data frame target with tidyselect semantics. — tar_group_select","text":"target object generate grouped data frame allows downstream dynamic targets branch groups rows. See \"Target objects\" section background.","code":""},{"path":"https://docs.ropensci.org/tarchetypes/reference/tar_group_select.html","id":"target-objects","dir":"Reference","previous_headings":"","what":"Target objects","title":"Group a data frame target with tidyselect semantics. — tar_group_select","text":"tarchetypes functions target factories, means return target objects lists target objects. Target objects represent skippable steps analysis pipeline described https://books.ropensci.org/targets/. Please read walkthrough https://books.ropensci.org/targets/walkthrough.html understand role target objects analysis pipelines. developers, https://wlandau.github.io/targetopia/contributing.html#target-factories explains target factories (functions like one generate targets) design specification https://books.ropensci.org/targets-design/ details structure composition target objects.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/tarchetypes/reference/tar_group_select.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Group a data frame target with tidyselect semantics. — tar_group_select","text":"","code":"if (identical(Sys.getenv(\"TAR_LONG_EXAMPLES\"), \"true\")) { targets::tar_dir({ # tar_dir() runs code from a temporary directory. targets::tar_script({   produce_data <- function() {     expand.grid(var1 = c(\"a\", \"b\"), var2 = c(\"c\", \"d\"), rep = c(1, 2, 3))   }   list(     tarchetypes::tar_group_select(data, produce_data(), starts_with(\"var\")),     tar_target(group, data, pattern = map(data))   ) }) targets::tar_make() # Read the first row group: targets::tar_read(group, branches = 1) # Read the second row group: targets::tar_read(group, branches = 2) }) }"},{"path":"https://docs.ropensci.org/tarchetypes/reference/tar_group_select_run.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate a grouped data frame within tar_group_select() — tar_group_select_run","title":"Generate a grouped data frame within tar_group_select() — tar_group_select_run","text":"user-side function. invoke directly.","code":""},{"path":"https://docs.ropensci.org/tarchetypes/reference/tar_group_select_run.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate a grouped data frame within tar_group_select() — tar_group_select_run","text":"","code":"tar_group_select_run(data, by)"},{"path":"https://docs.ropensci.org/tarchetypes/reference/tar_group_select_run.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate a grouped data frame within tar_group_select() — tar_group_select_run","text":"data data frame group. Nonempty character vector names variables group .","code":""},{"path":"https://docs.ropensci.org/tarchetypes/reference/tar_group_size.html","id":null,"dir":"Reference","previous_headings":"","what":"Group the rows of a data frame into groups\nof a given size. — tar_group_size","title":"Group the rows of a data frame into groups\nof a given size. — tar_group_size","text":"Create target outputs grouped data frame downstream dynamic branching. Row groups number rows supply size (plus remainder group , applicable.) total number groups varies.","code":""},{"path":"https://docs.ropensci.org/tarchetypes/reference/tar_group_size.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Group the rows of a data frame into groups\nof a given size. — tar_group_size","text":"","code":"tar_group_size(   name,   command,   size,   tidy_eval = targets::tar_option_get(\"tidy_eval\"),   packages = targets::tar_option_get(\"packages\"),   library = targets::tar_option_get(\"library\"),   format = targets::tar_option_get(\"format\"),   repository = targets::tar_option_get(\"repository\"),   error = targets::tar_option_get(\"error\"),   memory = targets::tar_option_get(\"memory\"),   garbage_collection = targets::tar_option_get(\"garbage_collection\"),   deployment = targets::tar_option_get(\"deployment\"),   priority = targets::tar_option_get(\"priority\"),   resources = targets::tar_option_get(\"resources\"),   storage = targets::tar_option_get(\"storage\"),   retrieval = targets::tar_option_get(\"retrieval\"),   cue = targets::tar_option_get(\"cue\"),   description = targets::tar_option_get(\"description\") )"},{"path":"https://docs.ropensci.org/tarchetypes/reference/tar_group_size.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Group the rows of a data frame into groups\nof a given size. — tar_group_size","text":"name Symbol, name target. target name must valid name symbol R, must start dot. Subsequent targets can refer name symbolically induce dependency relationship: e.g. tar_target(downstream_target, f(upstream_target)) target named downstream_target depends target upstream_target function f(). addition, target's name determines random number generator seed. way, target runs reproducible seed someone else running pipeline get results, two targets pipeline share seed. (Even dynamic branches different names thus different seeds.) can recover seed completed target tar_meta(your_target, seed) run tar_seed_set() result locally recreate target's initial RNG state. command R code run target. size Positive integer, maximum number rows group. tidy_eval Logical, whether enable tidy evaluation interpreting command pattern. TRUE, can use \"bang-bang\" operator !! programmatically insert values global objects. packages Character vector packages load right target runs output data reloaded downstream targets. Use tar_option_set() set packages globally subsequent targets define. library Character vector library paths try loading packages. format Optional storage format target's return value. exception format = \"file\", target gets file _targets/objects, format different way save load file. See \"Storage formats\" section detailed list possible data storage formats. repository Character length 1, remote repository target storage. Choices: \"local\": file system local machine. \"aws\": Amazon Web Services (AWS) S3 bucket. Can configured non-AWS S3 bucket using endpoint argument tar_resources_aws(), versioning capabilities may lost . See cloud storage section https://books.ropensci.org/targets/data.html details instructions. \"gcp\": Google Cloud Platform storage bucket. See cloud storage section https://books.ropensci.org/targets/data.html details instructions. Note: repository \"local\" format \"file\" target create single output file. output file uploaded cloud tracked changes exists cloud. local file deleted target runs. error Character length 1, target stops throws error. Options: \"stop\": whole pipeline stops throws error. \"continue\": whole pipeline keeps going. \"abridge\": currently running targets keep running, new targets launch . (Visit https://books.ropensci.org/targets/debugging.html learn debug targets using saved workspaces.) \"null\": errored target continues returns NULL. data hash deliberately wrong target date next run pipeline. memory Character length 1, memory strategy. \"persistent\", target stays memory end pipeline (unless storage \"worker\", case targets unloads value memory right storing order avoid sending copious data network). \"transient\", target gets unloaded every new target completes. Either way, target gets automatically loaded memory whenever another target needs value. cloud-based dynamic files (e.g. format = \"file\" repository = \"aws\"), memory strategy applies temporary local copy file: \"persistent\" means remains end pipeline deleted, \"transient\" means gets deleted soon possible. former conserves bandwidth, latter conserves local storage. garbage_collection Logical, whether run base::gc() just target runs. deployment Character length 1. deployment \"main\", target run central controlling R process. Otherwise, deployment \"worker\" set pipeline distributed/parallel computing, target runs parallel worker. distributed/parallel computing targets, please visit https://books.ropensci.org/targets/crew.html. priority Numeric length 1 0 1. Controls targets get deployed first multiple competing targets ready simultaneously. Targets priorities closer 1 get dispatched earlier (polled earlier tar_make_future()). resources Object returned tar_resources() optional settings high-performance computing functionality, alternative data storage formats, optional capabilities targets. See tar_resources() details. storage Character length 1, relevant tar_make_clustermq() tar_make_future(). Must one following values: \"main\": target's return value sent back host machine saved/uploaded locally. \"worker\": worker saves/uploads value. \"none\": almost never recommended. niche situations, e.g. data needs loaded explicitly another language. use , return value target totally ignored target ends, downstream target still attempts load data file (except retrieval = \"none\"). select storage = \"none\", return value target's command ignored, data saved automatically. dynamic files (format = \"file\") responsibility user write data store inside target. distinguishing feature storage = \"none\" (opposed format = \"file\") general case, downstream targets automatically try load data data store dependency. corollary, storage = \"none\" completely unnecessary format \"file\". retrieval Character length 1, relevant tar_make_clustermq() tar_make_future(). Must one following values: \"main\": target's dependencies loaded host machine sent worker target runs. \"worker\": worker loads targets dependencies. \"none\": dependencies loaded . choice almost never recommended. niche situations, e.g. data needs loaded explicitly another language. cue optional object tar_cue() customize rules decide whether target date. description Character length 1, custom free-form human-readable text description target. Descriptions appear target labels functions like tar_manifest() tar_visnetwork(), let select subsets targets names argument functions like tar_make(). example, tar_manifest(names = tar_described_as(starts_with(\"survival model\"))) lists targets whose descriptions start character string \"survival model\".","code":""},{"path":"https://docs.ropensci.org/tarchetypes/reference/tar_group_size.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Group the rows of a data frame into groups\nof a given size. — tar_group_size","text":"target object generate grouped data frame allows downstream dynamic targets branch groups rows. See \"Target objects\" section background.","code":""},{"path":"https://docs.ropensci.org/tarchetypes/reference/tar_group_size.html","id":"target-objects","dir":"Reference","previous_headings":"","what":"Target objects","title":"Group the rows of a data frame into groups\nof a given size. — tar_group_size","text":"tarchetypes functions target factories, means return target objects lists target objects. Target objects represent skippable steps analysis pipeline described https://books.ropensci.org/targets/. Please read walkthrough https://books.ropensci.org/targets/walkthrough.html understand role target objects analysis pipelines. developers, https://wlandau.github.io/targetopia/contributing.html#target-factories explains target factories (functions like one generate targets) design specification https://books.ropensci.org/targets-design/ details structure composition target objects.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/tarchetypes/reference/tar_group_size.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Group the rows of a data frame into groups\nof a given size. — tar_group_size","text":"","code":"if (identical(Sys.getenv(\"TAR_LONG_EXAMPLES\"), \"true\")) { targets::tar_dir({ # tar_dir() runs code from a temporary directory. targets::tar_script({   produce_data <- function() {     expand.grid(var1 = c(\"a\", \"b\"), var2 = c(\"c\", \"d\"), rep = c(1, 2, 3))   }   list(     tarchetypes::tar_group_size(data, produce_data(), size = 7),     tar_target(group, data, pattern = map(data))   ) }) targets::tar_make() # Read the first row group: targets::tar_read(group, branches = 1) # Read the second row group: targets::tar_read(group, branches = 2) }) }"},{"path":"https://docs.ropensci.org/tarchetypes/reference/tar_group_size_index.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate the tar_group column for tar_group_size(). — tar_group_size_index","title":"Generate the tar_group column for tar_group_size(). — tar_group_size_index","text":"user-side function. invoke directly.","code":""},{"path":"https://docs.ropensci.org/tarchetypes/reference/tar_group_size_index.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate the tar_group column for tar_group_size(). — tar_group_size_index","text":"","code":"tar_group_size_index(data, size)"},{"path":"https://docs.ropensci.org/tarchetypes/reference/tar_group_size_index.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate the tar_group column for tar_group_size(). — tar_group_size_index","text":"data data frame group. size Maximum number rows group.","code":""},{"path":"https://docs.ropensci.org/tarchetypes/reference/tar_group_size_run.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate a grouped data frame within tar_group_size() — tar_group_size_run","title":"Generate a grouped data frame within tar_group_size() — tar_group_size_run","text":"user-side function. invoke directly.","code":""},{"path":"https://docs.ropensci.org/tarchetypes/reference/tar_group_size_run.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate a grouped data frame within tar_group_size() — tar_group_size_run","text":"","code":"tar_group_size_run(data, size)"},{"path":"https://docs.ropensci.org/tarchetypes/reference/tar_group_size_run.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate a grouped data frame within tar_group_size() — tar_group_size_run","text":"data data frame group.","code":""},{"path":"https://docs.ropensci.org/tarchetypes/reference/tar_hook_before.html","id":null,"dir":"Reference","previous_headings":"","what":"Hook to prepend code — tar_hook_before","title":"Hook to prepend code — tar_hook_before","text":"Prepend R code commands multiple targets.","code":""},{"path":"https://docs.ropensci.org/tarchetypes/reference/tar_hook_before.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Hook to prepend code — tar_hook_before","text":"","code":"tar_hook_before(targets, hook, names = NULL, set_deps = TRUE)"},{"path":"https://docs.ropensci.org/tarchetypes/reference/tar_hook_before.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Hook to prepend code — tar_hook_before","text":"targets list target objects. input target list can arbitrarily nested, must consist entirely target objects. addition, return value simple list element target object. hook functions remove nested structure input target list. hook R code insert. supply code argument, code quoted (evaluated) need wrap quote(), expression(), similar. names Name targets target list apply hook. Supplied tidyselect helpers like starts_with(), names = starts_with(\"your_prefix_\"). Targets included names still remain target list, modified hook apply . set_deps Logical length 1, whether refresh dependencies modified target scanning newly generated target commands dependencies. FALSE, target keep original set dependencies hook. TRUE recommended nearly situations. use FALSE specialized use case know .","code":""},{"path":"https://docs.ropensci.org/tarchetypes/reference/tar_hook_before.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Hook to prepend code — tar_hook_before","text":"flattened list target objects hooks applied. Even input target list nested structure, return value simple list element target object. hook functions remove nested structure input target list.","code":""},{"path":"https://docs.ropensci.org/tarchetypes/reference/tar_hook_before.html","id":"target-objects","dir":"Reference","previous_headings":"","what":"Target objects","title":"Hook to prepend code — tar_hook_before","text":"tarchetypes functions target factories, means return target objects lists target objects. Target objects represent skippable steps analysis pipeline described https://books.ropensci.org/targets/. Please read walkthrough https://books.ropensci.org/targets/walkthrough.html understand role target objects analysis pipelines. developers, https://wlandau.github.io/targetopia/contributing.html#target-factories explains target factories (functions like one generate targets) design specification https://books.ropensci.org/targets-design/ details structure composition target objects.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/tarchetypes/reference/tar_hook_before.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Hook to prepend code — tar_hook_before","text":"","code":"if (identical(Sys.getenv(\"TAR_LONG_EXAMPLES\"), \"true\")) { targets::tar_dir({ # tar_dir() runs code from a temporary directory. targets::tar_script({   targets <- list(     # Nested target lists work with hooks.     list(       targets::tar_target(x1, task1()),       targets::tar_target(x2, task2(x1))     ),     targets::tar_target(x3, task3(x2)),     targets::tar_target(y1, task4(x3))   )   tarchetypes::tar_hook_before(     targets = targets,     hook = print(\"Running hook.\"),     names = starts_with(\"x\")   ) }) targets::tar_manifest(fields = command) }) }"},{"path":"https://docs.ropensci.org/tarchetypes/reference/tar_hook_inner.html","id":null,"dir":"Reference","previous_headings":"","what":"Hook to wrap dependencies — tar_hook_inner","title":"Hook to wrap dependencies — tar_hook_inner","text":"command target, wrap mention dependency target arbitrary R expression.","code":""},{"path":"https://docs.ropensci.org/tarchetypes/reference/tar_hook_inner.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Hook to wrap dependencies — tar_hook_inner","text":"","code":"tar_hook_inner(targets, hook, names = NULL, names_wrap = NULL, set_deps = TRUE)"},{"path":"https://docs.ropensci.org/tarchetypes/reference/tar_hook_inner.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Hook to wrap dependencies — tar_hook_inner","text":"targets list target objects. input target list can arbitrarily nested, must consist entirely target objects. addition, return value simple list element target object. hook functions remove nested structure input target list. hook R code wrap target's command. hook must contain special placeholder symbol .x tar_hook_inner() knows insert code wrap mentions dependencies. hook code quoted (evaluated) need wrap quote(), expression(), similar. names Name targets target list apply hook. Supplied tidyselect helpers like starts_with(), names = starts_with(\"your_prefix_\"). Targets included names still remain target list, modified hook apply . names_wrap Names targets wrap hook appear dependencies commands targets. Use tidyselect helpers like starts_with(), names_wrap = starts_with(\"your_prefix_\"). set_deps Logical length 1, whether refresh dependencies modified target scanning newly generated target commands dependencies. FALSE, target keep original set dependencies hook. TRUE recommended nearly situations. use FALSE specialized use case know .","code":""},{"path":"https://docs.ropensci.org/tarchetypes/reference/tar_hook_inner.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Hook to wrap dependencies — tar_hook_inner","text":"flattened list target objects hooks applied. Even input target list nested structure, return value simple list element target object. hook functions remove nested structure input target list.","code":""},{"path":"https://docs.ropensci.org/tarchetypes/reference/tar_hook_inner.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Hook to wrap dependencies — tar_hook_inner","text":"expression supply hook must contain special placeholder symbol .x tar_hook_inner() knows insert original command target.","code":""},{"path":"https://docs.ropensci.org/tarchetypes/reference/tar_hook_inner.html","id":"target-objects","dir":"Reference","previous_headings":"","what":"Target objects","title":"Hook to wrap dependencies — tar_hook_inner","text":"tarchetypes functions target factories, means return target objects lists target objects. Target objects represent skippable steps analysis pipeline described https://books.ropensci.org/targets/. Please read walkthrough https://books.ropensci.org/targets/walkthrough.html understand role target objects analysis pipelines. developers, https://wlandau.github.io/targetopia/contributing.html#target-factories explains target factories (functions like one generate targets) design specification https://books.ropensci.org/targets-design/ details structure composition target objects.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/tarchetypes/reference/tar_hook_inner.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Hook to wrap dependencies — tar_hook_inner","text":"","code":"if (identical(Sys.getenv(\"TAR_LONG_EXAMPLES\"), \"true\")) { targets::tar_dir({ # tar_dir() runs code from a temporary directory. targets::tar_script({   targets <- list(     # Nested target lists work with hooks.     list(       targets::tar_target(x1, task1()),       targets::tar_target(x2, task2(x1))     ),     targets::tar_target(x3, task3(x2, x1)),     targets::tar_target(y1, task4(x3))   )   tarchetypes::tar_hook_inner(     targets = targets,     hook = fun(.x),     names = starts_with(\"x\")   ) }) targets::tar_manifest(fields = command) }) }"},{"path":"https://docs.ropensci.org/tarchetypes/reference/tar_hook_outer.html","id":null,"dir":"Reference","previous_headings":"","what":"Hook to wrap commands — tar_hook_outer","title":"Hook to wrap commands — tar_hook_outer","text":"Wrap command target arbitrary R expression.","code":""},{"path":"https://docs.ropensci.org/tarchetypes/reference/tar_hook_outer.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Hook to wrap commands — tar_hook_outer","text":"","code":"tar_hook_outer(targets, hook, names = NULL, set_deps = TRUE)"},{"path":"https://docs.ropensci.org/tarchetypes/reference/tar_hook_outer.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Hook to wrap commands — tar_hook_outer","text":"targets list target objects. input target list can arbitrarily nested, must consist entirely target objects. addition, return value simple list element target object. hook functions remove nested structure input target list. hook R code wrap target's command. hook must contain special placeholder symbol .x tar_hook_outer() knows insert original command target. hook code quoted (evaluated) need wrap quote(), expression(), similar. names Name targets target list apply hook. Supplied tidyselect helpers like starts_with(), names = starts_with(\"your_prefix_\"). Targets included names still remain target list, modified hook apply . set_deps Logical length 1, whether refresh dependencies modified target scanning newly generated target commands dependencies. FALSE, target keep original set dependencies hook. TRUE recommended nearly situations. use FALSE specialized use case know .","code":""},{"path":"https://docs.ropensci.org/tarchetypes/reference/tar_hook_outer.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Hook to wrap commands — tar_hook_outer","text":"flattened list target objects hooks applied. Even input target list nested structure, return value simple list element target object. hook functions remove nested structure input target list.","code":""},{"path":"https://docs.ropensci.org/tarchetypes/reference/tar_hook_outer.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Hook to wrap commands — tar_hook_outer","text":"expression supply hook must contain special placeholder symbol .x tar_hook_outer() knows insert original command target.","code":""},{"path":"https://docs.ropensci.org/tarchetypes/reference/tar_hook_outer.html","id":"target-objects","dir":"Reference","previous_headings":"","what":"Target objects","title":"Hook to wrap commands — tar_hook_outer","text":"tarchetypes functions target factories, means return target objects lists target objects. Target objects represent skippable steps analysis pipeline described https://books.ropensci.org/targets/. Please read walkthrough https://books.ropensci.org/targets/walkthrough.html understand role target objects analysis pipelines. developers, https://wlandau.github.io/targetopia/contributing.html#target-factories explains target factories (functions like one generate targets) design specification https://books.ropensci.org/targets-design/ details structure composition target objects.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/tarchetypes/reference/tar_hook_outer.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Hook to wrap commands — tar_hook_outer","text":"","code":"if (identical(Sys.getenv(\"TAR_LONG_EXAMPLES\"), \"true\")) { targets::tar_dir({ # tar_dir() runs code from a temporary directory. targets::tar_script({   targets <- list(     # Nested target lists work with hooks.     list(       targets::tar_target(x1, task1()),       targets::tar_target(x2, task2(x1))     ),     targets::tar_target(x3, task3(x2)),     targets::tar_target(y1, task4(x3))   )   tarchetypes::tar_hook_outer(     targets = targets,     hook = postprocess(.x, arg = \"value\"),     names = starts_with(\"x\")   ) }) targets::tar_manifest(fields = command) }) }"},{"path":"https://docs.ropensci.org/tarchetypes/reference/tar_knit.html","id":null,"dir":"Reference","previous_headings":"","what":"Target with a knitr document. — tar_knit","title":"Target with a knitr document. — tar_knit","text":"Shorthand include knitr document targets pipeline.","code":""},{"path":"https://docs.ropensci.org/tarchetypes/reference/tar_knit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Target with a knitr document. — tar_knit","text":"","code":"tar_knit(   name,   path,   output_file = NULL,   working_directory = NULL,   tidy_eval = targets::tar_option_get(\"tidy_eval\"),   packages = targets::tar_option_get(\"packages\"),   library = targets::tar_option_get(\"library\"),   error = targets::tar_option_get(\"error\"),   memory = targets::tar_option_get(\"memory\"),   garbage_collection = targets::tar_option_get(\"garbage_collection\"),   deployment = \"main\",   priority = targets::tar_option_get(\"priority\"),   resources = targets::tar_option_get(\"resources\"),   retrieval = targets::tar_option_get(\"retrieval\"),   cue = targets::tar_option_get(\"cue\"),   description = targets::tar_option_get(\"description\"),   quiet = TRUE,   ... )"},{"path":"https://docs.ropensci.org/tarchetypes/reference/tar_knit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Target with a knitr document. — tar_knit","text":"name Symbol, name target. target name must valid name symbol R, must start dot. Subsequent targets can refer name symbolically induce dependency relationship: e.g. tar_target(downstream_target, f(upstream_target)) target named downstream_target depends target upstream_target function f(). addition, target's name determines random number generator seed. way, target runs reproducible seed someone else running pipeline get results, two targets pipeline share seed. (Even dynamic branches different names thus different seeds.) can recover seed completed target tar_meta(your_target, seed) run tar_seed_set() result locally recreate target's initial RNG state. path Character string, file path knitr source file. Must length 1. output_file Character string, file path rendered output file. working_directory Optional character string, path working directory temporarily set running report. default NULL, runs report current working directory time pipeline run. default recommended vast majority cases. use anything NULL, must manually set value store argument relative working directory calls tar_read() tar_load() report. Otherwise, functions know find data. tidy_eval Logical, whether enable tidy evaluation interpreting command pattern. TRUE, can use \"bang-bang\" operator !! programmatically insert values global objects. packages Character vector packages load right target runs output data reloaded downstream targets. Use tar_option_set() set packages globally subsequent targets define. library Character vector library paths try loading packages. error Character length 1, target stops throws error. Options: \"stop\": whole pipeline stops throws error. \"continue\": whole pipeline keeps going. \"abridge\": currently running targets keep running, new targets launch . (Visit https://books.ropensci.org/targets/debugging.html learn debug targets using saved workspaces.) \"null\": errored target continues returns NULL. data hash deliberately wrong target date next run pipeline. memory Character length 1, memory strategy. \"persistent\", target stays memory end pipeline (unless storage \"worker\", case targets unloads value memory right storing order avoid sending copious data network). \"transient\", target gets unloaded every new target completes. Either way, target gets automatically loaded memory whenever another target needs value. cloud-based dynamic files (e.g. format = \"file\" repository = \"aws\"), memory strategy applies temporary local copy file: \"persistent\" means remains end pipeline deleted, \"transient\" means gets deleted soon possible. former conserves bandwidth, latter conserves local storage. garbage_collection Logical, whether run base::gc() just target runs. deployment Character length 1. deployment \"main\", target run central controlling R process. Otherwise, deployment \"worker\" set pipeline distributed/parallel computing, target runs parallel worker. distributed/parallel computing targets, please visit https://books.ropensci.org/targets/crew.html. priority Numeric length 1 0 1. Controls targets get deployed first multiple competing targets ready simultaneously. Targets priorities closer 1 get dispatched earlier (polled earlier tar_make_future()). resources Object returned tar_resources() optional settings high-performance computing functionality, alternative data storage formats, optional capabilities targets. See tar_resources() details. retrieval Character length 1, relevant tar_make_clustermq() tar_make_future(). Must one following values: \"main\": target's dependencies loaded host machine sent worker target runs. \"worker\": worker loads targets dependencies. \"none\": dependencies loaded . choice almost never recommended. niche situations, e.g. data needs loaded explicitly another language. cue optional object tar_cue() customize rules decide whether target date. description Character length 1, custom free-form human-readable text description target. Descriptions appear target labels functions like tar_manifest() tar_visnetwork(), let select subsets targets names argument functions like tar_make(). example, tar_manifest(names = tar_described_as(starts_with(\"survival model\"))) lists targets whose descriptions start character string \"survival model\". quiet Boolean; suppress progress bar messages? ... Named arguments knitr::knit(). arguments evaluated target actually runs tar_make(), target defined.","code":""},{"path":"https://docs.ropensci.org/tarchetypes/reference/tar_knit.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Target with a knitr document. — tar_knit","text":"tar_target() object format = \"file\". target runs, returns character vector file paths. first file paths output files (returned knitr::knit()) knitr source file last. unlike knitr::knit(), returned paths relative paths ensure portability (project can moved one file system another without invalidating target). See \"Target objects\" section background.","code":""},{"path":"https://docs.ropensci.org/tarchetypes/reference/tar_knit.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Target with a knitr document. — tar_knit","text":"tar_knit() alternative tar_target() knitr reports depend targets. knitr source mention dependency targets tar_load() tar_read() active code chunks (also allows knit report outside pipeline _targets/ data store already exists). (use tar_load_raw() tar_read_raw() .) , tar_knit() defines special kind target. 1. Finds tar_load()/tar_read() dependencies report inserts target's command. enforces proper dependency relationships. (use tar_load_raw() tar_read_raw() .) 2. Sets format = \"file\" (see tar_target()) targets watches files returned paths reruns report files change. 3. Configures target's command return output report files input source file. file paths relative paths project stays portable. 4. Forces report run user's current working directory instead working directory report. 5. Sets convenient default options deployment = \"main\" target quiet = TRUE knitr::knit().","code":""},{"path":"https://docs.ropensci.org/tarchetypes/reference/tar_knit.html","id":"target-objects","dir":"Reference","previous_headings":"","what":"Target objects","title":"Target with a knitr document. — tar_knit","text":"tarchetypes functions target factories, means return target objects lists target objects. Target objects represent skippable steps analysis pipeline described https://books.ropensci.org/targets/. Please read walkthrough https://books.ropensci.org/targets/walkthrough.html understand role target objects analysis pipelines. developers, https://wlandau.github.io/targetopia/contributing.html#target-factories explains target factories (functions like one generate targets) design specification https://books.ropensci.org/targets-design/ details structure composition target objects.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/tarchetypes/reference/tar_knit.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Target with a knitr document. — tar_knit","text":"","code":"if (identical(Sys.getenv(\"TAR_LONG_EXAMPLES\"), \"true\")) { targets::tar_dir({ # tar_dir() runs code from a temporary directory. targets::tar_script({   # Ordinarily, you should create the report outside   # tar_script() and avoid temporary files.   lines <- c(     \"---\",     \"title: report\",     \"output_format: html_document\",     \"---\",     \"\",     \"```{r}\",     \"targets::tar_read(data)\",     \"```\"   )   path <- tempfile()   writeLines(lines, path)   list(     targets::tar_target(data, data.frame(x = seq_len(26), y = letters)),     tarchetypes::tar_knit(report, path)   ) }) targets::tar_make() }) }"},{"path":"https://docs.ropensci.org/tarchetypes/reference/tar_knit_raw.html","id":null,"dir":"Reference","previous_headings":"","what":"Target with a knitr document (raw version). — tar_knit_raw","title":"Target with a knitr document (raw version). — tar_knit_raw","text":"Shorthand include knitr document targets pipeline (raw version)","code":""},{"path":"https://docs.ropensci.org/tarchetypes/reference/tar_knit_raw.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Target with a knitr document (raw version). — tar_knit_raw","text":"","code":"tar_knit_raw(   name,   path,   output_file = NULL,   working_directory = NULL,   packages = targets::tar_option_get(\"packages\"),   library = targets::tar_option_get(\"library\"),   error = targets::tar_option_get(\"error\"),   memory = targets::tar_option_get(\"memory\"),   garbage_collection = targets::tar_option_get(\"garbage_collection\"),   deployment = \"main\",   priority = targets::tar_option_get(\"priority\"),   resources = targets::tar_option_get(\"resources\"),   retrieval = targets::tar_option_get(\"retrieval\"),   cue = targets::tar_option_get(\"cue\"),   description = targets::tar_option_get(\"description\"),   quiet = TRUE,   knit_arguments = quote(list()) )"},{"path":"https://docs.ropensci.org/tarchetypes/reference/tar_knit_raw.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Target with a knitr document (raw version). — tar_knit_raw","text":"name Character length 1, name target. path Character string, file path knitr source file. Must length 1. output_file Character string, file path rendered output file. working_directory Optional character string, path working directory temporarily set running report. default NULL, runs report current working directory time pipeline run. default recommended vast majority cases. use anything NULL, must manually set value store argument relative working directory calls tar_read() tar_load() report. Otherwise, functions know find data. packages Character vector packages load right target runs output data reloaded downstream targets. Use tar_option_set() set packages globally subsequent targets define. library Character vector library paths try loading packages. error Character length 1, target stops throws error. Options: \"stop\": whole pipeline stops throws error. \"continue\": whole pipeline keeps going. \"abridge\": currently running targets keep running, new targets launch . (Visit https://books.ropensci.org/targets/debugging.html learn debug targets using saved workspaces.) \"null\": errored target continues returns NULL. data hash deliberately wrong target date next run pipeline. memory Character length 1, memory strategy. \"persistent\", target stays memory end pipeline (unless storage \"worker\", case targets unloads value memory right storing order avoid sending copious data network). \"transient\", target gets unloaded every new target completes. Either way, target gets automatically loaded memory whenever another target needs value. cloud-based dynamic files (e.g. format = \"file\" repository = \"aws\"), memory strategy applies temporary local copy file: \"persistent\" means remains end pipeline deleted, \"transient\" means gets deleted soon possible. former conserves bandwidth, latter conserves local storage. garbage_collection Logical, whether run base::gc() just target runs. deployment Character length 1. deployment \"main\", target run central controlling R process. Otherwise, deployment \"worker\" set pipeline distributed/parallel computing, target runs parallel worker. distributed/parallel computing targets, please visit https://books.ropensci.org/targets/crew.html. priority Numeric length 1 0 1. Controls targets get deployed first multiple competing targets ready simultaneously. Targets priorities closer 1 get dispatched earlier (polled earlier tar_make_future()). resources Object returned tar_resources() optional settings high-performance computing functionality, alternative data storage formats, optional capabilities targets. See tar_resources() details. retrieval Character length 1, relevant tar_make_clustermq() tar_make_future(). Must one following values: \"main\": target's dependencies loaded host machine sent worker target runs. \"worker\": worker loads targets dependencies. \"none\": dependencies loaded . choice almost never recommended. niche situations, e.g. data needs loaded explicitly another language. cue optional object tar_cue() customize rules decide whether target date. description Character length 1, custom free-form human-readable text description target. Descriptions appear target labels functions like tar_manifest() tar_visnetwork(), let select subsets targets names argument functions like tar_make(). example, tar_manifest(names = tar_described_as(starts_with(\"survival model\"))) lists targets whose descriptions start character string \"survival model\". quiet Boolean; suppress progress bar messages? knit_arguments Optional language object list named arguments knitr::knit(). expression object. (Use quote(), expression().) reason quoting arguments may depend upstream targets whose values available time target defined, tar_knit_raw() \"raw\" version function, want avoid non-standard evaluation.","code":""},{"path":"https://docs.ropensci.org/tarchetypes/reference/tar_knit_raw.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Target with a knitr document (raw version). — tar_knit_raw","text":"tar_target() object format = \"file\". target runs, returns character vector file paths. first file paths output files (returned knitr::knit()) knitr source file last. unlike knitr::knit(), returned paths relative paths ensure portability (project can moved one file system another without invalidating target). See \"Target objects\" section background.","code":""},{"path":"https://docs.ropensci.org/tarchetypes/reference/tar_knit_raw.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Target with a knitr document (raw version). — tar_knit_raw","text":"tar_knit_raw() just like tar_knit() except uses standard evaluation. name argument character vector, knit_arguments argument language object.","code":""},{"path":"https://docs.ropensci.org/tarchetypes/reference/tar_knit_raw.html","id":"target-objects","dir":"Reference","previous_headings":"","what":"Target objects","title":"Target with a knitr document (raw version). — tar_knit_raw","text":"tarchetypes functions target factories, means return target objects lists target objects. Target objects represent skippable steps analysis pipeline described https://books.ropensci.org/targets/. Please read walkthrough https://books.ropensci.org/targets/walkthrough.html understand role target objects analysis pipelines. developers, https://wlandau.github.io/targetopia/contributing.html#target-factories explains target factories (functions like one generate targets) design specification https://books.ropensci.org/targets-design/ details structure composition target objects.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/tarchetypes/reference/tar_knit_raw.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Target with a knitr document (raw version). — tar_knit_raw","text":"","code":"if (identical(Sys.getenv(\"TAR_LONG_EXAMPLES\"), \"true\")) { targets::tar_dir({ # tar_dir() runs code from a temporary directory. targets::tar_script({   # Ordinarily, you should create the report outside   # tar_script() and avoid temporary files.   lines <- c(     \"---\",     \"title: report\",     \"output_format: html_document\",     \"---\",     \"\",     \"```{r}\",     \"targets::tar_read(data)\",     \"```\"   )   path <- tempfile()   writeLines(lines, path)   list(     targets::tar_target(data, data.frame(x = seq_len(26), y = letters)),     tarchetypes::tar_knit_raw(\"report\", path)   ) }) targets::tar_make() }) }"},{"path":"https://docs.ropensci.org/tarchetypes/reference/tar_knit_run.html","id":null,"dir":"Reference","previous_headings":"","what":"Run a knitr report inside a tar_knit() target. — tar_knit_run","title":"Run a knitr report inside a tar_knit() target. — tar_knit_run","text":"Internal function needed tar_knit(). Users invoke directly.","code":""},{"path":"https://docs.ropensci.org/tarchetypes/reference/tar_knit_run.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run a knitr report inside a tar_knit() target. — tar_knit_run","text":"","code":"tar_knit_run(path, working_directory, args, deps)"},{"path":"https://docs.ropensci.org/tarchetypes/reference/tar_knit_run.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Run a knitr report inside a tar_knit() target. — tar_knit_run","text":"path Character string, file path knitr source file. Must length 1. working_directory Optional character string, path working directory temporarily set running report. default NULL, runs report current working directory time pipeline run. default recommended vast majority cases. use anything NULL, must manually set value store argument relative working directory calls tar_read() tar_load() report. Otherwise, functions know find data. args named list arguments knitr::knit(). deps unnamed list target dependencies knitr report, automatically created tar_knit().","code":""},{"path":"https://docs.ropensci.org/tarchetypes/reference/tar_knit_run.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Run a knitr report inside a tar_knit() target. — tar_knit_run","text":"Character path knitr source file relative path output knitr report. output path depends input path argument, default.","code":""},{"path":"https://docs.ropensci.org/tarchetypes/reference/tar_knitr_deps.html","id":null,"dir":"Reference","previous_headings":"","what":"List literate programming dependencies. — tar_knitr_deps","title":"List literate programming dependencies. — tar_knitr_deps","text":"List target dependencies one literate programming reports (R Markdown knitr).","code":""},{"path":"https://docs.ropensci.org/tarchetypes/reference/tar_knitr_deps.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"List literate programming dependencies. — tar_knitr_deps","text":"","code":"tar_knitr_deps(path)"},{"path":"https://docs.ropensci.org/tarchetypes/reference/tar_knitr_deps.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"List literate programming dependencies. — tar_knitr_deps","text":"path Character vector, path one R Markdown knitr reports.","code":""},{"path":"https://docs.ropensci.org/tarchetypes/reference/tar_knitr_deps.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"List literate programming dependencies. — tar_knitr_deps","text":"Character vector names targets dependencies knitr report.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/tarchetypes/reference/tar_knitr_deps.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"List literate programming dependencies. — tar_knitr_deps","text":"","code":"lines <- c(   \"---\",   \"title: report\",   \"output_format: html_document\",   \"---\",   \"\",   \"```{r}\",   \"targets::tar_load(data1)\",   \"targets::tar_read(data2)\",   \"```\" ) report <- tempfile() writeLines(lines, report) tar_knitr_deps(report) #> [1] \"data1\" \"data2\""},{"path":"https://docs.ropensci.org/tarchetypes/reference/tar_knitr_deps_expr.html","id":null,"dir":"Reference","previous_headings":"","what":"Expression with literate programming dependencies. — tar_knitr_deps_expr","title":"Expression with literate programming dependencies. — tar_knitr_deps_expr","text":"Construct expression whose global variable dependencies target dependencies one literate programming reports (R Markdown knitr). helps third-party developers create third-party target factories literate programming targets (similar tar_knit() tar_render()).","code":""},{"path":"https://docs.ropensci.org/tarchetypes/reference/tar_knitr_deps_expr.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Expression with literate programming dependencies. — tar_knitr_deps_expr","text":"","code":"tar_knitr_deps_expr(path)"},{"path":"https://docs.ropensci.org/tarchetypes/reference/tar_knitr_deps_expr.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Expression with literate programming dependencies. — tar_knitr_deps_expr","text":"path Character vector, path one R Markdown knitr reports.","code":""},{"path":"https://docs.ropensci.org/tarchetypes/reference/tar_knitr_deps_expr.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Expression with literate programming dependencies. — tar_knitr_deps_expr","text":"Expression object name dependency targets knitr report, detected static code analysis targets.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/tarchetypes/reference/tar_knitr_deps_expr.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Expression with literate programming dependencies. — tar_knitr_deps_expr","text":"","code":"lines <- c(   \"---\",   \"title: report\",   \"output_format: html_document\",   \"---\",   \"\",   \"```{r}\",   \"targets::tar_load(data1)\",   \"targets::tar_read(data2)\",   \"```\" ) report <- tempfile() writeLines(lines, report) tar_knitr_deps_expr(report) #> list(data1, data2)"},{"path":"https://docs.ropensci.org/tarchetypes/reference/tar_map.html","id":null,"dir":"Reference","previous_headings":"","what":"Static branching. — tar_map","title":"Static branching. — tar_map","text":"Define multiple new targets based existing target objects.","code":""},{"path":"https://docs.ropensci.org/tarchetypes/reference/tar_map.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Static branching. — tar_map","text":"","code":"tar_map(   values,   ...,   names = tidyselect::everything(),   descriptions = tidyselect::everything(),   unlist = FALSE )"},{"path":"https://docs.ropensci.org/tarchetypes/reference/tar_map.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Static branching. — tar_map","text":"values Named list data frame values iterate . names names symbols commands pattern statements, elements values get substituted place symbols. tar_map() uses elements create new R code, basic types, symbols, R expressions. objects even little bit complicated, especially objects attributes, obvious convert object code generates . complicated objects, consider using quote() define values, shown https://github.com/ropensci/tarchetypes/discussions/105. ... One target objects list target objects. Lists can arbitrarily nested, list(). names Subset names(values) used generate suffixes names new targets. value names tidyselect expression call any_of() starts_with(). descriptions Names column values append custom description generated target. value descriptions tidyselect expression call any_of() starts_with(). unlist Logical, whether flatten returned list targets. unlist = FALSE, list nested sub-lists named grouped original input targets. unlist = TRUE, return value flat list targets named new target names.","code":""},{"path":"https://docs.ropensci.org/tarchetypes/reference/tar_map.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Static branching. — tar_map","text":"list new target objects. unlist FALSE, list nested sub-lists named grouped original input targets. unlist = TRUE, return value flat list targets named new target names. See \"Target objects\" section background.","code":""},{"path":"https://docs.ropensci.org/tarchetypes/reference/tar_map.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Static branching. — tar_map","text":"tar_map() creates collections new targets iterating list arguments substituting symbols commands pattern statements.","code":""},{"path":"https://docs.ropensci.org/tarchetypes/reference/tar_map.html","id":"target-objects","dir":"Reference","previous_headings":"","what":"Target objects","title":"Static branching. — tar_map","text":"tarchetypes functions target factories, means return target objects lists target objects. Target objects represent skippable steps analysis pipeline described https://books.ropensci.org/targets/. Please read walkthrough https://books.ropensci.org/targets/walkthrough.html understand role target objects analysis pipelines. developers, https://wlandau.github.io/targetopia/contributing.html#target-factories explains target factories (functions like one generate targets) design specification https://books.ropensci.org/targets-design/ details structure composition target objects.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/tarchetypes/reference/tar_map.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Static branching. — tar_map","text":"","code":"if (identical(Sys.getenv(\"TAR_LONG_EXAMPLES\"), \"true\")) { targets::tar_dir({ # tar_dir() runs code from a temporary directory. targets::tar_script({   list(     tarchetypes::tar_map(       list(a = c(12, 34), b = c(45, 78)),       targets::tar_target(x, a + b),       targets::tar_target(y, x + a, pattern = map(x))     )   ) }) targets::tar_manifest() }) }"},{"path":"https://docs.ropensci.org/tarchetypes/reference/tar_map2.html","id":null,"dir":"Reference","previous_headings":"","what":"Batched dynamic-within-static branching for data frames. — tar_map2","title":"Batched dynamic-within-static branching for data frames. — tar_map2","text":"Define targets batched dynamic-within-static branching data frames. user-side function. invoke directly.","code":""},{"path":"https://docs.ropensci.org/tarchetypes/reference/tar_map2.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Batched dynamic-within-static branching for data frames. — tar_map2","text":"","code":"tar_map2(   name,   command1,   command2,   values = NULL,   names = NULL,   descriptions = tidyselect::everything(),   group = rep(1L, nrow(as.data.frame(!!.x))),   combine = TRUE,   suffix1 = \"1\",   suffix2 = \"2\",   columns1 = tidyselect::everything(),   columns2 = tidyselect::everything(),   rep_workers = 1,   tidy_eval = targets::tar_option_get(\"tidy_eval\"),   packages = targets::tar_option_get(\"packages\"),   library = targets::tar_option_get(\"library\"),   format = targets::tar_option_get(\"format\"),   repository = targets::tar_option_get(\"repository\"),   error = targets::tar_option_get(\"error\"),   memory = targets::tar_option_get(\"memory\"),   garbage_collection = targets::tar_option_get(\"garbage_collection\"),   deployment = targets::tar_option_get(\"deployment\"),   priority = targets::tar_option_get(\"priority\"),   resources = targets::tar_option_get(\"resources\"),   storage = targets::tar_option_get(\"storage\"),   retrieval = targets::tar_option_get(\"retrieval\"),   cue = targets::tar_option_get(\"cue\"),   description = targets::tar_option_get(\"description\") )"},{"path":"https://docs.ropensci.org/tarchetypes/reference/tar_map2.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Batched dynamic-within-static branching for data frames. — tar_map2","text":"name Symbol, base name targets. command1 R code create named arguments command2. Must return data frame one row per call command2. command2 R code map data frame arguments produced command1. Must return data frame. values Named list data frame values iterate . names names symbols commands pattern statements, elements values get substituted place symbols. tar_map() uses elements create new R code, basic types, symbols, R expressions. objects even little bit complicated, especially objects attributes, obvious convert object code generates . complicated objects, consider using quote() define values, shown https://github.com/ropensci/tarchetypes/discussions/105. names Language object tidyselect expression select columns values use construct statically branched target names. NULL, short names automatically generated. descriptions Names column values append custom description generated target. value descriptions tidyselect expression call any_of() starts_with(). group Function data produced command1 create tar_group column determines batching structure command2 targets. combine Logical length 1, whether statically combine results single target downstream. suffix1 Character length 1, suffix apply command1 targets distinguish command2 targets. suffix2 Character length 1, suffix apply command2 targets distinguish command1 targets. columns1 tidyselect expression select columns values append output targets. Columns already target output appended. columns2 tidyselect expression select columns command1 output append command2 output. Columns already target output appended. columns1 takes precedence columns2. rep_workers Positive integer length 1, number local R processes use run reps within batches parallel. 1, reps run sequentially within batch. greater 1, reps within batch run parallel using PSOCK cluster. tidy_eval Whether invoke tidy evaluation (e.g. !! operator rlang) soon target defined (tar_make()). Applies command argument. packages Character vector packages load right target runs output data reloaded downstream targets. Use tar_option_set() set packages globally subsequent targets define. library Character vector library paths try loading packages. format Optional storage format target's return value. exception format = \"file\", target gets file _targets/objects, format different way save load file. See \"Storage formats\" section detailed list possible data storage formats. repository Character length 1, remote repository target storage. Choices: \"local\": file system local machine. \"aws\": Amazon Web Services (AWS) S3 bucket. Can configured non-AWS S3 bucket using endpoint argument tar_resources_aws(), versioning capabilities may lost . See cloud storage section https://books.ropensci.org/targets/data.html details instructions. \"gcp\": Google Cloud Platform storage bucket. See cloud storage section https://books.ropensci.org/targets/data.html details instructions. Note: repository \"local\" format \"file\" target create single output file. output file uploaded cloud tracked changes exists cloud. local file deleted target runs. error Character length 1, target stops throws error. Options: \"stop\": whole pipeline stops throws error. \"continue\": whole pipeline keeps going. \"abridge\": currently running targets keep running, new targets launch . (Visit https://books.ropensci.org/targets/debugging.html learn debug targets using saved workspaces.) \"null\": errored target continues returns NULL. data hash deliberately wrong target date next run pipeline. memory Character length 1, memory strategy. \"persistent\", target stays memory end pipeline (unless storage \"worker\", case targets unloads value memory right storing order avoid sending copious data network). \"transient\", target gets unloaded every new target completes. Either way, target gets automatically loaded memory whenever another target needs value. cloud-based dynamic files (e.g. format = \"file\" repository = \"aws\"), memory strategy applies temporary local copy file: \"persistent\" means remains end pipeline deleted, \"transient\" means gets deleted soon possible. former conserves bandwidth, latter conserves local storage. garbage_collection Logical, whether run base::gc() just target runs. deployment Character length 1. deployment \"main\", target run central controlling R process. Otherwise, deployment \"worker\" set pipeline distributed/parallel computing, target runs parallel worker. distributed/parallel computing targets, please visit https://books.ropensci.org/targets/crew.html. priority Numeric length 1 0 1. Controls targets get deployed first multiple competing targets ready simultaneously. Targets priorities closer 1 get dispatched earlier (polled earlier tar_make_future()). resources Object returned tar_resources() optional settings high-performance computing functionality, alternative data storage formats, optional capabilities targets. See tar_resources() details. storage Character length 1, relevant tar_make_clustermq() tar_make_future(). Must one following values: \"main\": target's return value sent back host machine saved/uploaded locally. \"worker\": worker saves/uploads value. \"none\": almost never recommended. niche situations, e.g. data needs loaded explicitly another language. use , return value target totally ignored target ends, downstream target still attempts load data file (except retrieval = \"none\"). select storage = \"none\", return value target's command ignored, data saved automatically. dynamic files (format = \"file\") responsibility user write data store inside target. distinguishing feature storage = \"none\" (opposed format = \"file\") general case, downstream targets automatically try load data data store dependency. corollary, storage = \"none\" completely unnecessary format \"file\". retrieval Character length 1, relevant tar_make_clustermq() tar_make_future(). Must one following values: \"main\": target's dependencies loaded host machine sent worker target runs. \"worker\": worker loads targets dependencies. \"none\": dependencies loaded . choice almost never recommended. niche situations, e.g. data needs loaded explicitly another language. cue optional object tar_cue() customize rules decide whether target date. description Character length 1, custom free-form human-readable text description target. Descriptions appear target labels functions like tar_manifest() tar_visnetwork(), let select subsets targets names argument functions like tar_make(). example, tar_manifest(names = tar_described_as(starts_with(\"survival model\"))) lists targets whose descriptions start character string \"survival model\".","code":""},{"path":"https://docs.ropensci.org/tarchetypes/reference/tar_map2.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Batched dynamic-within-static branching for data frames. — tar_map2","text":"list new target objects. See \"Target objects\" section background.","code":""},{"path":"https://docs.ropensci.org/tarchetypes/reference/tar_map2.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Batched dynamic-within-static branching for data frames. — tar_map2","text":"Static branching creates one pair targets row values. pair, upstream non-dynamic target runs command1 downstream dynamic target runs command2. command1 produces data frame arguments command2, command2 dynamically maps arguments batches. Static branching creates one pair targets row values. pair, upstream non-dynamic target runs command1 downstream dynamic target runs command2. command1 produces data frame arguments command2, command2 dynamically maps arguments batches.","code":""},{"path":"https://docs.ropensci.org/tarchetypes/reference/tar_map2.html","id":"replicate-specific-seeds","dir":"Reference","previous_headings":"","what":"Replicate-specific seeds","title":"Batched dynamic-within-static branching for data frames. — tar_map2","text":"ordinary pipelines, target unique deterministic pseudo-random number generator seed derived target name. batched replicate, however, batch target multiple replicate within batch. tar_rep() friends give replicate unique seed. replicate-specific seed created based dynamic parent target name, tar_option_get(\"seed\") (targets version 0.13.5.9000 ), batch index, rep-within-batch index. seed set just replicate runs. Replicate-specific seeds invariant batching structure. words, tar_rep(name = x, command = rnorm(1), batches = 100, reps = 1, ...) produces numerical output tar_rep(name = x, command = rnorm(1), batches = 10, reps = 10, ...) (different batch names). target factories seed scheme tar_rep2(), tar_map_rep(), tar_map2_count(), tar_map2_size(), tar_render_rep(). tar_map2_*() functions, possible manually supply seeds command1 argument invoke custom code command2 (set.seed(), withr::with_seed, withr::local_seed()). tar_render_rep(), custom seeds can supplied params argument invoked individual R Markdown reports. Likewise tar_quarto_rep() execute_params argument.","code":""},{"path":"https://docs.ropensci.org/tarchetypes/reference/tar_map2.html","id":"target-objects","dir":"Reference","previous_headings":"","what":"Target objects","title":"Batched dynamic-within-static branching for data frames. — tar_map2","text":"tarchetypes functions target factories, means return target objects lists target objects. Target objects represent skippable steps analysis pipeline described https://books.ropensci.org/targets/. Please read walkthrough https://books.ropensci.org/targets/walkthrough.html understand role target objects analysis pipelines. developers, https://wlandau.github.io/targetopia/contributing.html#target-factories explains target factories (functions like one generate targets) design specification https://books.ropensci.org/targets-design/ details structure composition target objects.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/tarchetypes/reference/tar_map2_count.html","id":null,"dir":"Reference","previous_headings":"","what":"Dynamic-within-static branching for data frames\n(count batching). — tar_map2_count","title":"Dynamic-within-static branching for data frames\n(count batching). — tar_map2_count","text":"Define targets batched dynamic-within-static branching data frames, user sets (maximum) number batches.","code":""},{"path":"https://docs.ropensci.org/tarchetypes/reference/tar_map2_count.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Dynamic-within-static branching for data frames\n(count batching). — tar_map2_count","text":"","code":"tar_map2_count(   name,   command1,   command2,   values = NULL,   names = NULL,   descriptions = tidyselect::everything(),   batches = 1L,   combine = TRUE,   suffix1 = \"1\",   suffix2 = \"2\",   columns1 = tidyselect::everything(),   columns2 = tidyselect::everything(),   rep_workers = 1,   tidy_eval = targets::tar_option_get(\"tidy_eval\"),   packages = targets::tar_option_get(\"packages\"),   library = targets::tar_option_get(\"library\"),   format = targets::tar_option_get(\"format\"),   repository = targets::tar_option_get(\"repository\"),   error = targets::tar_option_get(\"error\"),   memory = targets::tar_option_get(\"memory\"),   garbage_collection = targets::tar_option_get(\"garbage_collection\"),   deployment = targets::tar_option_get(\"deployment\"),   priority = targets::tar_option_get(\"priority\"),   resources = targets::tar_option_get(\"resources\"),   storage = targets::tar_option_get(\"storage\"),   retrieval = targets::tar_option_get(\"retrieval\"),   cue = targets::tar_option_get(\"cue\"),   description = targets::tar_option_get(\"description\") )"},{"path":"https://docs.ropensci.org/tarchetypes/reference/tar_map2_count.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Dynamic-within-static branching for data frames\n(count batching). — tar_map2_count","text":"name Symbol, name target. target name must valid name symbol R, must start dot. Subsequent targets can refer name symbolically induce dependency relationship: e.g. tar_target(downstream_target, f(upstream_target)) target named downstream_target depends target upstream_target function f(). addition, target's name determines random number generator seed. way, target runs reproducible seed someone else running pipeline get results, two targets pipeline share seed. (Even dynamic branches different names thus different seeds.) can recover seed completed target tar_meta(your_target, seed) run tar_seed_set() result locally recreate target's initial RNG state. command1 R code create named arguments command2. Must return data frame one row per call command2. command2 R code map data frame arguments produced command1. Must return data frame. values Named list data frame values iterate . names names symbols commands pattern statements, elements values get substituted place symbols. tar_map() uses elements create new R code, basic types, symbols, R expressions. objects even little bit complicated, especially objects attributes, obvious convert object code generates . complicated objects, consider using quote() define values, shown https://github.com/ropensci/tarchetypes/discussions/105. names Language object tidyselect expression select columns values use construct statically branched target names. NULL, short names automatically generated. descriptions Names column values append custom description generated target. value descriptions tidyselect expression call any_of() starts_with(). batches Number batches. also number dynamic branches created tar_make(). combine Logical length 1, whether statically combine results single target downstream. suffix1 Character length 1, suffix apply command1 targets distinguish command2 targets. suffix2 Character length 1, suffix apply command2 targets distinguish command1 targets. columns1 tidyselect expression select columns values append output targets. Columns already target output appended. columns2 tidyselect expression select columns command1 output append command2 output. Columns already target output appended. columns1 takes precedence columns2. rep_workers Positive integer length 1, number local R processes use run reps within batches parallel. 1, reps run sequentially within batch. greater 1, reps within batch run parallel using PSOCK cluster. tidy_eval Whether invoke tidy evaluation (e.g. !! operator rlang) soon target defined (tar_make()). Applies command argument. packages Character vector packages load right target runs output data reloaded downstream targets. Use tar_option_set() set packages globally subsequent targets define. library Character vector library paths try loading packages. format Optional storage format target's return value. exception format = \"file\", target gets file _targets/objects, format different way save load file. See \"Storage formats\" section detailed list possible data storage formats. repository Character length 1, remote repository target storage. Choices: \"local\": file system local machine. \"aws\": Amazon Web Services (AWS) S3 bucket. Can configured non-AWS S3 bucket using endpoint argument tar_resources_aws(), versioning capabilities may lost . See cloud storage section https://books.ropensci.org/targets/data.html details instructions. \"gcp\": Google Cloud Platform storage bucket. See cloud storage section https://books.ropensci.org/targets/data.html details instructions. Note: repository \"local\" format \"file\" target create single output file. output file uploaded cloud tracked changes exists cloud. local file deleted target runs. error Character length 1, target stops throws error. Options: \"stop\": whole pipeline stops throws error. \"continue\": whole pipeline keeps going. \"abridge\": currently running targets keep running, new targets launch . (Visit https://books.ropensci.org/targets/debugging.html learn debug targets using saved workspaces.) \"null\": errored target continues returns NULL. data hash deliberately wrong target date next run pipeline. memory Character length 1, memory strategy. \"persistent\", target stays memory end pipeline (unless storage \"worker\", case targets unloads value memory right storing order avoid sending copious data network). \"transient\", target gets unloaded every new target completes. Either way, target gets automatically loaded memory whenever another target needs value. cloud-based dynamic files (e.g. format = \"file\" repository = \"aws\"), memory strategy applies temporary local copy file: \"persistent\" means remains end pipeline deleted, \"transient\" means gets deleted soon possible. former conserves bandwidth, latter conserves local storage. garbage_collection Logical, whether run base::gc() just target runs. deployment Character length 1. deployment \"main\", target run central controlling R process. Otherwise, deployment \"worker\" set pipeline distributed/parallel computing, target runs parallel worker. distributed/parallel computing targets, please visit https://books.ropensci.org/targets/crew.html. priority Numeric length 1 0 1. Controls targets get deployed first multiple competing targets ready simultaneously. Targets priorities closer 1 get dispatched earlier (polled earlier tar_make_future()). resources Object returned tar_resources() optional settings high-performance computing functionality, alternative data storage formats, optional capabilities targets. See tar_resources() details. storage Character length 1, relevant tar_make_clustermq() tar_make_future(). Must one following values: \"main\": target's return value sent back host machine saved/uploaded locally. \"worker\": worker saves/uploads value. \"none\": almost never recommended. niche situations, e.g. data needs loaded explicitly another language. use , return value target totally ignored target ends, downstream target still attempts load data file (except retrieval = \"none\"). select storage = \"none\", return value target's command ignored, data saved automatically. dynamic files (format = \"file\") responsibility user write data store inside target. distinguishing feature storage = \"none\" (opposed format = \"file\") general case, downstream targets automatically try load data data store dependency. corollary, storage = \"none\" completely unnecessary format \"file\". retrieval Character length 1, relevant tar_make_clustermq() tar_make_future(). Must one following values: \"main\": target's dependencies loaded host machine sent worker target runs. \"worker\": worker loads targets dependencies. \"none\": dependencies loaded . choice almost never recommended. niche situations, e.g. data needs loaded explicitly another language. cue optional object tar_cue() customize rules decide whether target date. description Character length 1, custom free-form human-readable text description target. Descriptions appear target labels functions like tar_manifest() tar_visnetwork(), let select subsets targets names argument functions like tar_make(). example, tar_manifest(names = tar_described_as(starts_with(\"survival model\"))) lists targets whose descriptions start character string \"survival model\".","code":""},{"path":"https://docs.ropensci.org/tarchetypes/reference/tar_map2_count.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Dynamic-within-static branching for data frames\n(count batching). — tar_map2_count","text":"list new target objects. See \"Target objects\" section background.","code":""},{"path":"https://docs.ropensci.org/tarchetypes/reference/tar_map2_count.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Dynamic-within-static branching for data frames\n(count batching). — tar_map2_count","text":"Static branching creates one pair targets row values. pair, upstream non-dynamic target runs command1 downstream dynamic target runs command2. command1 produces data frame arguments command2, command2 dynamically maps arguments batches.","code":""},{"path":"https://docs.ropensci.org/tarchetypes/reference/tar_map2_count.html","id":"target-objects","dir":"Reference","previous_headings":"","what":"Target objects","title":"Dynamic-within-static branching for data frames\n(count batching). — tar_map2_count","text":"tarchetypes functions target factories, means return target objects lists target objects. Target objects represent skippable steps analysis pipeline described https://books.ropensci.org/targets/. Please read walkthrough https://books.ropensci.org/targets/walkthrough.html understand role target objects analysis pipelines. developers, https://wlandau.github.io/targetopia/contributing.html#target-factories explains target factories (functions like one generate targets) design specification https://books.ropensci.org/targets-design/ details structure composition target objects.","code":""},{"path":"https://docs.ropensci.org/tarchetypes/reference/tar_map2_count.html","id":"replicate-specific-seeds","dir":"Reference","previous_headings":"","what":"Replicate-specific seeds","title":"Dynamic-within-static branching for data frames\n(count batching). — tar_map2_count","text":"ordinary pipelines, target unique deterministic pseudo-random number generator seed derived target name. batched replicate, however, batch target multiple replicate within batch. tar_rep() friends give replicate unique seed. replicate-specific seed created based dynamic parent target name, tar_option_get(\"seed\") (targets version 0.13.5.9000 ), batch index, rep-within-batch index. seed set just replicate runs. Replicate-specific seeds invariant batching structure. words, tar_rep(name = x, command = rnorm(1), batches = 100, reps = 1, ...) produces numerical output tar_rep(name = x, command = rnorm(1), batches = 10, reps = 10, ...) (different batch names). target factories seed scheme tar_rep2(), tar_map_rep(), tar_map2_count(), tar_map2_size(), tar_render_rep(). tar_map2_*() functions, possible manually supply seeds command1 argument invoke custom code command2 (set.seed(), withr::with_seed, withr::local_seed()). tar_render_rep(), custom seeds can supplied params argument invoked individual R Markdown reports. Likewise tar_quarto_rep() execute_params argument.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/tarchetypes/reference/tar_map2_count.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Dynamic-within-static branching for data frames\n(count batching). — tar_map2_count","text":"","code":"if (identical(Sys.getenv(\"TAR_LONG_EXAMPLES\"), \"true\")) { targets::tar_dir({ # tar_dir() runs code from a temporary directory. targets::tar_script({   tarchetypes::tar_map2_count(     x,     command1 = tibble::tibble(       arg1 = arg1,       arg2 = seq_len(6)      ),     command2 = tibble::tibble(       result = paste(arg1, arg2),       random = sample.int(1e9, size = 1),       length_input = length(arg1)     ),     values = tibble::tibble(arg1 = letters[seq_len(2)]),     batches = 3    ) }) targets::tar_make() targets::tar_read(x) }) }"},{"path":"https://docs.ropensci.org/tarchetypes/reference/tar_map2_count_raw.html","id":null,"dir":"Reference","previous_headings":"","what":"Dynamic-within-static branching for data frames\n(count batching; raw version). — tar_map2_count_raw","title":"Dynamic-within-static branching for data frames\n(count batching; raw version). — tar_map2_count_raw","text":"Define targets batched dynamic-within-static branching data frames, user sets (maximum) number batches. Like tar_map2_count() except name character string command1, command2, names, columns1, columns2 language objects.","code":""},{"path":"https://docs.ropensci.org/tarchetypes/reference/tar_map2_count_raw.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Dynamic-within-static branching for data frames\n(count batching; raw version). — tar_map2_count_raw","text":"","code":"tar_map2_count_raw(   name,   command1,   command2,   values = NULL,   names = NULL,   descriptions = quote(tidyselect::everything()),   batches = 1L,   combine = TRUE,   suffix1 = \"1\",   suffix2 = \"2\",   rep_workers = 1,   columns1 = quote(tidyselect::everything()),   columns2 = quote(tidyselect::everything()),   tidy_eval = targets::tar_option_get(\"tidy_eval\"),   packages = targets::tar_option_get(\"packages\"),   library = targets::tar_option_get(\"library\"),   format = targets::tar_option_get(\"format\"),   repository = targets::tar_option_get(\"repository\"),   error = targets::tar_option_get(\"error\"),   memory = targets::tar_option_get(\"memory\"),   garbage_collection = targets::tar_option_get(\"garbage_collection\"),   deployment = targets::tar_option_get(\"deployment\"),   priority = targets::tar_option_get(\"priority\"),   resources = targets::tar_option_get(\"resources\"),   storage = targets::tar_option_get(\"storage\"),   retrieval = targets::tar_option_get(\"retrieval\"),   cue = targets::tar_option_get(\"cue\"),   description = targets::tar_option_get(\"description\") )"},{"path":"https://docs.ropensci.org/tarchetypes/reference/tar_map2_count_raw.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Dynamic-within-static branching for data frames\n(count batching; raw version). — tar_map2_count_raw","text":"name Symbol, name target. target name must valid name symbol R, must start dot. Subsequent targets can refer name symbolically induce dependency relationship: e.g. tar_target(downstream_target, f(upstream_target)) target named downstream_target depends target upstream_target function f(). addition, target's name determines random number generator seed. way, target runs reproducible seed someone else running pipeline get results, two targets pipeline share seed. (Even dynamic branches different names thus different seeds.) can recover seed completed target tar_meta(your_target, seed) run tar_seed_set() result locally recreate target's initial RNG state. command1 Language object create named arguments command2. Must return data frame one row per call command2. command2 Language object  map data frame arguments produced command1. Must return data frame. values Named list data frame values iterate . names names symbols commands pattern statements, elements values get substituted place symbols. tar_map() uses elements create new R code, basic types, symbols, R expressions. objects even little bit complicated, especially objects attributes, obvious convert object code generates . complicated objects, consider using quote() define values, shown https://github.com/ropensci/tarchetypes/discussions/105. names Language object tidyselect expression select columns values use construct statically branched target names. NULL, short names automatically generated. descriptions Names column values append custom description generated target. value descriptions tidyselect expression call any_of() starts_with(). batches Positive integer length 1, maximum number batches (dynamic branches within static branches) downstream (command2) targets. Batches formed row groups command1 target output. combine Logical length 1, whether statically combine results single target downstream. suffix1 Character length 1, suffix apply command1 targets distinguish command2 targets. suffix2 Character length 1, suffix apply command2 targets distinguish command1 targets. rep_workers Positive integer length 1, number local R processes use run reps within batches parallel. 1, reps run sequentially within batch. greater 1, reps within batch run parallel using PSOCK cluster. columns1 Language object, tidyselect expression select columns values append output targets. columns2 Language object, tidyselect expression select columns command1 output append command2 output. case conflicts, column1 takes precedence. tidy_eval Whether invoke tidy evaluation (e.g. !! operator rlang) soon target defined (tar_make()). Applies command argument. packages Character vector packages load right target runs output data reloaded downstream targets. Use tar_option_set() set packages globally subsequent targets define. library Character vector library paths try loading packages. format Optional storage format target's return value. exception format = \"file\", target gets file _targets/objects, format different way save load file. See \"Storage formats\" section detailed list possible data storage formats. repository Character length 1, remote repository target storage. Choices: \"local\": file system local machine. \"aws\": Amazon Web Services (AWS) S3 bucket. Can configured non-AWS S3 bucket using endpoint argument tar_resources_aws(), versioning capabilities may lost . See cloud storage section https://books.ropensci.org/targets/data.html details instructions. \"gcp\": Google Cloud Platform storage bucket. See cloud storage section https://books.ropensci.org/targets/data.html details instructions. Note: repository \"local\" format \"file\" target create single output file. output file uploaded cloud tracked changes exists cloud. local file deleted target runs. error Character length 1, target stops throws error. Options: \"stop\": whole pipeline stops throws error. \"continue\": whole pipeline keeps going. \"abridge\": currently running targets keep running, new targets launch . (Visit https://books.ropensci.org/targets/debugging.html learn debug targets using saved workspaces.) \"null\": errored target continues returns NULL. data hash deliberately wrong target date next run pipeline. memory Character length 1, memory strategy. \"persistent\", target stays memory end pipeline (unless storage \"worker\", case targets unloads value memory right storing order avoid sending copious data network). \"transient\", target gets unloaded every new target completes. Either way, target gets automatically loaded memory whenever another target needs value. cloud-based dynamic files (e.g. format = \"file\" repository = \"aws\"), memory strategy applies temporary local copy file: \"persistent\" means remains end pipeline deleted, \"transient\" means gets deleted soon possible. former conserves bandwidth, latter conserves local storage. garbage_collection Logical, whether run base::gc() just target runs. deployment Character length 1. deployment \"main\", target run central controlling R process. Otherwise, deployment \"worker\" set pipeline distributed/parallel computing, target runs parallel worker. distributed/parallel computing targets, please visit https://books.ropensci.org/targets/crew.html. priority Numeric length 1 0 1. Controls targets get deployed first multiple competing targets ready simultaneously. Targets priorities closer 1 get dispatched earlier (polled earlier tar_make_future()). resources Object returned tar_resources() optional settings high-performance computing functionality, alternative data storage formats, optional capabilities targets. See tar_resources() details. storage Character length 1, relevant tar_make_clustermq() tar_make_future(). Must one following values: \"main\": target's return value sent back host machine saved/uploaded locally. \"worker\": worker saves/uploads value. \"none\": almost never recommended. niche situations, e.g. data needs loaded explicitly another language. use , return value target totally ignored target ends, downstream target still attempts load data file (except retrieval = \"none\"). select storage = \"none\", return value target's command ignored, data saved automatically. dynamic files (format = \"file\") responsibility user write data store inside target. distinguishing feature storage = \"none\" (opposed format = \"file\") general case, downstream targets automatically try load data data store dependency. corollary, storage = \"none\" completely unnecessary format \"file\". retrieval Character length 1, relevant tar_make_clustermq() tar_make_future(). Must one following values: \"main\": target's dependencies loaded host machine sent worker target runs. \"worker\": worker loads targets dependencies. \"none\": dependencies loaded . choice almost never recommended. niche situations, e.g. data needs loaded explicitly another language. cue optional object tar_cue() customize rules decide whether target date. description Character length 1, custom free-form human-readable text description target. Descriptions appear target labels functions like tar_manifest() tar_visnetwork(), let select subsets targets names argument functions like tar_make(). example, tar_manifest(names = tar_described_as(starts_with(\"survival model\"))) lists targets whose descriptions start character string \"survival model\".","code":""},{"path":"https://docs.ropensci.org/tarchetypes/reference/tar_map2_count_raw.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Dynamic-within-static branching for data frames\n(count batching; raw version). — tar_map2_count_raw","text":"list new target objects. See \"Target objects\" section background.","code":""},{"path":"https://docs.ropensci.org/tarchetypes/reference/tar_map2_count_raw.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Dynamic-within-static branching for data frames\n(count batching; raw version). — tar_map2_count_raw","text":"Static branching creates one pair targets row values. pair, upstream non-dynamic target runs command1 downstream dynamic target runs command2. command1 produces data frame arguments command2, command2 dynamically maps arguments batches.","code":""},{"path":"https://docs.ropensci.org/tarchetypes/reference/tar_map2_count_raw.html","id":"target-objects","dir":"Reference","previous_headings":"","what":"Target objects","title":"Dynamic-within-static branching for data frames\n(count batching; raw version). — tar_map2_count_raw","text":"tarchetypes functions target factories, means return target objects lists target objects. Target objects represent skippable steps analysis pipeline described https://books.ropensci.org/targets/. Please read walkthrough https://books.ropensci.org/targets/walkthrough.html understand role target objects analysis pipelines. developers, https://wlandau.github.io/targetopia/contributing.html#target-factories explains target factories (functions like one generate targets) design specification https://books.ropensci.org/targets-design/ details structure composition target objects.","code":""},{"path":"https://docs.ropensci.org/tarchetypes/reference/tar_map2_count_raw.html","id":"replicate-specific-seeds","dir":"Reference","previous_headings":"","what":"Replicate-specific seeds","title":"Dynamic-within-static branching for data frames\n(count batching; raw version). — tar_map2_count_raw","text":"ordinary pipelines, target unique deterministic pseudo-random number generator seed derived target name. batched replicate, however, batch target multiple replicate within batch. tar_rep() friends give replicate unique seed. replicate-specific seed created based dynamic parent target name, tar_option_get(\"seed\") (targets version 0.13.5.9000 ), batch index, rep-within-batch index. seed set just replicate runs. Replicate-specific seeds invariant batching structure. words, tar_rep(name = x, command = rnorm(1), batches = 100, reps = 1, ...) produces numerical output tar_rep(name = x, command = rnorm(1), batches = 10, reps = 10, ...) (different batch names). target factories seed scheme tar_rep2(), tar_map_rep(), tar_map2_count(), tar_map2_size(), tar_render_rep(). tar_map2_*() functions, possible manually supply seeds command1 argument invoke custom code command2 (set.seed(), withr::with_seed, withr::local_seed()). tar_render_rep(), custom seeds can supplied params argument invoked individual R Markdown reports. Likewise tar_quarto_rep() execute_params argument.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/tarchetypes/reference/tar_map2_count_raw.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Dynamic-within-static branching for data frames\n(count batching; raw version). — tar_map2_count_raw","text":"","code":"if (identical(Sys.getenv(\"TAR_LONG_EXAMPLES\"), \"true\")) { targets::tar_dir({ # tar_dir() runs code from a temporary directory. targets::tar_script({   tarchetypes::tar_map2_count_raw(     \"x\",     command1 = quote(       tibble::tibble(         arg1 = arg1,         arg2 = seq_len(6)        )     ),     command2 = quote(       tibble::tibble(         result = paste(arg1, arg2),         random = sample.int(1e6, size = 1),         length_input = length(arg1)       )     ),     values = tibble::tibble(arg1 = letters[seq_len(2)]),     batches = 3    ) }) targets::tar_make() targets::tar_read(x) }) }"},{"path":"https://docs.ropensci.org/tarchetypes/reference/tar_map2_group.html","id":null,"dir":"Reference","previous_headings":"","what":"Append the tar_group variable to a tar_map2() target. — tar_map2_group","title":"Append the tar_group variable to a tar_map2() target. — tar_map2_group","text":"Append tar_group variable tar_map2() target.","code":""},{"path":"https://docs.ropensci.org/tarchetypes/reference/tar_map2_group.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Append the tar_group variable to a tar_map2() target. — tar_map2_group","text":"","code":"tar_map2_group(data, group)"},{"path":"https://docs.ropensci.org/tarchetypes/reference/tar_map2_group.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Append the tar_group variable to a tar_map2() target. — tar_map2_group","text":"data Data frame returned target. group Function data return tar_group column. group NULL, tar_group column attached.","code":""},{"path":"https://docs.ropensci.org/tarchetypes/reference/tar_map2_group.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Append the tar_group variable to a tar_map2() target. — tar_map2_group","text":"data frame tar_group column attached (group NULL).","code":""},{"path":"https://docs.ropensci.org/tarchetypes/reference/tar_map2_group.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Append the tar_group variable to a tar_map2() target. — tar_map2_group","text":"internal use . Users invoke function directly.","code":""},{"path":"https://docs.ropensci.org/tarchetypes/reference/tar_map2_raw.html","id":null,"dir":"Reference","previous_headings":"","what":"Batched dynamic-within-static branching for data frames (raw version). — tar_map2_raw","title":"Batched dynamic-within-static branching for data frames (raw version). — tar_map2_raw","text":"Define targets batched dynamic-within-static branching data frames (raw version). user-side function. invoke directly.","code":""},{"path":"https://docs.ropensci.org/tarchetypes/reference/tar_map2_raw.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Batched dynamic-within-static branching for data frames (raw version). — tar_map2_raw","text":"","code":"tar_map2_raw(   name,   command1,   command2,   values = NULL,   names = NULL,   descriptions = quote(tidyselect::everything()),   group = quote(rep(1L, nrow(as.data.frame(!!.x)))),   combine = TRUE,   columns1 = quote(tidyselect::everything()),   columns2 = quote(tidyselect::everything()),   suffix1 = \"1\",   suffix2 = \"2\",   rep_workers = 1,   tidy_eval = targets::tar_option_get(\"tidy_eval\"),   packages = targets::tar_option_get(\"packages\"),   library = targets::tar_option_get(\"library\"),   format = targets::tar_option_get(\"format\"),   repository = targets::tar_option_get(\"repository\"),   error = targets::tar_option_get(\"error\"),   memory = targets::tar_option_get(\"memory\"),   garbage_collection = targets::tar_option_get(\"garbage_collection\"),   deployment = targets::tar_option_get(\"deployment\"),   priority = targets::tar_option_get(\"priority\"),   resources = targets::tar_option_get(\"resources\"),   storage = targets::tar_option_get(\"storage\"),   retrieval = targets::tar_option_get(\"retrieval\"),   cue = targets::tar_option_get(\"cue\"),   description = targets::tar_option_get(\"description\") )"},{"path":"https://docs.ropensci.org/tarchetypes/reference/tar_map2_raw.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Batched dynamic-within-static branching for data frames (raw version). — tar_map2_raw","text":"name Character length 1, base name targets. command1 Language object create named arguments command2. Must return data frame one row per call command2. command2 Language object  map data frame arguments produced command1. Must return data frame. values Named list data frame values iterate . names names symbols commands pattern statements, elements values get substituted place symbols. tar_map() uses elements create new R code, basic types, symbols, R expressions. objects even little bit complicated, especially objects attributes, obvious convert object code generates . complicated objects, consider using quote() define values, shown https://github.com/ropensci/tarchetypes/discussions/105. names Language object tidyselect expression select columns values use construct statically branched target names. NULL, short names automatically generated. descriptions Names column values append custom description generated target. value descriptions tidyselect expression call any_of() starts_with(). group Function data produced command1 create tar_group column determines batching structure command2 targets. combine Logical length 1, whether statically combine results single target downstream. columns1 Language object, tidyselect expression select columns values append output targets. columns2 Language object, tidyselect expression select columns command1 output append command2 output. case conflicts, column1 takes precedence. suffix1 Character length 1, suffix apply command1 targets distinguish command2 targets. suffix2 Character length 1, suffix apply command2 targets distinguish command1 targets. rep_workers Positive integer length 1, number local R processes use run reps within batches parallel. 1, reps run sequentially within batch. greater 1, reps within batch run parallel using PSOCK cluster. tidy_eval Whether invoke tidy evaluation (e.g. !! operator rlang) soon target defined (tar_make()). Applies command argument. packages Character vector packages load right target runs output data reloaded downstream targets. Use tar_option_set() set packages globally subsequent targets define. library Character vector library paths try loading packages. format Optional storage format target's return value. exception format = \"file\", target gets file _targets/objects, format different way save load file. See \"Storage formats\" section detailed list possible data storage formats. repository Character length 1, remote repository target storage. Choices: \"local\": file system local machine. \"aws\": Amazon Web Services (AWS) S3 bucket. Can configured non-AWS S3 bucket using endpoint argument tar_resources_aws(), versioning capabilities may lost . See cloud storage section https://books.ropensci.org/targets/data.html details instructions. \"gcp\": Google Cloud Platform storage bucket. See cloud storage section https://books.ropensci.org/targets/data.html details instructions. Note: repository \"local\" format \"file\" target create single output file. output file uploaded cloud tracked changes exists cloud. local file deleted target runs. error Character length 1, target stops throws error. Options: \"stop\": whole pipeline stops throws error. \"continue\": whole pipeline keeps going. \"abridge\": currently running targets keep running, new targets launch . (Visit https://books.ropensci.org/targets/debugging.html learn debug targets using saved workspaces.) \"null\": errored target continues returns NULL. data hash deliberately wrong target date next run pipeline. memory Character length 1, memory strategy. \"persistent\", target stays memory end pipeline (unless storage \"worker\", case targets unloads value memory right storing order avoid sending copious data network). \"transient\", target gets unloaded every new target completes. Either way, target gets automatically loaded memory whenever another target needs value. cloud-based dynamic files (e.g. format = \"file\" repository = \"aws\"), memory strategy applies temporary local copy file: \"persistent\" means remains end pipeline deleted, \"transient\" means gets deleted soon possible. former conserves bandwidth, latter conserves local storage. garbage_collection Logical, whether run base::gc() just target runs. deployment Character length 1. deployment \"main\", target run central controlling R process. Otherwise, deployment \"worker\" set pipeline distributed/parallel computing, target runs parallel worker. distributed/parallel computing targets, please visit https://books.ropensci.org/targets/crew.html. priority Numeric length 1 0 1. Controls targets get deployed first multiple competing targets ready simultaneously. Targets priorities closer 1 get dispatched earlier (polled earlier tar_make_future()). resources Object returned tar_resources() optional settings high-performance computing functionality, alternative data storage formats, optional capabilities targets. See tar_resources() details. storage Character length 1, relevant tar_make_clustermq() tar_make_future(). Must one following values: \"main\": target's return value sent back host machine saved/uploaded locally. \"worker\": worker saves/uploads value. \"none\": almost never recommended. niche situations, e.g. data needs loaded explicitly another language. use , return value target totally ignored target ends, downstream target still attempts load data file (except retrieval = \"none\"). select storage = \"none\", return value target's command ignored, data saved automatically. dynamic files (format = \"file\") responsibility user write data store inside target. distinguishing feature storage = \"none\" (opposed format = \"file\") general case, downstream targets automatically try load data data store dependency. corollary, storage = \"none\" completely unnecessary format \"file\". retrieval Character length 1, relevant tar_make_clustermq() tar_make_future(). Must one following values: \"main\": target's dependencies loaded host machine sent worker target runs. \"worker\": worker loads targets dependencies. \"none\": dependencies loaded . choice almost never recommended. niche situations, e.g. data needs loaded explicitly another language. cue optional object tar_cue() customize rules decide whether target date. description Character length 1, custom free-form human-readable text description target. Descriptions appear target labels functions like tar_manifest() tar_visnetwork(), let select subsets targets names argument functions like tar_make(). example, tar_manifest(names = tar_described_as(starts_with(\"survival model\"))) lists targets whose descriptions start character string \"survival model\".","code":""},{"path":"https://docs.ropensci.org/tarchetypes/reference/tar_map2_raw.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Batched dynamic-within-static branching for data frames (raw version). — tar_map2_raw","text":"list new target objects. See \"Target objects\" section background.","code":""},{"path":"https://docs.ropensci.org/tarchetypes/reference/tar_map2_raw.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Batched dynamic-within-static branching for data frames (raw version). — tar_map2_raw","text":"Like tar_map2() except name character string command1, command2, group, names, columns1, columns2 language objects.","code":""},{"path":"https://docs.ropensci.org/tarchetypes/reference/tar_map2_raw.html","id":"target-objects","dir":"Reference","previous_headings":"","what":"Target objects","title":"Batched dynamic-within-static branching for data frames (raw version). — tar_map2_raw","text":"tarchetypes functions target factories, means return target objects lists target objects. Target objects represent skippable steps analysis pipeline described https://books.ropensci.org/targets/. Please read walkthrough https://books.ropensci.org/targets/walkthrough.html understand role target objects analysis pipelines. developers, https://wlandau.github.io/targetopia/contributing.html#target-factories explains target factories (functions like one generate targets) design specification https://books.ropensci.org/targets-design/ details structure composition target objects.","code":""},{"path":"https://docs.ropensci.org/tarchetypes/reference/tar_map2_raw.html","id":"replicate-specific-seeds","dir":"Reference","previous_headings":"","what":"Replicate-specific seeds","title":"Batched dynamic-within-static branching for data frames (raw version). — tar_map2_raw","text":"ordinary pipelines, target unique deterministic pseudo-random number generator seed derived target name. batched replicate, however, batch target multiple replicate within batch. tar_rep() friends give replicate unique seed. replicate-specific seed created based dynamic parent target name, tar_option_get(\"seed\") (targets version 0.13.5.9000 ), batch index, rep-within-batch index. seed set just replicate runs. Replicate-specific seeds invariant batching structure. words, tar_rep(name = x, command = rnorm(1), batches = 100, reps = 1, ...) produces numerical output tar_rep(name = x, command = rnorm(1), batches = 10, reps = 10, ...) (different batch names). target factories seed scheme tar_rep2(), tar_map_rep(), tar_map2_count(), tar_map2_size(), tar_render_rep(). tar_map2_*() functions, possible manually supply seeds command1 argument invoke custom code command2 (set.seed(), withr::with_seed, withr::local_seed()). tar_render_rep(), custom seeds can supplied params argument invoked individual R Markdown reports. Likewise tar_quarto_rep() execute_params argument.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/tarchetypes/reference/tar_map2_run.html","id":null,"dir":"Reference","previous_headings":"","what":"Run a dynamic batch of a tar_map2() target. — tar_map2_run","title":"Run a dynamic batch of a tar_map2() target. — tar_map2_run","text":"Run dynamic batch tar_map2() target.","code":""},{"path":"https://docs.ropensci.org/tarchetypes/reference/tar_map2_run.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run a dynamic batch of a tar_map2() target. — tar_map2_run","text":"","code":"tar_map2_run(command, values, columns, rep_workers)"},{"path":"https://docs.ropensci.org/tarchetypes/reference/tar_map2_run.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Run a dynamic batch of a tar_map2() target. — tar_map2_run","text":"command Command run. values Data frame named arguments produced command1 command2 dynamically maps . Different values argument tar_map2(). columns tidyselect expression select columns values append result. rep_workers Positive integer length 1, number local R processes use run reps within batches parallel. 1, reps run sequentially within batch. greater 1, reps within batch run parallel using PSOCK cluster.","code":""},{"path":"https://docs.ropensci.org/tarchetypes/reference/tar_map2_run.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Run a dynamic batch of a tar_map2() target. — tar_map2_run","text":"data frame tar_group column attached (group NULL).","code":""},{"path":"https://docs.ropensci.org/tarchetypes/reference/tar_map2_run.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Run a dynamic batch of a tar_map2() target. — tar_map2_run","text":"internal use . Users invoke function directly.","code":""},{"path":"https://docs.ropensci.org/tarchetypes/reference/tar_map2_run_rep.html","id":null,"dir":"Reference","previous_headings":"","what":"Run a rep in a tar_map2()-powered function. — tar_map2_run_rep","title":"Run a rep in a tar_map2()-powered function. — tar_map2_run_rep","text":"user-side function. invoke directly.","code":""},{"path":"https://docs.ropensci.org/tarchetypes/reference/tar_map2_run_rep.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run a rep in a tar_map2()-powered function. — tar_map2_run_rep","text":"","code":"tar_map2_run_rep(rep, values, command, batch, seeds, columns, envir)"},{"path":"https://docs.ropensci.org/tarchetypes/reference/tar_map2_run_rep.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Run a rep in a tar_map2()-powered function. — tar_map2_run_rep","text":"rep Rep number. values Data frame mapped-values. command R command run. batch Batch number. seeds Random number generator seeds batch. columns Expression appending static columns. envir Environment target.","code":""},{"path":"https://docs.ropensci.org/tarchetypes/reference/tar_map2_run_rep.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Run a rep in a tar_map2()-powered function. — tar_map2_run_rep","text":"result running expr.","code":""},{"path":"https://docs.ropensci.org/tarchetypes/reference/tar_map2_run_rep.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Run a rep in a tar_map2()-powered function. — tar_map2_run_rep","text":"","code":"# See the examples of tar_map2_count()."},{"path":"https://docs.ropensci.org/tarchetypes/reference/tar_map2_size.html","id":null,"dir":"Reference","previous_headings":"","what":"Dynamic-within-static branching for data frames\n(size batching). — tar_map2_size","title":"Dynamic-within-static branching for data frames\n(size batching). — tar_map2_size","text":"Define targets batched dynamic-within-static branching data frames, user sets (maximum) size batch.","code":""},{"path":"https://docs.ropensci.org/tarchetypes/reference/tar_map2_size.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Dynamic-within-static branching for data frames\n(size batching). — tar_map2_size","text":"","code":"tar_map2_size(   name,   command1,   command2,   values = NULL,   names = NULL,   descriptions = tidyselect::everything(),   size = Inf,   combine = TRUE,   suffix1 = \"1\",   suffix2 = \"2\",   columns1 = tidyselect::everything(),   columns2 = tidyselect::everything(),   rep_workers = 1,   tidy_eval = targets::tar_option_get(\"tidy_eval\"),   packages = targets::tar_option_get(\"packages\"),   library = targets::tar_option_get(\"library\"),   format = targets::tar_option_get(\"format\"),   repository = targets::tar_option_get(\"repository\"),   error = targets::tar_option_get(\"error\"),   memory = targets::tar_option_get(\"memory\"),   garbage_collection = targets::tar_option_get(\"garbage_collection\"),   deployment = targets::tar_option_get(\"deployment\"),   priority = targets::tar_option_get(\"priority\"),   resources = targets::tar_option_get(\"resources\"),   storage = targets::tar_option_get(\"storage\"),   retrieval = targets::tar_option_get(\"retrieval\"),   cue = targets::tar_option_get(\"cue\"),   description = targets::tar_option_get(\"description\") )"},{"path":"https://docs.ropensci.org/tarchetypes/reference/tar_map2_size.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Dynamic-within-static branching for data frames\n(size batching). — tar_map2_size","text":"name Symbol, name target. target name must valid name symbol R, must start dot. Subsequent targets can refer name symbolically induce dependency relationship: e.g. tar_target(downstream_target, f(upstream_target)) target named downstream_target depends target upstream_target function f(). addition, target's name determines random number generator seed. way, target runs reproducible seed someone else running pipeline get results, two targets pipeline share seed. (Even dynamic branches different names thus different seeds.) can recover seed completed target tar_meta(your_target, seed) run tar_seed_set() result locally recreate target's initial RNG state. command1 R code create named arguments command2. Must return data frame one row per call command2. command2 R code map data frame arguments produced command1. Must return data frame. values Named list data frame values iterate . names names symbols commands pattern statements, elements values get substituted place symbols. tar_map() uses elements create new R code, basic types, symbols, R expressions. objects even little bit complicated, especially objects attributes, obvious convert object code generates . complicated objects, consider using quote() define values, shown https://github.com/ropensci/tarchetypes/discussions/105. names Language object tidyselect expression select columns values use construct statically branched target names. NULL, short names automatically generated. descriptions Names column values append custom description generated target. value descriptions tidyselect expression call any_of() starts_with(). size Positive integer length 1, maximum number rows batch downstream (command2) targets. Batches formed row groups command1 target output. combine Logical length 1, whether statically combine results single target downstream. suffix1 Character length 1, suffix apply command1 targets distinguish command2 targets. suffix2 Character length 1, suffix apply command2 targets distinguish command1 targets. columns1 tidyselect expression select columns values append output targets. Columns already target output appended. columns2 tidyselect expression select columns command1 output append command2 output. Columns already target output appended. columns1 takes precedence columns2. rep_workers Positive integer length 1, number local R processes use run reps within batches parallel. 1, reps run sequentially within batch. greater 1, reps within batch run parallel using PSOCK cluster. tidy_eval Whether invoke tidy evaluation (e.g. !! operator rlang) soon target defined (tar_make()). Applies command argument. packages Character vector packages load right target runs output data reloaded downstream targets. Use tar_option_set() set packages globally subsequent targets define. library Character vector library paths try loading packages. format Optional storage format target's return value. exception format = \"file\", target gets file _targets/objects, format different way save load file. See \"Storage formats\" section detailed list possible data storage formats. repository Character length 1, remote repository target storage. Choices: \"local\": file system local machine. \"aws\": Amazon Web Services (AWS) S3 bucket. Can configured non-AWS S3 bucket using endpoint argument tar_resources_aws(), versioning capabilities may lost . See cloud storage section https://books.ropensci.org/targets/data.html details instructions. \"gcp\": Google Cloud Platform storage bucket. See cloud storage section https://books.ropensci.org/targets/data.html details instructions. Note: repository \"local\" format \"file\" target create single output file. output file uploaded cloud tracked changes exists cloud. local file deleted target runs. error Character length 1, target stops throws error. Options: \"stop\": whole pipeline stops throws error. \"continue\": whole pipeline keeps going. \"abridge\": currently running targets keep running, new targets launch . (Visit https://books.ropensci.org/targets/debugging.html learn debug targets using saved workspaces.) \"null\": errored target continues returns NULL. data hash deliberately wrong target date next run pipeline. memory Character length 1, memory strategy. \"persistent\", target stays memory end pipeline (unless storage \"worker\", case targets unloads value memory right storing order avoid sending copious data network). \"transient\", target gets unloaded every new target completes. Either way, target gets automatically loaded memory whenever another target needs value. cloud-based dynamic files (e.g. format = \"file\" repository = \"aws\"), memory strategy applies temporary local copy file: \"persistent\" means remains end pipeline deleted, \"transient\" means gets deleted soon possible. former conserves bandwidth, latter conserves local storage. garbage_collection Logical, whether run base::gc() just target runs. deployment Character length 1. deployment \"main\", target run central controlling R process. Otherwise, deployment \"worker\" set pipeline distributed/parallel computing, target runs parallel worker. distributed/parallel computing targets, please visit https://books.ropensci.org/targets/crew.html. priority Numeric length 1 0 1. Controls targets get deployed first multiple competing targets ready simultaneously. Targets priorities closer 1 get dispatched earlier (polled earlier tar_make_future()). resources Object returned tar_resources() optional settings high-performance computing functionality, alternative data storage formats, optional capabilities targets. See tar_resources() details. storage Character length 1, relevant tar_make_clustermq() tar_make_future(). Must one following values: \"main\": target's return value sent back host machine saved/uploaded locally. \"worker\": worker saves/uploads value. \"none\": almost never recommended. niche situations, e.g. data needs loaded explicitly another language. use , return value target totally ignored target ends, downstream target still attempts load data file (except retrieval = \"none\"). select storage = \"none\", return value target's command ignored, data saved automatically. dynamic files (format = \"file\") responsibility user write data store inside target. distinguishing feature storage = \"none\" (opposed format = \"file\") general case, downstream targets automatically try load data data store dependency. corollary, storage = \"none\" completely unnecessary format \"file\". retrieval Character length 1, relevant tar_make_clustermq() tar_make_future(). Must one following values: \"main\": target's dependencies loaded host machine sent worker target runs. \"worker\": worker loads targets dependencies. \"none\": dependencies loaded . choice almost never recommended. niche situations, e.g. data needs loaded explicitly another language. cue optional object tar_cue() customize rules decide whether target date. description Character length 1, custom free-form human-readable text description target. Descriptions appear target labels functions like tar_manifest() tar_visnetwork(), let select subsets targets names argument functions like tar_make(). example, tar_manifest(names = tar_described_as(starts_with(\"survival model\"))) lists targets whose descriptions start character string \"survival model\".","code":""},{"path":"https://docs.ropensci.org/tarchetypes/reference/tar_map2_size.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Dynamic-within-static branching for data frames\n(size batching). — tar_map2_size","text":"list new target objects. See \"Target objects\" section background.","code":""},{"path":"https://docs.ropensci.org/tarchetypes/reference/tar_map2_size.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Dynamic-within-static branching for data frames\n(size batching). — tar_map2_size","text":"Static branching creates one pair targets row values. pair, upstream non-dynamic target runs command1 downstream dynamic target runs command2. command1 produces data frame arguments command2, command2 dynamically maps arguments batches.","code":""},{"path":"https://docs.ropensci.org/tarchetypes/reference/tar_map2_size.html","id":"target-objects","dir":"Reference","previous_headings":"","what":"Target objects","title":"Dynamic-within-static branching for data frames\n(size batching). — tar_map2_size","text":"tarchetypes functions target factories, means return target objects lists target objects. Target objects represent skippable steps analysis pipeline described https://books.ropensci.org/targets/. Please read walkthrough https://books.ropensci.org/targets/walkthrough.html understand role target objects analysis pipelines. developers, https://wlandau.github.io/targetopia/contributing.html#target-factories explains target factories (functions like one generate targets) design specification https://books.ropensci.org/targets-design/ details structure composition target objects.","code":""},{"path":"https://docs.ropensci.org/tarchetypes/reference/tar_map2_size.html","id":"replicate-specific-seeds","dir":"Reference","previous_headings":"","what":"Replicate-specific seeds","title":"Dynamic-within-static branching for data frames\n(size batching). — tar_map2_size","text":"ordinary pipelines, target unique deterministic pseudo-random number generator seed derived target name. batched replicate, however, batch target multiple replicate within batch. tar_rep() friends give replicate unique seed. replicate-specific seed created based dynamic parent target name, tar_option_get(\"seed\") (targets version 0.13.5.9000 ), batch index, rep-within-batch index. seed set just replicate runs. Replicate-specific seeds invariant batching structure. words, tar_rep(name = x, command = rnorm(1), batches = 100, reps = 1, ...) produces numerical output tar_rep(name = x, command = rnorm(1), batches = 10, reps = 10, ...) (different batch names). target factories seed scheme tar_rep2(), tar_map_rep(), tar_map2_count(), tar_map2_size(), tar_render_rep(). tar_map2_*() functions, possible manually supply seeds command1 argument invoke custom code command2 (set.seed(), withr::with_seed, withr::local_seed()). tar_render_rep(), custom seeds can supplied params argument invoked individual R Markdown reports. Likewise tar_quarto_rep() execute_params argument.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/tarchetypes/reference/tar_map2_size.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Dynamic-within-static branching for data frames\n(size batching). — tar_map2_size","text":"","code":"if (identical(Sys.getenv(\"TAR_LONG_EXAMPLES\"), \"true\")) { targets::tar_dir({ # tar_dir() runs code from a temporary directory. targets::tar_script({   tarchetypes::tar_map2_size(     x,     command1 = tibble::tibble(       arg1 = arg1,       arg2 = seq_len(6)      ),     command2 = tibble::tibble(       result = paste(arg1, arg2),       random = sample.int(1e9, size = 1),       length_input = length(arg1)     ),     values = tibble::tibble(arg1 = letters[seq_len(2)]),     size = 2    ) }) targets::tar_make() targets::tar_read(x) }) }"},{"path":"https://docs.ropensci.org/tarchetypes/reference/tar_map2_size_raw.html","id":null,"dir":"Reference","previous_headings":"","what":"Dynamic-within-static branching for data frames\n(size batching; raw version). — tar_map2_size_raw","title":"Dynamic-within-static branching for data frames\n(size batching; raw version). — tar_map2_size_raw","text":"Define targets batched dynamic-within-static branching data frames, user sets (maximum) size batch. Like tar_map2_size() except name character string command1, command2, names, columns1, columns2 language objects.","code":""},{"path":"https://docs.ropensci.org/tarchetypes/reference/tar_map2_size_raw.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Dynamic-within-static branching for data frames\n(size batching; raw version). — tar_map2_size_raw","text":"","code":"tar_map2_size_raw(   name,   command1,   command2,   values = NULL,   names = NULL,   descriptions = quote(tidyselect::everything()),   size = Inf,   combine = TRUE,   suffix1 = \"1\",   suffix2 = \"2\",   columns1 = quote(tidyselect::everything()),   columns2 = quote(tidyselect::everything()),   rep_workers = 1,   tidy_eval = targets::tar_option_get(\"tidy_eval\"),   packages = targets::tar_option_get(\"packages\"),   library = targets::tar_option_get(\"library\"),   format = targets::tar_option_get(\"format\"),   repository = targets::tar_option_get(\"repository\"),   error = targets::tar_option_get(\"error\"),   memory = targets::tar_option_get(\"memory\"),   garbage_collection = targets::tar_option_get(\"garbage_collection\"),   deployment = targets::tar_option_get(\"deployment\"),   priority = targets::tar_option_get(\"priority\"),   resources = targets::tar_option_get(\"resources\"),   storage = targets::tar_option_get(\"storage\"),   retrieval = targets::tar_option_get(\"retrieval\"),   cue = targets::tar_option_get(\"cue\"),   description = targets::tar_option_get(\"description\") )"},{"path":"https://docs.ropensci.org/tarchetypes/reference/tar_map2_size_raw.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Dynamic-within-static branching for data frames\n(size batching; raw version). — tar_map2_size_raw","text":"name Symbol, name target. target name must valid name symbol R, must start dot. Subsequent targets can refer name symbolically induce dependency relationship: e.g. tar_target(downstream_target, f(upstream_target)) target named downstream_target depends target upstream_target function f(). addition, target's name determines random number generator seed. way, target runs reproducible seed someone else running pipeline get results, two targets pipeline share seed. (Even dynamic branches different names thus different seeds.) can recover seed completed target tar_meta(your_target, seed) run tar_seed_set() result locally recreate target's initial RNG state. command1 Language object create named arguments command2. Must return data frame one row per call command2. command2 Language object  map data frame arguments produced command1. Must return data frame. values Named list data frame values iterate . names names symbols commands pattern statements, elements values get substituted place symbols. tar_map() uses elements create new R code, basic types, symbols, R expressions. objects even little bit complicated, especially objects attributes, obvious convert object code generates . complicated objects, consider using quote() define values, shown https://github.com/ropensci/tarchetypes/discussions/105. names Language object tidyselect expression select columns values use construct statically branched target names. NULL, short names automatically generated. descriptions Names column values append custom description generated target. value descriptions tidyselect expression call any_of() starts_with(). size Positive integer length 1, maximum number rows batch downstream (command2) targets. Batches formed row groups command1 target output. combine Logical length 1, whether statically combine results single target downstream. suffix1 Character length 1, suffix apply command1 targets distinguish command2 targets. suffix2 Character length 1, suffix apply command2 targets distinguish command1 targets. columns1 Language object, tidyselect expression select columns values append output targets. columns2 Language object, tidyselect expression select columns command1 output append command2 output. case conflicts, column1 takes precedence. rep_workers Positive integer length 1, number local R processes use run reps within batches parallel. 1, reps run sequentially within batch. greater 1, reps within batch run parallel using PSOCK cluster. tidy_eval Whether invoke tidy evaluation (e.g. !! operator rlang) soon target defined (tar_make()). Applies command argument. packages Character vector packages load right target runs output data reloaded downstream targets. Use tar_option_set() set packages globally subsequent targets define. library Character vector library paths try loading packages. format Optional storage format target's return value. exception format = \"file\", target gets file _targets/objects, format different way save load file. See \"Storage formats\" section detailed list possible data storage formats. repository Character length 1, remote repository target storage. Choices: \"local\": file system local machine. \"aws\": Amazon Web Services (AWS) S3 bucket. Can configured non-AWS S3 bucket using endpoint argument tar_resources_aws(), versioning capabilities may lost . See cloud storage section https://books.ropensci.org/targets/data.html details instructions. \"gcp\": Google Cloud Platform storage bucket. See cloud storage section https://books.ropensci.org/targets/data.html details instructions. Note: repository \"local\" format \"file\" target create single output file. output file uploaded cloud tracked changes exists cloud. local file deleted target runs. error Character length 1, target stops throws error. Options: \"stop\": whole pipeline stops throws error. \"continue\": whole pipeline keeps going. \"abridge\": currently running targets keep running, new targets launch . (Visit https://books.ropensci.org/targets/debugging.html learn debug targets using saved workspaces.) \"null\": errored target continues returns NULL. data hash deliberately wrong target date next run pipeline. memory Character length 1, memory strategy. \"persistent\", target stays memory end pipeline (unless storage \"worker\", case targets unloads value memory right storing order avoid sending copious data network). \"transient\", target gets unloaded every new target completes. Either way, target gets automatically loaded memory whenever another target needs value. cloud-based dynamic files (e.g. format = \"file\" repository = \"aws\"), memory strategy applies temporary local copy file: \"persistent\" means remains end pipeline deleted, \"transient\" means gets deleted soon possible. former conserves bandwidth, latter conserves local storage. garbage_collection Logical, whether run base::gc() just target runs. deployment Character length 1. deployment \"main\", target run central controlling R process. Otherwise, deployment \"worker\" set pipeline distributed/parallel computing, target runs parallel worker. distributed/parallel computing targets, please visit https://books.ropensci.org/targets/crew.html. priority Numeric length 1 0 1. Controls targets get deployed first multiple competing targets ready simultaneously. Targets priorities closer 1 get dispatched earlier (polled earlier tar_make_future()). resources Object returned tar_resources() optional settings high-performance computing functionality, alternative data storage formats, optional capabilities targets. See tar_resources() details. storage Character length 1, relevant tar_make_clustermq() tar_make_future(). Must one following values: \"main\": target's return value sent back host machine saved/uploaded locally. \"worker\": worker saves/uploads value. \"none\": almost never recommended. niche situations, e.g. data needs loaded explicitly another language. use , return value target totally ignored target ends, downstream target still attempts load data file (except retrieval = \"none\"). select storage = \"none\", return value target's command ignored, data saved automatically. dynamic files (format = \"file\") responsibility user write data store inside target. distinguishing feature storage = \"none\" (opposed format = \"file\") general case, downstream targets automatically try load data data store dependency. corollary, storage = \"none\" completely unnecessary format \"file\". retrieval Character length 1, relevant tar_make_clustermq() tar_make_future(). Must one following values: \"main\": target's dependencies loaded host machine sent worker target runs. \"worker\": worker loads targets dependencies. \"none\": dependencies loaded . choice almost never recommended. niche situations, e.g. data needs loaded explicitly another language. cue optional object tar_cue() customize rules decide whether target date. description Character length 1, custom free-form human-readable text description target. Descriptions appear target labels functions like tar_manifest() tar_visnetwork(), let select subsets targets names argument functions like tar_make(). example, tar_manifest(names = tar_described_as(starts_with(\"survival model\"))) lists targets whose descriptions start character string \"survival model\".","code":""},{"path":"https://docs.ropensci.org/tarchetypes/reference/tar_map2_size_raw.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Dynamic-within-static branching for data frames\n(size batching; raw version). — tar_map2_size_raw","text":"list new target objects. See \"Target objects\" section background.","code":""},{"path":"https://docs.ropensci.org/tarchetypes/reference/tar_map2_size_raw.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Dynamic-within-static branching for data frames\n(size batching; raw version). — tar_map2_size_raw","text":"Static branching creates one pair targets row values. pair, upstream non-dynamic target runs command1 downstream dynamic target runs command2. command1 produces data frame arguments command2, command2 dynamically maps arguments batches.","code":""},{"path":"https://docs.ropensci.org/tarchetypes/reference/tar_map2_size_raw.html","id":"target-objects","dir":"Reference","previous_headings":"","what":"Target objects","title":"Dynamic-within-static branching for data frames\n(size batching; raw version). — tar_map2_size_raw","text":"tarchetypes functions target factories, means return target objects lists target objects. Target objects represent skippable steps analysis pipeline described https://books.ropensci.org/targets/. Please read walkthrough https://books.ropensci.org/targets/walkthrough.html understand role target objects analysis pipelines. developers, https://wlandau.github.io/targetopia/contributing.html#target-factories explains target factories (functions like one generate targets) design specification https://books.ropensci.org/targets-design/ details structure composition target objects.","code":""},{"path":"https://docs.ropensci.org/tarchetypes/reference/tar_map2_size_raw.html","id":"replicate-specific-seeds","dir":"Reference","previous_headings":"","what":"Replicate-specific seeds","title":"Dynamic-within-static branching for data frames\n(size batching; raw version). — tar_map2_size_raw","text":"ordinary pipelines, target unique deterministic pseudo-random number generator seed derived target name. batched replicate, however, batch target multiple replicate within batch. tar_rep() friends give replicate unique seed. replicate-specific seed created based dynamic parent target name, tar_option_get(\"seed\") (targets version 0.13.5.9000 ), batch index, rep-within-batch index. seed set just replicate runs. Replicate-specific seeds invariant batching structure. words, tar_rep(name = x, command = rnorm(1), batches = 100, reps = 1, ...) produces numerical output tar_rep(name = x, command = rnorm(1), batches = 10, reps = 10, ...) (different batch names). target factories seed scheme tar_rep2(), tar_map_rep(), tar_map2_count(), tar_map2_size(), tar_render_rep(). tar_map2_*() functions, possible manually supply seeds command1 argument invoke custom code command2 (set.seed(), withr::with_seed, withr::local_seed()). tar_render_rep(), custom seeds can supplied params argument invoked individual R Markdown reports. Likewise tar_quarto_rep() execute_params argument.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/tarchetypes/reference/tar_map2_size_raw.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Dynamic-within-static branching for data frames\n(size batching; raw version). — tar_map2_size_raw","text":"","code":"if (identical(Sys.getenv(\"TAR_LONG_EXAMPLES\"), \"true\")) { targets::tar_dir({ # tar_dir() runs code from a temporary directory. targets::tar_script({   tarchetypes::tar_map2_size_raw(     \"x\",     command1 = quote(       tibble::tibble(         arg1 = arg1,         arg2 = seq_len(6)        )     ),     command2 = quote(       tibble::tibble(         result = paste(arg1, arg2),         random = sample.int(1e6, size = 1),         length_input = length(arg1)       )     ),     values = tibble::tibble(arg1 = letters[seq_len(2)]),     size = 2    ) }) targets::tar_make() targets::tar_read(x) }) }"},{"path":"https://docs.ropensci.org/tarchetypes/reference/tar_map_rep.html","id":null,"dir":"Reference","previous_headings":"","what":"Dynamic batched replication within static branches\nfor data frames. — tar_map_rep","title":"Dynamic batched replication within static branches\nfor data frames. — tar_map_rep","text":"Define targets batched replication within static branches  data frames.","code":""},{"path":"https://docs.ropensci.org/tarchetypes/reference/tar_map_rep.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Dynamic batched replication within static branches\nfor data frames. — tar_map_rep","text":"","code":"tar_map_rep(   name,   command,   values = NULL,   names = NULL,   descriptions = tidyselect::everything(),   columns = tidyselect::everything(),   batches = 1,   reps = 1,   rep_workers = 1,   combine = TRUE,   tidy_eval = targets::tar_option_get(\"tidy_eval\"),   packages = targets::tar_option_get(\"packages\"),   library = targets::tar_option_get(\"library\"),   format = targets::tar_option_get(\"format\"),   repository = targets::tar_option_get(\"repository\"),   error = targets::tar_option_get(\"error\"),   memory = targets::tar_option_get(\"memory\"),   garbage_collection = targets::tar_option_get(\"garbage_collection\"),   deployment = targets::tar_option_get(\"deployment\"),   priority = targets::tar_option_get(\"priority\"),   resources = targets::tar_option_get(\"resources\"),   storage = targets::tar_option_get(\"storage\"),   retrieval = targets::tar_option_get(\"retrieval\"),   cue = targets::tar_option_get(\"cue\"),   description = targets::tar_option_get(\"description\") )"},{"path":"https://docs.ropensci.org/tarchetypes/reference/tar_map_rep.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Dynamic batched replication within static branches\nfor data frames. — tar_map_rep","text":"name Symbol, name target. target name must valid name symbol R, must start dot. Subsequent targets can refer name symbolically induce dependency relationship: e.g. tar_target(downstream_target, f(upstream_target)) target named downstream_target depends target upstream_target function f(). addition, target's name determines random number generator seed. way, target runs reproducible seed someone else running pipeline get results, two targets pipeline share seed. (Even dynamic branches different names thus different seeds.) can recover seed completed target tar_meta(your_target, seed) run tar_seed_set() result locally recreate target's initial RNG state. command R code single replicate. Must return data frame. values Named list data frame values iterate . names names symbols commands pattern statements, elements values get substituted place symbols. tar_map() uses elements create new R code, basic types, symbols, R expressions. objects even little bit complicated, especially objects attributes, obvious convert object code generates . complicated objects, consider using quote() define values, shown https://github.com/ropensci/tarchetypes/discussions/105. names Language object tidyselect expression select columns values use construct statically branched target names. NULL, short names automatically generated. descriptions Names column values append custom description generated target. value descriptions tidyselect expression call any_of() starts_with(). columns tidyselect expression select columns values append output. Columns already target output appended. batches Number batches. also number dynamic branches created tar_make(). reps Number replications batch. total number replications batches * reps. rep_workers Positive integer length 1, number local R processes use run reps within batches parallel. 1, reps run sequentially within batch. greater 1, reps within batch run parallel using PSOCK cluster. combine Logical length 1, whether statically combine results single target downstream. tidy_eval Whether invoke tidy evaluation (e.g. !! operator rlang) soon target defined (tar_make()). Applies command argument. packages Character vector packages load right target runs output data reloaded downstream targets. Use tar_option_set() set packages globally subsequent targets define. library Character vector library paths try loading packages. format Optional storage format target's return value. exception format = \"file\", target gets file _targets/objects, format different way save load file. See \"Storage formats\" section detailed list possible data storage formats. repository Character length 1, remote repository target storage. Choices: \"local\": file system local machine. \"aws\": Amazon Web Services (AWS) S3 bucket. Can configured non-AWS S3 bucket using endpoint argument tar_resources_aws(), versioning capabilities may lost . See cloud storage section https://books.ropensci.org/targets/data.html details instructions. \"gcp\": Google Cloud Platform storage bucket. See cloud storage section https://books.ropensci.org/targets/data.html details instructions. Note: repository \"local\" format \"file\" target create single output file. output file uploaded cloud tracked changes exists cloud. local file deleted target runs. error Character length 1, target stops throws error. Options: \"stop\": whole pipeline stops throws error. \"continue\": whole pipeline keeps going. \"abridge\": currently running targets keep running, new targets launch . (Visit https://books.ropensci.org/targets/debugging.html learn debug targets using saved workspaces.) \"null\": errored target continues returns NULL. data hash deliberately wrong target date next run pipeline. memory Character length 1, memory strategy. \"persistent\", target stays memory end pipeline (unless storage \"worker\", case targets unloads value memory right storing order avoid sending copious data network). \"transient\", target gets unloaded every new target completes. Either way, target gets automatically loaded memory whenever another target needs value. cloud-based dynamic files (e.g. format = \"file\" repository = \"aws\"), memory strategy applies temporary local copy file: \"persistent\" means remains end pipeline deleted, \"transient\" means gets deleted soon possible. former conserves bandwidth, latter conserves local storage. garbage_collection Logical, whether run base::gc() just target runs. deployment Character length 1. deployment \"main\", target run central controlling R process. Otherwise, deployment \"worker\" set pipeline distributed/parallel computing, target runs parallel worker. distributed/parallel computing targets, please visit https://books.ropensci.org/targets/crew.html. priority Numeric length 1 0 1. Controls targets get deployed first multiple competing targets ready simultaneously. Targets priorities closer 1 get dispatched earlier (polled earlier tar_make_future()). resources Object returned tar_resources() optional settings high-performance computing functionality, alternative data storage formats, optional capabilities targets. See tar_resources() details. storage Character length 1, relevant tar_make_clustermq() tar_make_future(). Must one following values: \"main\": target's return value sent back host machine saved/uploaded locally. \"worker\": worker saves/uploads value. \"none\": almost never recommended. niche situations, e.g. data needs loaded explicitly another language. use , return value target totally ignored target ends, downstream target still attempts load data file (except retrieval = \"none\"). select storage = \"none\", return value target's command ignored, data saved automatically. dynamic files (format = \"file\") responsibility user write data store inside target. distinguishing feature storage = \"none\" (opposed format = \"file\") general case, downstream targets automatically try load data data store dependency. corollary, storage = \"none\" completely unnecessary format \"file\". retrieval Character length 1, relevant tar_make_clustermq() tar_make_future(). Must one following values: \"main\": target's dependencies loaded host machine sent worker target runs. \"worker\": worker loads targets dependencies. \"none\": dependencies loaded . choice almost never recommended. niche situations, e.g. data needs loaded explicitly another language. cue optional object tar_cue() customize rules decide whether target date. description Character length 1, custom free-form human-readable text description target. Descriptions appear target labels functions like tar_manifest() tar_visnetwork(), let select subsets targets names argument functions like tar_make(). example, tar_manifest(names = tar_described_as(starts_with(\"survival model\"))) lists targets whose descriptions start character string \"survival model\".","code":""},{"path":"https://docs.ropensci.org/tarchetypes/reference/tar_map_rep.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Dynamic batched replication within static branches\nfor data frames. — tar_map_rep","text":"list new target objects. See \"Target objects\" section background.","code":""},{"path":"https://docs.ropensci.org/tarchetypes/reference/tar_map_rep.html","id":"target-objects","dir":"Reference","previous_headings":"","what":"Target objects","title":"Dynamic batched replication within static branches\nfor data frames. — tar_map_rep","text":"tarchetypes functions target factories, means return target objects lists target objects. Target objects represent skippable steps analysis pipeline described https://books.ropensci.org/targets/. Please read walkthrough https://books.ropensci.org/targets/walkthrough.html understand role target objects analysis pipelines. developers, https://wlandau.github.io/targetopia/contributing.html#target-factories explains target factories (functions like one generate targets) design specification https://books.ropensci.org/targets-design/ details structure composition target objects.","code":""},{"path":"https://docs.ropensci.org/tarchetypes/reference/tar_map_rep.html","id":"replicate-specific-seeds","dir":"Reference","previous_headings":"","what":"Replicate-specific seeds","title":"Dynamic batched replication within static branches\nfor data frames. — tar_map_rep","text":"ordinary pipelines, target unique deterministic pseudo-random number generator seed derived target name. batched replicate, however, batch target multiple replicate within batch. tar_rep() friends give replicate unique seed. replicate-specific seed created based dynamic parent target name, tar_option_get(\"seed\") (targets version 0.13.5.9000 ), batch index, rep-within-batch index. seed set just replicate runs. Replicate-specific seeds invariant batching structure. words, tar_rep(name = x, command = rnorm(1), batches = 100, reps = 1, ...) produces numerical output tar_rep(name = x, command = rnorm(1), batches = 10, reps = 10, ...) (different batch names). target factories seed scheme tar_rep2(), tar_map_rep(), tar_map2_count(), tar_map2_size(), tar_render_rep(). tar_map2_*() functions, possible manually supply seeds command1 argument invoke custom code command2 (set.seed(), withr::with_seed, withr::local_seed()). tar_render_rep(), custom seeds can supplied params argument invoked individual R Markdown reports. Likewise tar_quarto_rep() execute_params argument.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/tarchetypes/reference/tar_map_rep.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Dynamic batched replication within static branches\nfor data frames. — tar_map_rep","text":"","code":"if (identical(Sys.getenv(\"TAR_LONG_EXAMPLES\"), \"true\")) { targets::tar_dir({ # tar_dir() runs code from a temporary directory. targets::tar_script({   # Just a sketch of a Bayesian sensitivity analysis of hyperparameters:   assess_hyperparameters <- function(sigma1, sigma2) {     # data <- simulate_random_data() # user-defined function     # run_model(data, sigma1, sigma2) # user-defined function     # Mock output from the model:     posterior_samples <- stats::rnorm(1000, 0, sigma1 + sigma2)     tibble::tibble(       posterior_median = median(posterior_samples),       posterior_quantile_0.025 = quantile(posterior_samples, 0.025),       posterior_quantile_0.975 = quantile(posterior_samples, 0.975)     )   }   hyperparameters <- tibble::tibble(     scenario = c(\"tight\", \"medium\", \"diffuse\"),     sigma1 = c(10, 50, 50),     sigma2 = c(10, 5, 10)   )   tarchetypes::tar_map_rep(     sensitivity_analysis,     command = assess_hyperparameters(sigma1, sigma2),     values = hyperparameters,     names = tidyselect::any_of(\"scenario\"),     batches = 2,     reps = 3    ) }) targets::tar_make() targets::tar_read(sensitivity_analysis) }) }"},{"path":"https://docs.ropensci.org/tarchetypes/reference/tar_map_rep_raw.html","id":null,"dir":"Reference","previous_headings":"","what":"Dynamic batched replication within static branches\nfor data frames (raw version). — tar_map_rep_raw","title":"Dynamic batched replication within static branches\nfor data frames (raw version). — tar_map_rep_raw","text":"Define targets batched replication within static branches data frames (raw version). function like tar_map_rep() except name argument character string names columns arguments language objects.","code":""},{"path":"https://docs.ropensci.org/tarchetypes/reference/tar_map_rep_raw.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Dynamic batched replication within static branches\nfor data frames (raw version). — tar_map_rep_raw","text":"","code":"tar_map_rep_raw(   name,   command,   values = NULL,   names = NULL,   descriptions = quote(tidyselect::everything()),   columns = quote(tidyselect::everything()),   batches = 1,   reps = 1,   rep_workers = 1,   combine = TRUE,   tidy_eval = targets::tar_option_get(\"tidy_eval\"),   packages = targets::tar_option_get(\"packages\"),   library = targets::tar_option_get(\"library\"),   format = targets::tar_option_get(\"format\"),   repository = targets::tar_option_get(\"repository\"),   error = targets::tar_option_get(\"error\"),   memory = targets::tar_option_get(\"memory\"),   garbage_collection = targets::tar_option_get(\"garbage_collection\"),   deployment = targets::tar_option_get(\"deployment\"),   priority = targets::tar_option_get(\"priority\"),   resources = targets::tar_option_get(\"resources\"),   storage = targets::tar_option_get(\"storage\"),   retrieval = targets::tar_option_get(\"retrieval\"),   cue = targets::tar_option_get(\"cue\"),   description = targets::tar_option_get(\"description\") )"},{"path":"https://docs.ropensci.org/tarchetypes/reference/tar_map_rep_raw.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Dynamic batched replication within static branches\nfor data frames (raw version). — tar_map_rep_raw","text":"name Symbol, name target. target name must valid name symbol R, must start dot. Subsequent targets can refer name symbolically induce dependency relationship: e.g. tar_target(downstream_target, f(upstream_target)) target named downstream_target depends target upstream_target function f(). addition, target's name determines random number generator seed. way, target runs reproducible seed someone else running pipeline get results, two targets pipeline share seed. (Even dynamic branches different names thus different seeds.) can recover seed completed target tar_meta(your_target, seed) run tar_seed_set() result locally recreate target's initial RNG state. command Language object, R code single replicate. Must return data frame. values Named list data frame values iterate . names names symbols commands pattern statements, elements values get substituted place symbols. tar_map() uses elements create new R code, basic types, symbols, R expressions. objects even little bit complicated, especially objects attributes, obvious convert object code generates . complicated objects, consider using quote() define values, shown https://github.com/ropensci/tarchetypes/discussions/105. names Language object tidyselect expression select columns values use construct statically branched target names. NULL, short names automatically generated. descriptions Names column values append custom description generated target. value descriptions tidyselect expression call any_of() starts_with(). columns Language object tidyselect expression select columns values append output. Columns already target output appended. batches Number batches. also number dynamic branches created tar_make(). reps Number replications batch. total number replications batches * reps. rep_workers Positive integer length 1, number local R processes use run reps within batches parallel. 1, reps run sequentially within batch. greater 1, reps within batch run parallel using PSOCK cluster. combine Logical length 1, whether statically combine results single target downstream. tidy_eval Whether invoke tidy evaluation (e.g. !! operator rlang) soon target defined (tar_make()). Applies command argument. packages Character vector packages load right target runs output data reloaded downstream targets. Use tar_option_set() set packages globally subsequent targets define. library Character vector library paths try loading packages. format Character length 1, storage format output. efficient data frame format like \"feather\" recommended, default \"rds\" avoid incurring extra package dependencies. See help file targets::tar_target() details storage formats. repository Character length 1, remote repository target storage. Choices: \"local\": file system local machine. \"aws\": Amazon Web Services (AWS) S3 bucket. Can configured non-AWS S3 bucket using endpoint argument tar_resources_aws(), versioning capabilities may lost . See cloud storage section https://books.ropensci.org/targets/data.html details instructions. \"gcp\": Google Cloud Platform storage bucket. See cloud storage section https://books.ropensci.org/targets/data.html details instructions. Note: repository \"local\" format \"file\" target create single output file. output file uploaded cloud tracked changes exists cloud. local file deleted target runs. error Character length 1, target stops throws error. Options: \"stop\": whole pipeline stops throws error. \"continue\": whole pipeline keeps going. \"abridge\": currently running targets keep running, new targets launch . (Visit https://books.ropensci.org/targets/debugging.html learn debug targets using saved workspaces.) \"null\": errored target continues returns NULL. data hash deliberately wrong target date next run pipeline. memory Character length 1, memory strategy. \"persistent\", target stays memory end pipeline (unless storage \"worker\", case targets unloads value memory right storing order avoid sending copious data network). \"transient\", target gets unloaded every new target completes. Either way, target gets automatically loaded memory whenever another target needs value. cloud-based dynamic files (e.g. format = \"file\" repository = \"aws\"), memory strategy applies temporary local copy file: \"persistent\" means remains end pipeline deleted, \"transient\" means gets deleted soon possible. former conserves bandwidth, latter conserves local storage. garbage_collection Logical, whether run base::gc() just target runs. deployment Character length 1. deployment \"main\", target run central controlling R process. Otherwise, deployment \"worker\" set pipeline distributed/parallel computing, target runs parallel worker. distributed/parallel computing targets, please visit https://books.ropensci.org/targets/crew.html. priority Numeric length 1 0 1. Controls targets get deployed first multiple competing targets ready simultaneously. Targets priorities closer 1 get dispatched earlier (polled earlier tar_make_future()). resources Object returned tar_resources() optional settings high-performance computing functionality, alternative data storage formats, optional capabilities targets. See tar_resources() details. storage Character length 1, relevant tar_make_clustermq() tar_make_future(). Must one following values: \"main\": target's return value sent back host machine saved/uploaded locally. \"worker\": worker saves/uploads value. \"none\": almost never recommended. niche situations, e.g. data needs loaded explicitly another language. use , return value target totally ignored target ends, downstream target still attempts load data file (except retrieval = \"none\"). select storage = \"none\", return value target's command ignored, data saved automatically. dynamic files (format = \"file\") responsibility user write data store inside target. distinguishing feature storage = \"none\" (opposed format = \"file\") general case, downstream targets automatically try load data data store dependency. corollary, storage = \"none\" completely unnecessary format \"file\". retrieval Character length 1, relevant tar_make_clustermq() tar_make_future(). Must one following values: \"main\": target's dependencies loaded host machine sent worker target runs. \"worker\": worker loads targets dependencies. \"none\": dependencies loaded . choice almost never recommended. niche situations, e.g. data needs loaded explicitly another language. cue optional object tar_cue() customize rules decide whether target date. description Character length 1, custom free-form human-readable text description target. Descriptions appear target labels functions like tar_manifest() tar_visnetwork(), let select subsets targets names argument functions like tar_make(). example, tar_manifest(names = tar_described_as(starts_with(\"survival model\"))) lists targets whose descriptions start character string \"survival model\".","code":""},{"path":"https://docs.ropensci.org/tarchetypes/reference/tar_map_rep_raw.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Dynamic batched replication within static branches\nfor data frames (raw version). — tar_map_rep_raw","text":"list new target objects. See \"Target objects\" section background.","code":""},{"path":"https://docs.ropensci.org/tarchetypes/reference/tar_map_rep_raw.html","id":"target-objects","dir":"Reference","previous_headings":"","what":"Target objects","title":"Dynamic batched replication within static branches\nfor data frames (raw version). — tar_map_rep_raw","text":"tarchetypes functions target factories, means return target objects lists target objects. Target objects represent skippable steps analysis pipeline described https://books.ropensci.org/targets/. Please read walkthrough https://books.ropensci.org/targets/walkthrough.html understand role target objects analysis pipelines. developers, https://wlandau.github.io/targetopia/contributing.html#target-factories explains target factories (functions like one generate targets) design specification https://books.ropensci.org/targets-design/ details structure composition target objects.","code":""},{"path":"https://docs.ropensci.org/tarchetypes/reference/tar_map_rep_raw.html","id":"replicate-specific-seeds","dir":"Reference","previous_headings":"","what":"Replicate-specific seeds","title":"Dynamic batched replication within static branches\nfor data frames (raw version). — tar_map_rep_raw","text":"ordinary pipelines, target unique deterministic pseudo-random number generator seed derived target name. batched replicate, however, batch target multiple replicate within batch. tar_rep() friends give replicate unique seed. replicate-specific seed created based dynamic parent target name, tar_option_get(\"seed\") (targets version 0.13.5.9000 ), batch index, rep-within-batch index. seed set just replicate runs. Replicate-specific seeds invariant batching structure. words, tar_rep(name = x, command = rnorm(1), batches = 100, reps = 1, ...) produces numerical output tar_rep(name = x, command = rnorm(1), batches = 10, reps = 10, ...) (different batch names). target factories seed scheme tar_rep2(), tar_map_rep(), tar_map2_count(), tar_map2_size(), tar_render_rep(). tar_map2_*() functions, possible manually supply seeds command1 argument invoke custom code command2 (set.seed(), withr::with_seed, withr::local_seed()). tar_render_rep(), custom seeds can supplied params argument invoked individual R Markdown reports. Likewise tar_quarto_rep() execute_params argument.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/tarchetypes/reference/tar_map_rep_raw.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Dynamic batched replication within static branches\nfor data frames (raw version). — tar_map_rep_raw","text":"","code":"if (identical(Sys.getenv(\"TAR_LONG_EXAMPLES\"), \"true\")) { targets::tar_dir({ # tar_dir() runs code from a temporary directory. targets::tar_script({   # Just a sketch of a Bayesian sensitivity analysis of hyperparameters:   assess_hyperparameters <- function(sigma1, sigma2) {     # data <- simulate_random_data() # user-defined function     # run_model(data, sigma1, sigma2) # user-defined function     # Mock output from the model:     posterior_samples <- stats::rnorm(1000, 0, sigma1 + sigma2)     tibble::tibble(       posterior_median = median(posterior_samples),       posterior_quantile_0.025 = quantile(posterior_samples, 0.025),       posterior_quantile_0.975 = quantile(posterior_samples, 0.975)     )   }   hyperparameters <- tibble::tibble(     scenario = c(\"tight\", \"medium\", \"diffuse\"),     sigma1 = c(10, 50, 50),     sigma2 = c(10, 5, 10)   )   tarchetypes::tar_map_rep_raw(     \"sensitivity_analysis\",     command = quote(assess_hyperparameters(sigma1, sigma2)),     values = hyperparameters,     names = quote(tidyselect::any_of(\"scenario\")),     batches = 2,     reps = 3    ) }) targets::tar_make() targets::tar_read(sensitivity_analysis) }) }"},{"path":"https://docs.ropensci.org/tarchetypes/reference/tar_plan.html","id":null,"dir":"Reference","previous_headings":"","what":"A drake-plan-like pipeline archetype — tar_plan","title":"A drake-plan-like pipeline archetype — tar_plan","text":"Simplify target specification pipelines.","code":""},{"path":"https://docs.ropensci.org/tarchetypes/reference/tar_plan.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A drake-plan-like pipeline archetype — tar_plan","text":"","code":"tar_plan(...)"},{"path":"https://docs.ropensci.org/tarchetypes/reference/tar_plan.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"A drake-plan-like pipeline archetype — tar_plan","text":"... Named unnamed targets. named targets must follow drake-plan-like target = command syntax, unnamed arguments must explicit calls create target objects, e.g. tar_target(), target archetypes like tar_render(), similar.","code":""},{"path":"https://docs.ropensci.org/tarchetypes/reference/tar_plan.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"A drake-plan-like pipeline archetype — tar_plan","text":"list tar_target() objects. See \"Target objects\" section background.","code":""},{"path":"https://docs.ropensci.org/tarchetypes/reference/tar_plan.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"A drake-plan-like pipeline archetype — tar_plan","text":"Allows targets just targets commands written pipeline target = command instead tar_target(target, command). Also supports ordinary target objects unnamed. tar_plan(x = 1, y = 2, tar_target(z, 3), tar_render(r, \"r.Rmd\")) equivalent list(tar_target(x, 1), tar_target(y, 2), tar_target(z, 3), tar_render(r, \"r.Rmd\")). # nolint","code":""},{"path":"https://docs.ropensci.org/tarchetypes/reference/tar_plan.html","id":"target-objects","dir":"Reference","previous_headings":"","what":"Target objects","title":"A drake-plan-like pipeline archetype — tar_plan","text":"tarchetypes functions target factories, means return target objects lists target objects. Target objects represent skippable steps analysis pipeline described https://books.ropensci.org/targets/. Please read walkthrough https://books.ropensci.org/targets/walkthrough.html understand role target objects analysis pipelines. developers, https://wlandau.github.io/targetopia/contributing.html#target-factories explains target factories (functions like one generate targets) design specification https://books.ropensci.org/targets-design/ details structure composition target objects.","code":""},{"path":"https://docs.ropensci.org/tarchetypes/reference/tar_plan.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"A drake-plan-like pipeline archetype — tar_plan","text":"","code":"if (identical(Sys.getenv(\"TAR_LONG_EXAMPLES\"), \"true\")) { targets::tar_dir({ # tar_dir() runs code from a temporary directory. targets::tar_script({   library(tarchetypes)   tar_plan(     tarchetypes::tar_fst_tbl(data, data.frame(x = seq_len(26))),     means = colMeans(data) # No need for tar_target() for simple cases.   ) }) targets::tar_make() }) }"},{"path":"https://docs.ropensci.org/tarchetypes/reference/tar_quarto.html","id":null,"dir":"Reference","previous_headings":"","what":"Target with a Quarto project. — tar_quarto","title":"Target with a Quarto project. — tar_quarto","text":"Shorthand include Quarto project targets pipeline.","code":""},{"path":"https://docs.ropensci.org/tarchetypes/reference/tar_quarto.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Target with a Quarto project. — tar_quarto","text":"","code":"tar_quarto(   name,   path = \".\",   working_directory = NULL,   extra_files = character(0),   execute = TRUE,   execute_params = list(),   cache = NULL,   cache_refresh = FALSE,   debug = FALSE,   quiet = TRUE,   quarto_args = NULL,   pandoc_args = NULL,   profile = NULL,   tidy_eval = targets::tar_option_get(\"tidy_eval\"),   packages = NULL,   library = NULL,   error = targets::tar_option_get(\"error\"),   memory = targets::tar_option_get(\"memory\"),   garbage_collection = targets::tar_option_get(\"garbage_collection\"),   deployment = \"main\",   priority = targets::tar_option_get(\"priority\"),   resources = targets::tar_option_get(\"resources\"),   retrieval = targets::tar_option_get(\"retrieval\"),   cue = targets::tar_option_get(\"cue\"),   description = targets::tar_option_get(\"description\") )"},{"path":"https://docs.ropensci.org/tarchetypes/reference/tar_quarto.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Target with a Quarto project. — tar_quarto","text":"name Symbol, name target. target name must valid name symbol R, must start dot. Subsequent targets can refer name symbolically induce dependency relationship: e.g. tar_target(downstream_target, f(upstream_target)) target named downstream_target depends target upstream_target function f(). addition, target's name determines random number generator seed. way, target runs reproducible seed someone else running pipeline get results, two targets pipeline share seed. (Even dynamic branches different names thus different seeds.) can recover seed completed target tar_meta(your_target, seed) run tar_seed_set() result locally recreate target's initial RNG state. path Character length 1, either single *.qmd source file rendered directory containing Quarto project. Defaults working directory targets pipeline. Passed directly input argument quarto::quarto_render(). working_directory Optional character string, path working directory temporarily set running report. default NULL, runs report current working directory time pipeline run. default recommended vast majority cases. use anything NULL, must manually set value store argument relative working directory calls tar_read() tar_load() report. Otherwise, functions know find data. extra_files Character vector extra files directories track changes. target invalidated (rerun next tar_make()) contents files changes. need include anything already output tar_quarto_files(), list file dependencies automatically detected quarto::quarto_inspect(). execute Whether execute embedded code chunks. execute_params Code, NULL. execute_params evaluates named list parameters parameterized Quarto documents. parameters override custom custom elements params list YAML front-matter Quarto source files. list quoted (evaluated target runs) upstream targets can serve parameter values. cache Cache execution output (uses knitr cache jupyter-cache respectively Rmd Jupyter input files). cache_refresh Force refresh execution cache. debug Leave intermediate files place render. quiet Suppress warning messages. quarto_args Character vector quarto CLI flag pass command. mainly advanced usage, e.g can useful new options added quarto CLI yet supported function argument. pandoc_args Additional command line options pass pandoc. profile Character length 1, Quarto profile. NULL, default profile used. Requires Quarto version 1.2 higher. See https://quarto.org/docs/projects/profiles.html details. tidy_eval Logical, whether enable tidy evaluation interpreting command pattern. TRUE, can use \"bang-bang\" operator !! programmatically insert values global objects. packages Character vector packages load right target runs output data reloaded downstream targets. Use tar_option_set() set packages globally subsequent targets define. library Character vector library paths try loading packages. error Character length 1, target stops throws error. Options: \"stop\": whole pipeline stops throws error. \"continue\": whole pipeline keeps going. \"abridge\": currently running targets keep running, new targets launch . (Visit https://books.ropensci.org/targets/debugging.html learn debug targets using saved workspaces.) \"null\": errored target continues returns NULL. data hash deliberately wrong target date next run pipeline. memory Character length 1, memory strategy. \"persistent\", target stays memory end pipeline (unless storage \"worker\", case targets unloads value memory right storing order avoid sending copious data network). \"transient\", target gets unloaded every new target completes. Either way, target gets automatically loaded memory whenever another target needs value. cloud-based dynamic files (e.g. format = \"file\" repository = \"aws\"), memory strategy applies temporary local copy file: \"persistent\" means remains end pipeline deleted, \"transient\" means gets deleted soon possible. former conserves bandwidth, latter conserves local storage. garbage_collection Logical, whether run base::gc() just target runs. deployment Character length 1. deployment \"main\", target run central controlling R process. Otherwise, deployment \"worker\" set pipeline distributed/parallel computing, target runs parallel worker. distributed/parallel computing targets, please visit https://books.ropensci.org/targets/crew.html. priority Numeric length 1 0 1. Controls targets get deployed first multiple competing targets ready simultaneously. Targets priorities closer 1 get dispatched earlier (polled earlier tar_make_future()). resources Object returned tar_resources() optional settings high-performance computing functionality, alternative data storage formats, optional capabilities targets. See tar_resources() details. retrieval Character length 1, relevant tar_make_clustermq() tar_make_future(). Must one following values: \"main\": target's dependencies loaded host machine sent worker target runs. \"worker\": worker loads targets dependencies. \"none\": dependencies loaded . choice almost never recommended. niche situations, e.g. data needs loaded explicitly another language. cue optional object tar_cue() customize rules decide whether target date. description Character length 1, custom free-form human-readable text description target. Descriptions appear target labels functions like tar_manifest() tar_visnetwork(), let select subsets targets names argument functions like tar_make(). example, tar_manifest(names = tar_described_as(starts_with(\"survival model\"))) lists targets whose descriptions start character string \"survival model\".","code":""},{"path":"https://docs.ropensci.org/tarchetypes/reference/tar_quarto.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Target with a Quarto project. — tar_quarto","text":"target object format = \"file\". target runs, returns character vector file paths: rendered documents, Quarto source files, input output files. output files determined YAML front-matter standalone Quarto documents _quarto.yml Quarto projects, can see files tar_quarto_files() (powered quarto::quarto_inspect()). returned paths relative paths ensure portability (project can moved one file system another without invalidating target). See \"Target objects\" section background.","code":""},{"path":"https://docs.ropensci.org/tarchetypes/reference/tar_quarto.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Target with a Quarto project. — tar_quarto","text":"tar_quarto() alternative tar_target() Quarto projects standalone Quarto source documents depend upstream targets. Quarto R source documents (*.qmd *.Rmd files) mention dependency targets tar_load() tar_read() active R code chunks (also allows render project outside pipeline _targets/ data store already exists). (use tar_load_raw() tar_read_raw() .) , tar_quarto() defines special kind target. 1. Finds tar_load()/tar_read() dependencies R source reports inserts target's command. enforces proper dependency relationships. (use tar_load_raw() tar_read_raw() .) 2. Sets format = \"file\" (see tar_target()) targets watches files returned paths reruns report files change. 3. Configures target's command return output rendered files input dependency files (Quarto source documents). file paths relative paths project stays portable. 4. Forces report run user's current working directory instead working directory report. 5. Sets convenient default options deployment = \"main\" target quiet = TRUE quarto::quarto_render().","code":""},{"path":"https://docs.ropensci.org/tarchetypes/reference/tar_quarto.html","id":"quarto-troubleshooting","dir":"Reference","previous_headings":"","what":"Quarto troubleshooting","title":"Target with a Quarto project. — tar_quarto","text":"encounter difficult errors, please read https://github.com/quarto-dev/quarto-r/issues/16. addition, please try reproduce error using quarto::quarto_render(\"your_report.qmd\", execute_dir = getwd()) without using targets . Isolating errors way makes much easier solve.","code":""},{"path":"https://docs.ropensci.org/tarchetypes/reference/tar_quarto.html","id":"literate-programming-limitations","dir":"Reference","previous_headings":"","what":"Literate programming limitations","title":"Target with a Quarto project. — tar_quarto","text":"Literate programming files messy variable, functions like tar_render() limitations: * Child documents tracked changes. * Upstream target dependencies detected tar_read() /tar_load() called user-defined function. addition, single target names must mentioned must symbols. tar_load(\"x\") tar_load(contains(\"x\")) may detect target x. * Special/optional input/output files may detected cases. * tar_render() friends local files . integrate cloud storage capabilities targets.","code":""},{"path":"https://docs.ropensci.org/tarchetypes/reference/tar_quarto.html","id":"target-objects","dir":"Reference","previous_headings":"","what":"Target objects","title":"Target with a Quarto project. — tar_quarto","text":"tarchetypes functions target factories, means return target objects lists target objects. Target objects represent skippable steps analysis pipeline described https://books.ropensci.org/targets/. Please read walkthrough https://books.ropensci.org/targets/walkthrough.html understand role target objects analysis pipelines. developers, https://wlandau.github.io/targetopia/contributing.html#target-factories explains target factories (functions like one generate targets) design specification https://books.ropensci.org/targets-design/ details structure composition target objects.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/tarchetypes/reference/tar_quarto.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Target with a Quarto project. — tar_quarto","text":"","code":"if (identical(Sys.getenv(\"TAR_LONG_EXAMPLES\"), \"true\")) { targets::tar_dir({  # tar_dir() runs code from a temporary directory. # Unparameterized Quarto document: lines <- c(   \"---\",   \"title: report.qmd source file\",   \"output_format: html\",   \"---\",   \"Assume these lines are in report.qmd.\",   \"```{r}\",   \"targets::tar_read(data)\",   \"```\" ) writeLines(lines, \"report.qmd\") # Include the report in a pipeline as follows. targets::tar_script({   library(tarchetypes)   list(     tar_target(data, data.frame(x = seq_len(26), y = letters)),     tar_quarto(report, path = \"report.qmd\")   ) }, ask = FALSE) # Then, run the pipeline as usual.  # Parameterized Quarto: lines <- c(   \"---\",   \"title: 'report.qmd source file with parameters'\",   \"output_format: html_document\",   \"params:\",   \"  your_param: \\\"default value\\\"\",   \"---\",   \"Assume these lines are in report.qmd.\",   \"```{r}\",   \"print(params$your_param)\",   \"```\" ) writeLines(lines, \"report.qmd\") # Include the report in the pipeline as follows. unlink(\"_targets.R\") # In tar_dir(), not the user's file space. targets::tar_script({   library(tarchetypes)   list(     tar_target(data, data.frame(x = seq_len(26), y = letters)),     tar_quarto(       report,       path = \"report.qmd\",       execute_params = list(your_param = data)     )   ) }, ask = FALSE) }) # Then, run the pipeline as usual. }"},{"path":"https://docs.ropensci.org/tarchetypes/reference/tar_quarto_files.html","id":null,"dir":"Reference","previous_headings":"","what":"Quarto file detection — tar_quarto_files","title":"Quarto file detection — tar_quarto_files","text":"Detect important files Quarto project.","code":""},{"path":"https://docs.ropensci.org/tarchetypes/reference/tar_quarto_files.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Quarto file detection — tar_quarto_files","text":"","code":"tar_quarto_files(path = \".\", profile = NULL)"},{"path":"https://docs.ropensci.org/tarchetypes/reference/tar_quarto_files.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Quarto file detection — tar_quarto_files","text":"path Character length 1, either file path Quarto source document directory path Quarto project. Defaults Quarto project current working directory. profile Character length 1, Quarto profile. NULL, default profile used. Requires Quarto version 1.2 higher. See https://quarto.org/docs/projects/profiles.html details.","code":""},{"path":"https://docs.ropensci.org/tarchetypes/reference/tar_quarto_files.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Quarto file detection — tar_quarto_files","text":"named list important file paths Quarto project document: sources: source files tar_load()/tar_read() target dependencies R code chunks. output: output files generated quarto::quarto_render(). input: pre-existing files required render project document, _quarto.yml.","code":""},{"path":"https://docs.ropensci.org/tarchetypes/reference/tar_quarto_files.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Quarto file detection — tar_quarto_files","text":"function just thin wrapper interprets output quarto::quarto_inspect() returns tarchetypes needs know current Quarto project document.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/tarchetypes/reference/tar_quarto_files.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Quarto file detection — tar_quarto_files","text":"","code":"lines <- c(   \"---\",   \"title: source file\",   \"---\",   \"Assume these lines are in report.qmd.\",   \"```{r}\",   \"1 + 1\",   \"```\" ) path <- tempfile(fileext = \".qmd\") writeLines(lines, path) # If Quarto is installed, run: # tar_quarto_files(path)"},{"path":"https://docs.ropensci.org/tarchetypes/reference/tar_quarto_raw.html","id":null,"dir":"Reference","previous_headings":"","what":"Target with a Quarto project (raw version). — tar_quarto_raw","title":"Target with a Quarto project (raw version). — tar_quarto_raw","text":"Shorthand include Quarto project standalone Quarto source document targets pipeline.","code":""},{"path":"https://docs.ropensci.org/tarchetypes/reference/tar_quarto_raw.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Target with a Quarto project (raw version). — tar_quarto_raw","text":"","code":"tar_quarto_raw(   name,   path = \".\",   working_directory = NULL,   extra_files = character(0),   execute = TRUE,   execute_params = NULL,   cache = NULL,   cache_refresh = FALSE,   debug = FALSE,   quiet = TRUE,   quarto_args = NULL,   pandoc_args = NULL,   profile = NULL,   packages = NULL,   library = NULL,   error = targets::tar_option_get(\"error\"),   memory = targets::tar_option_get(\"memory\"),   garbage_collection = targets::tar_option_get(\"garbage_collection\"),   deployment = \"main\",   priority = targets::tar_option_get(\"priority\"),   resources = targets::tar_option_get(\"resources\"),   retrieval = targets::tar_option_get(\"retrieval\"),   cue = targets::tar_option_get(\"cue\"),   description = targets::tar_option_get(\"description\") )"},{"path":"https://docs.ropensci.org/tarchetypes/reference/tar_quarto_raw.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Target with a Quarto project (raw version). — tar_quarto_raw","text":"name Character length 1, name target. target name must valid name symbol R, must start dot. Subsequent targets can refer name symbolically induce dependency relationship: e.g. tar_target(downstream_target, f(upstream_target)) target named downstream_target depends target upstream_target function f(). addition, target's name determines random number generator seed. way, target runs reproducible seed someone else running pipeline get results, two targets pipeline share seed. (Even dynamic branches different names thus different seeds.) can recover seed completed target tar_meta(your_target, seed) run tar_seed_set() result locally recreate target's initial RNG state. path Character length 1, either single *.qmd source file rendered directory containing Quarto project. Defaults working directory targets pipeline. Passed directly input argument quarto::quarto_render(). working_directory Optional character string, path working directory temporarily set running report. default NULL, runs report current working directory time pipeline run. default recommended vast majority cases. use anything NULL, must manually set value store argument relative working directory calls tar_read() tar_load() report. Otherwise, functions know find data. extra_files Character vector extra files directories track changes. target invalidated (rerun next tar_make()) contents files changes. need include anything already output tar_quarto_files(), list file dependencies automatically detected quarto::quarto_inspect(). execute Whether execute embedded code chunks. execute_params non-expression language object (use quote(), expression()) evaluates named list parameters parameterized Quarto documents. parameters override custom custom elements params list YAML front-matter Quarto source files. list quoted (evaluated target runs) upstream targets can serve parameter values. cache Cache execution output (uses knitr cache jupyter-cache respectively Rmd Jupyter input files). cache_refresh Force refresh execution cache. debug Leave intermediate files place render. quiet Suppress warning messages. quarto_args Character vector quarto CLI flag pass command. mainly advanced usage, e.g can useful new options added quarto CLI yet supported function argument. pandoc_args Additional command line options pass pandoc. profile Character length 1, Quarto profile. NULL, default profile used. Requires Quarto version 1.2 higher. See https://quarto.org/docs/projects/profiles.html details. packages Deprecated 2023-09-05 (version 0.7.8.9000). Please load R packages inside Quarto report . library Deprecated 2023-09-05 (version 0.7.8.9000). Please load R packages inside Quarto report . error Character length 1, target stops throws error. Options: \"stop\": whole pipeline stops throws error. \"continue\": whole pipeline keeps going. \"abridge\": currently running targets keep running, new targets launch . (Visit https://books.ropensci.org/targets/debugging.html learn debug targets using saved workspaces.) \"null\": errored target continues returns NULL. data hash deliberately wrong target date next run pipeline. memory Character length 1, memory strategy. \"persistent\", target stays memory end pipeline (unless storage \"worker\", case targets unloads value memory right storing order avoid sending copious data network). \"transient\", target gets unloaded every new target completes. Either way, target gets automatically loaded memory whenever another target needs value. cloud-based dynamic files (e.g. format = \"file\" repository = \"aws\"), memory strategy applies temporary local copy file: \"persistent\" means remains end pipeline deleted, \"transient\" means gets deleted soon possible. former conserves bandwidth, latter conserves local storage. garbage_collection Logical, whether run base::gc() just target runs. deployment Character length 1. deployment \"main\", target run central controlling R process. Otherwise, deployment \"worker\" set pipeline distributed/parallel computing, target runs parallel worker. distributed/parallel computing targets, please visit https://books.ropensci.org/targets/crew.html. priority Numeric length 1 0 1. Controls targets get deployed first multiple competing targets ready simultaneously. Targets priorities closer 1 get dispatched earlier (polled earlier tar_make_future()). resources Object returned tar_resources() optional settings high-performance computing functionality, alternative data storage formats, optional capabilities targets. See tar_resources() details. retrieval Character length 1, relevant tar_make_clustermq() tar_make_future(). Must one following values: \"main\": target's dependencies loaded host machine sent worker target runs. \"worker\": worker loads targets dependencies. \"none\": dependencies loaded . choice almost never recommended. niche situations, e.g. data needs loaded explicitly another language. cue optional object tar_cue() customize rules decide whether target date. description Character length 1, custom free-form human-readable text description target. Descriptions appear target labels functions like tar_manifest() tar_visnetwork(), let select subsets targets names argument functions like tar_make(). example, tar_manifest(names = tar_described_as(starts_with(\"survival model\"))) lists targets whose descriptions start character string \"survival model\".","code":""},{"path":"https://docs.ropensci.org/tarchetypes/reference/tar_quarto_raw.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Target with a Quarto project (raw version). — tar_quarto_raw","text":"target object format = \"file\". target runs, returns sorted character vector important file paths: rendered documents, Quarto source files, input output files. output files determined YAML front-matter standalone Quarto documents _quarto.yml Quarto projects, can see files tar_quarto_files() (powered quarto::quarto_inspect()). returned paths relative paths ensure portability (project can moved one file system another without invalidating target). See \"Target objects\" section background.","code":""},{"path":"https://docs.ropensci.org/tarchetypes/reference/tar_quarto_raw.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Target with a Quarto project (raw version). — tar_quarto_raw","text":"tar_quarto_raw() just like tar_quarto() except uses standard evaluation name execute_params arguments (instead quoting ).","code":""},{"path":"https://docs.ropensci.org/tarchetypes/reference/tar_quarto_raw.html","id":"target-objects","dir":"Reference","previous_headings":"","what":"Target objects","title":"Target with a Quarto project (raw version). — tar_quarto_raw","text":"tarchetypes functions target factories, means return target objects lists target objects. Target objects represent skippable steps analysis pipeline described https://books.ropensci.org/targets/. Please read walkthrough https://books.ropensci.org/targets/walkthrough.html understand role target objects analysis pipelines. developers, https://wlandau.github.io/targetopia/contributing.html#target-factories explains target factories (functions like one generate targets) design specification https://books.ropensci.org/targets-design/ details structure composition target objects.","code":""},{"path":"https://docs.ropensci.org/tarchetypes/reference/tar_quarto_raw.html","id":"literate-programming-limitations","dir":"Reference","previous_headings":"","what":"Literate programming limitations","title":"Target with a Quarto project (raw version). — tar_quarto_raw","text":"Literate programming files messy variable, functions like tar_render() limitations: * Child documents tracked changes. * Upstream target dependencies detected tar_read() /tar_load() called user-defined function. addition, single target names must mentioned must symbols. tar_load(\"x\") tar_load(contains(\"x\")) may detect target x. * Special/optional input/output files may detected cases. * tar_render() friends local files . integrate cloud storage capabilities targets.","code":""},{"path":"https://docs.ropensci.org/tarchetypes/reference/tar_quarto_raw.html","id":"quarto-troubleshooting","dir":"Reference","previous_headings":"","what":"Quarto troubleshooting","title":"Target with a Quarto project (raw version). — tar_quarto_raw","text":"encounter difficult errors, please read https://github.com/quarto-dev/quarto-r/issues/16. addition, please try reproduce error using quarto::quarto_render(\"your_report.qmd\", execute_dir = getwd()) without using targets . Isolating errors way makes much easier solve.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/tarchetypes/reference/tar_quarto_raw.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Target with a Quarto project (raw version). — tar_quarto_raw","text":"","code":"if (identical(Sys.getenv(\"TAR_LONG_EXAMPLES\"), \"true\")) { targets::tar_dir({  # tar_dir() runs code from a temporary directory. # Unparameterized Quarto document: lines <- c(   \"---\",   \"title: report.qmd source file\",   \"output_format: html\",   \"---\",   \"Assume these lines are in report.qmd.\",   \"```{r}\",   \"targets::tar_read(data)\",   \"```\" ) # In tar_dir(), not part of the user's file space: writeLines(lines, \"report.qmd\") # Include the report in a pipeline as follows. targets::tar_script({   library(tarchetypes)   list(     tar_target(data, data.frame(x = seq_len(26), y = letters)),     tar_quarto_raw(\"report\", path = \"report.qmd\")   ) }, ask = FALSE) # Then, run the pipeline as usual.  # Parameterized Quarto: lines <- c(   \"---\",   \"title: 'report.qmd source file with parameters'\",   \"output_format: html_document\",   \"params:\",   \"  your_param: \\\"default value\\\"\",   \"---\",   \"Assume these lines are in report.qmd.\",   \"```{r}\",   \"print(params$your_param)\",   \"```\" ) # In tar_dir(), not part of the user's file space: writeLines(lines, \"report.qmd\") # Include the report in the pipeline as follows. targets::tar_script({   library(tarchetypes)   list(     tar_target(data, data.frame(x = seq_len(26), y = letters)),     tar_quarto_raw(       \"report\",       path = \"report.qmd\",       execute_params = quote(list(your_param = data))     )   ) }, ask = FALSE) # Then, run the pipeline as usual. }) }"},{"path":"https://docs.ropensci.org/tarchetypes/reference/tar_quarto_rep.html","id":null,"dir":"Reference","previous_headings":"","what":"Parameterized Quarto with dynamic branching. — tar_quarto_rep","title":"Parameterized Quarto with dynamic branching. — tar_quarto_rep","text":"Targets render parameterized Quarto document multiple sets parameters.","code":""},{"path":"https://docs.ropensci.org/tarchetypes/reference/tar_quarto_rep.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Parameterized Quarto with dynamic branching. — tar_quarto_rep","text":"","code":"tar_quarto_rep(   name,   path,   working_directory = NULL,   execute_params = data.frame(),   batches = NULL,   extra_files = character(0),   execute = TRUE,   cache = NULL,   cache_refresh = FALSE,   debug = FALSE,   quiet = TRUE,   quarto_args = NULL,   pandoc_args = NULL,   rep_workers = 1,   tidy_eval = targets::tar_option_get(\"tidy_eval\"),   packages = targets::tar_option_get(\"packages\"),   library = targets::tar_option_get(\"library\"),   format = targets::tar_option_get(\"format\"),   iteration = targets::tar_option_get(\"iteration\"),   error = targets::tar_option_get(\"error\"),   memory = targets::tar_option_get(\"memory\"),   garbage_collection = targets::tar_option_get(\"garbage_collection\"),   deployment = targets::tar_option_get(\"deployment\"),   priority = targets::tar_option_get(\"priority\"),   resources = targets::tar_option_get(\"resources\"),   retrieval = targets::tar_option_get(\"retrieval\"),   cue = targets::tar_option_get(\"cue\"),   description = targets::tar_option_get(\"description\") )"},{"path":"https://docs.ropensci.org/tarchetypes/reference/tar_quarto_rep.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Parameterized Quarto with dynamic branching. — tar_quarto_rep","text":"name Symbol, name target. target name must valid name symbol R, must start dot. Subsequent targets can refer name symbolically induce dependency relationship: e.g. tar_target(downstream_target, f(upstream_target)) target named downstream_target depends target upstream_target function f(). addition, target's name determines random number generator seed. way, target runs reproducible seed someone else running pipeline get results, two targets pipeline share seed. (Even dynamic branches different names thus different seeds.) can recover seed completed target tar_meta(your_target, seed) run tar_seed_set() result locally recreate target's initial RNG state. path Character string, file path Quarto source file. Must length 1. working_directory Optional character string, path working directory temporarily set running report. default NULL, runs report current working directory time pipeline run. default recommended vast majority cases. use anything NULL, must manually set value store argument relative working directory calls tar_read() tar_load() report. Otherwise, functions know find data. execute_params Code generate data frame tibble one row per rendered report one column per Quarto parameter. may also include output_file column specify path rendered report. included, output_file column must character vector one one output file row parameters. output_file column included, output files automatically determined using parameters, default file format determined YAML front-matter Quarto source document. first file format used, others generated. Quarto parameters must named tar_group output_file. execute_params argument converted command target supplies Quarto parameters. batches Number batches. also number dynamic branches created tar_make(). extra_files Character vector extra files targets track changes. content one files changes, report rerun parameters next tar_make(). files extra files, include Quarto source document rendered output document, already tracked changes. Examples include bibliographies, style sheets, supporting image files. execute Whether execute embedded code chunks. cache Cache execution output (uses knitr cache jupyter-cache respectively Rmd Jupyter input files). cache_refresh Force refresh execution cache. debug Leave intermediate files place render. quiet Suppress warning messages. quarto_args Character vector quarto CLI flag pass command. mainly advanced usage, e.g can useful new options added quarto CLI yet supported function argument. pandoc_args Additional command line options pass pandoc. rep_workers Positive integer length 1, number local R processes use run reps within batches parallel. 1, reps run sequentially within batch. greater 1, reps within batch run parallel using PSOCK cluster. tidy_eval Logical length 1, whether use tidy evaluation resolve execute_params. Similar tidy_eval argument targets::tar_target(). packages Character vector packages load right target runs output data reloaded downstream targets. Use tar_option_set() set packages globally subsequent targets define. library Character vector library paths try loading packages. format Optional storage format target's return value. exception format = \"file\", target gets file _targets/objects, format different way save load file. See \"Storage formats\" section detailed list possible data storage formats. iteration Character length 1, name iteration mode target. Choices: \"vector\": branching happens vectors::vec_slice() aggregation happens vctrs::vec_c(). \"list\", branching happens [[]] aggregation happens list(). case list iteration, tar_read(your_target) return list lists, outer list one element per batch inner list one element per rep within batch. un-batch nested list, call tar_read(your_target, recursive = FALSE). \"group\": dplyr::group_by()-like functionality branch subsets data frame. target's return value must data frame special tar_group column consecutive integers 1 number groups. integer designates group, branch created collection rows group. See tar_group() function see can create special tar_group column dplyr::group_by(). error Character length 1, target stops throws error. Options: \"stop\": whole pipeline stops throws error. \"continue\": whole pipeline keeps going. \"abridge\": currently running targets keep running, new targets launch . (Visit https://books.ropensci.org/targets/debugging.html learn debug targets using saved workspaces.) \"null\": errored target continues returns NULL. data hash deliberately wrong target date next run pipeline. memory Character length 1, memory strategy. \"persistent\", target stays memory end pipeline (unless storage \"worker\", case targets unloads value memory right storing order avoid sending copious data network). \"transient\", target gets unloaded every new target completes. Either way, target gets automatically loaded memory whenever another target needs value. cloud-based dynamic files (e.g. format = \"file\" repository = \"aws\"), memory strategy applies temporary local copy file: \"persistent\" means remains end pipeline deleted, \"transient\" means gets deleted soon possible. former conserves bandwidth, latter conserves local storage. garbage_collection Logical, whether run base::gc() just target runs. deployment Character length 1. deployment \"main\", target run central controlling R process. Otherwise, deployment \"worker\" set pipeline distributed/parallel computing, target runs parallel worker. distributed/parallel computing targets, please visit https://books.ropensci.org/targets/crew.html. priority Numeric length 1 0 1. Controls targets get deployed first multiple competing targets ready simultaneously. Targets priorities closer 1 get dispatched earlier (polled earlier tar_make_future()). resources Object returned tar_resources() optional settings high-performance computing functionality, alternative data storage formats, optional capabilities targets. See tar_resources() details. retrieval Character length 1, relevant tar_make_clustermq() tar_make_future(). Must one following values: \"main\": target's dependencies loaded host machine sent worker target runs. \"worker\": worker loads targets dependencies. \"none\": dependencies loaded . choice almost never recommended. niche situations, e.g. data needs loaded explicitly another language. cue optional object tar_cue() customize rules decide whether target date. description Character length 1, custom free-form human-readable text description target. Descriptions appear target labels functions like tar_manifest() tar_visnetwork(), let select subsets targets names argument functions like tar_make(). example, tar_manifest(names = tar_described_as(starts_with(\"survival model\"))) lists targets whose descriptions start character string \"survival model\".","code":""},{"path":"https://docs.ropensci.org/tarchetypes/reference/tar_quarto_rep.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Parameterized Quarto with dynamic branching. — tar_quarto_rep","text":"list target objects render Quarto reports. Changes parameters, source file, dependencies, etc. cause appropriate targets rerun tar_make(). See \"Target objects\" section background.","code":""},{"path":"https://docs.ropensci.org/tarchetypes/reference/tar_quarto_rep.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Parameterized Quarto with dynamic branching. — tar_quarto_rep","text":"tar_quarto_rep() alternative tar_target() parameterized Quarto document depends targets. Parameters must given data frame one row per rendered report one column per parameter. optional output_file column may included set output file path rendered report. (See execute_params argument details.) Quarto source mention dependency targets tar_load() tar_read() active code chunks (also allows render report outside pipeline _targets/ data store already exists appropriate defaults specified parameters). (use tar_load_raw() tar_read_raw() .) , tar_quarto() defines special kind target. 1. Finds tar_load()/tar_read() dependencies report inserts target's command. enforces proper dependency relationships. (use tar_load_raw() tar_read_raw() .) 2. Sets format = \"file\" (see tar_target()) targets watches files returned paths reruns report files change. 3. Configures target's command return output report files: rendered document, source file, file paths mentioned files. file paths relative paths project stays portable. 4. Forces report run user's current working directory instead working directory report. 5. Sets convenient default options deployment = \"main\" target quiet = TRUE quarto::quarto_render().","code":""},{"path":"https://docs.ropensci.org/tarchetypes/reference/tar_quarto_rep.html","id":"target-objects","dir":"Reference","previous_headings":"","what":"Target objects","title":"Parameterized Quarto with dynamic branching. — tar_quarto_rep","text":"tarchetypes functions target factories, means return target objects lists target objects. Target objects represent skippable steps analysis pipeline described https://books.ropensci.org/targets/. Please read walkthrough https://books.ropensci.org/targets/walkthrough.html understand role target objects analysis pipelines. developers, https://wlandau.github.io/targetopia/contributing.html#target-factories explains target factories (functions like one generate targets) design specification https://books.ropensci.org/targets-design/ details structure composition target objects.","code":""},{"path":"https://docs.ropensci.org/tarchetypes/reference/tar_quarto_rep.html","id":"replicate-specific-seeds","dir":"Reference","previous_headings":"","what":"Replicate-specific seeds","title":"Parameterized Quarto with dynamic branching. — tar_quarto_rep","text":"ordinary pipelines, target unique deterministic pseudo-random number generator seed derived target name. batched replicate, however, batch target multiple replicate within batch. tar_rep() friends give replicate unique seed. replicate-specific seed created based dynamic parent target name, tar_option_get(\"seed\") (targets version 0.13.5.9000 ), batch index, rep-within-batch index. seed set just replicate runs. Replicate-specific seeds invariant batching structure. words, tar_rep(name = x, command = rnorm(1), batches = 100, reps = 1, ...) produces numerical output tar_rep(name = x, command = rnorm(1), batches = 10, reps = 10, ...) (different batch names). target factories seed scheme tar_rep2(), tar_map_rep(), tar_map2_count(), tar_map2_size(), tar_render_rep(). tar_map2_*() functions, possible manually supply seeds command1 argument invoke custom code command2 (set.seed(), withr::with_seed, withr::local_seed()). tar_render_rep(), custom seeds can supplied params argument invoked individual R Markdown reports. Likewise tar_quarto_rep() execute_params argument.","code":""},{"path":"https://docs.ropensci.org/tarchetypes/reference/tar_quarto_rep.html","id":"literate-programming-limitations","dir":"Reference","previous_headings":"","what":"Literate programming limitations","title":"Parameterized Quarto with dynamic branching. — tar_quarto_rep","text":"Literate programming files messy variable, functions like tar_render() limitations: * Child documents tracked changes. * Upstream target dependencies detected tar_read() /tar_load() called user-defined function. addition, single target names must mentioned must symbols. tar_load(\"x\") tar_load(contains(\"x\")) may detect target x. * Special/optional input/output files may detected cases. * tar_render() friends local files . integrate cloud storage capabilities targets.","code":""},{"path":"https://docs.ropensci.org/tarchetypes/reference/tar_quarto_rep.html","id":"quarto-troubleshooting","dir":"Reference","previous_headings":"","what":"Quarto troubleshooting","title":"Parameterized Quarto with dynamic branching. — tar_quarto_rep","text":"encounter difficult errors, please read https://github.com/quarto-dev/quarto-r/issues/16. addition, please try reproduce error using quarto::quarto_render(\"your_report.qmd\", execute_dir = getwd()) without using targets . Isolating errors way makes much easier solve.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/tarchetypes/reference/tar_quarto_rep.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Parameterized Quarto with dynamic branching. — tar_quarto_rep","text":"","code":"if (identical(Sys.getenv(\"TAR_LONG_EXAMPLES\"), \"true\")) { targets::tar_dir({ # tar_dir() runs code from a temporary directory. # Parameterized Quarto: lines <- c(   \"---\",   \"title: 'report.qmd file'\",   \"output_format: html_document\",   \"params:\",   \"  par: \\\"default value\\\"\",   \"---\",   \"Assume these lines are in a file called report.qmd.\",   \"```{r}\",   \"print(params$par)\",   \"```\" ) writeLines(lines, \"report.qmd\") # In tar_dir(), not the user's file space. # The following pipeline will run the report for each row of params. targets::tar_script({   library(tarchetypes)   list(     tar_quarto_rep(       report,       path = \"report.qmd\",       execute_params = tibble::tibble(par = c(1, 2))     )   ) }, ask = FALSE) # Then, run the targets pipeline as usual. }) }"},{"path":"https://docs.ropensci.org/tarchetypes/reference/tar_quarto_rep_raw.html","id":null,"dir":"Reference","previous_headings":"","what":"Parameterized Quarto with dynamic branching (raw version). — tar_quarto_rep_raw","title":"Parameterized Quarto with dynamic branching (raw version). — tar_quarto_rep_raw","text":"Targets render parameterized Quarto document multiple sets parameters (raw version). tar_quarto_rep() except name character string, params expression object, extra arguments quarto::quarto_render() passed args argument instead ....","code":""},{"path":"https://docs.ropensci.org/tarchetypes/reference/tar_quarto_rep_raw.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Parameterized Quarto with dynamic branching (raw version). — tar_quarto_rep_raw","text":"","code":"tar_quarto_rep_raw(   name,   path,   working_directory = NULL,   execute_params = expression(NULL),   batches = NULL,   extra_files = character(0),   execute = TRUE,   cache = NULL,   cache_refresh = FALSE,   debug = FALSE,   quiet = TRUE,   quarto_args = NULL,   pandoc_args = NULL,   rep_workers = 1,   packages = targets::tar_option_get(\"packages\"),   library = targets::tar_option_get(\"library\"),   format = targets::tar_option_get(\"format\"),   iteration = targets::tar_option_get(\"iteration\"),   error = targets::tar_option_get(\"error\"),   memory = targets::tar_option_get(\"memory\"),   garbage_collection = targets::tar_option_get(\"garbage_collection\"),   deployment = targets::tar_option_get(\"deployment\"),   priority = targets::tar_option_get(\"priority\"),   resources = targets::tar_option_get(\"resources\"),   retrieval = targets::tar_option_get(\"retrieval\"),   cue = targets::tar_option_get(\"cue\"),   description = targets::tar_option_get(\"description\") )"},{"path":"https://docs.ropensci.org/tarchetypes/reference/tar_quarto_rep_raw.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Parameterized Quarto with dynamic branching (raw version). — tar_quarto_rep_raw","text":"name Symbol, name target. target name must valid name symbol R, must start dot. Subsequent targets can refer name symbolically induce dependency relationship: e.g. tar_target(downstream_target, f(upstream_target)) target named downstream_target depends target upstream_target function f(). addition, target's name determines random number generator seed. way, target runs reproducible seed someone else running pipeline get results, two targets pipeline share seed. (Even dynamic branches different names thus different seeds.) can recover seed completed target tar_meta(your_target, seed) run tar_seed_set() result locally recreate target's initial RNG state. path Character string, file path Quarto source file. Must length 1. working_directory Optional character string, path working directory temporarily set running report. default NULL, runs report current working directory time pipeline run. default recommended vast majority cases. use anything NULL, must manually set value store argument relative working directory calls tar_read() tar_load() report. Otherwise, functions know find data. execute_params Expression object code generate data frame tibble one row per rendered report one column per Quarto parameter. may also include output_file column specify path rendered report. included, output_file column must character vector one one output file row parameters. output_file column included, output files automatically determined using parameters, default file format determined YAML front-matter Quarto source document. first file format used, others generated. Quarto parameters must named tar_group output_file. execute_params argument converted command target supplies Quarto parameters. batches Number batches group Quarto files. large number reports, increase number batches decrease target-level overhead. Defaults number reports render (1 report per batch). extra_files Character vector extra files targets track changes. content one files changes, report rerun parameters next tar_make(). files extra files, include Quarto source document rendered output document, already tracked changes. Examples include bibliographies, style sheets, supporting image files. execute Whether execute embedded code chunks. cache Cache execution output (uses knitr cache jupyter-cache respectively Rmd Jupyter input files). cache_refresh Force refresh execution cache. debug Leave intermediate files place render. quiet Suppress warning messages. quarto_args Character vector quarto CLI flag pass command. mainly advanced usage, e.g can useful new options added quarto CLI yet supported function argument. pandoc_args Additional command line options pass pandoc. rep_workers Positive integer length 1, number local R processes use run reps within batches parallel. 1, reps run sequentially within batch. greater 1, reps within batch run parallel using PSOCK cluster. packages Character vector packages load right target runs output data reloaded downstream targets. Use tar_option_set() set packages globally subsequent targets define. library Character vector library paths try loading packages. format Character length 1, format argument tar_target() store data frame Quarto parameters. iteration Character length 1, iteration argument tar_target() Quarto documents. apply target Quarto parameters (whose iteration always \"group\"). error Character length 1, target stops throws error. Options: \"stop\": whole pipeline stops throws error. \"continue\": whole pipeline keeps going. \"abridge\": currently running targets keep running, new targets launch . (Visit https://books.ropensci.org/targets/debugging.html learn debug targets using saved workspaces.) \"null\": errored target continues returns NULL. data hash deliberately wrong target date next run pipeline. memory Character length 1, memory strategy. \"persistent\", target stays memory end pipeline (unless storage \"worker\", case targets unloads value memory right storing order avoid sending copious data network). \"transient\", target gets unloaded every new target completes. Either way, target gets automatically loaded memory whenever another target needs value. cloud-based dynamic files (e.g. format = \"file\" repository = \"aws\"), memory strategy applies temporary local copy file: \"persistent\" means remains end pipeline deleted, \"transient\" means gets deleted soon possible. former conserves bandwidth, latter conserves local storage. garbage_collection Logical, whether run base::gc() just target runs. deployment Character length 1. deployment \"main\", target run central controlling R process. Otherwise, deployment \"worker\" set pipeline distributed/parallel computing, target runs parallel worker. distributed/parallel computing targets, please visit https://books.ropensci.org/targets/crew.html. priority Numeric length 1 0 1. Controls targets get deployed first multiple competing targets ready simultaneously. Targets priorities closer 1 get dispatched earlier (polled earlier tar_make_future()). resources Object returned tar_resources() optional settings high-performance computing functionality, alternative data storage formats, optional capabilities targets. See tar_resources() details. retrieval Character length 1, relevant tar_make_clustermq() tar_make_future(). Must one following values: \"main\": target's dependencies loaded host machine sent worker target runs. \"worker\": worker loads targets dependencies. \"none\": dependencies loaded . choice almost never recommended. niche situations, e.g. data needs loaded explicitly another language. cue optional object tar_cue() customize rules decide whether target date. description Character length 1, custom free-form human-readable text description target. Descriptions appear target labels functions like tar_manifest() tar_visnetwork(), let select subsets targets names argument functions like tar_make(). example, tar_manifest(names = tar_described_as(starts_with(\"survival model\"))) lists targets whose descriptions start character string \"survival model\".","code":""},{"path":"https://docs.ropensci.org/tarchetypes/reference/tar_quarto_rep_raw.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Parameterized Quarto with dynamic branching (raw version). — tar_quarto_rep_raw","text":"list target objects render Quarto reports. Changes parameters, source file, dependencies, etc. cause appropriate targets rerun tar_make(). See \"Target objects\" section background.","code":""},{"path":"https://docs.ropensci.org/tarchetypes/reference/tar_quarto_rep_raw.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Parameterized Quarto with dynamic branching (raw version). — tar_quarto_rep_raw","text":"tar_quarto_rep_raw() alternative tar_target_raw() parameterized Quarto reports depend targets. Parameters must given data frame one row per rendered report one column per parameter. optional output_file column may included set output file path rendered report. (See execute_params argument details.) Quarto source mention dependency targets tar_load() tar_read() active code chunks (also allows render report outside pipeline _targets/ data store already exists appropriate defaults specified parameters). (use tar_load_raw() tar_read_raw() .) , tar_quarto() defines special kind target. 1. Finds tar_load()/tar_read() dependencies report inserts target's command. enforces proper dependency relationships. (use tar_load_raw() tar_read_raw() .) 2. Sets format = \"file\" (see tar_target()) targets watches files returned paths reruns report files change. 3. Configures target's command return output report files: rendered document, source file, *_files/ directory exists. file paths relative paths project stays portable. 4. Forces report run user's current working directory instead working directory report. 5. Sets convenient default options deployment = \"main\" target quiet = TRUE quarto::quarto_render().","code":""},{"path":"https://docs.ropensci.org/tarchetypes/reference/tar_quarto_rep_raw.html","id":"target-objects","dir":"Reference","previous_headings":"","what":"Target objects","title":"Parameterized Quarto with dynamic branching (raw version). — tar_quarto_rep_raw","text":"tarchetypes functions target factories, means return target objects lists target objects. Target objects represent skippable steps analysis pipeline described https://books.ropensci.org/targets/. Please read walkthrough https://books.ropensci.org/targets/walkthrough.html understand role target objects analysis pipelines. developers, https://wlandau.github.io/targetopia/contributing.html#target-factories explains target factories (functions like one generate targets) design specification https://books.ropensci.org/targets-design/ details structure composition target objects.","code":""},{"path":"https://docs.ropensci.org/tarchetypes/reference/tar_quarto_rep_raw.html","id":"replicate-specific-seeds","dir":"Reference","previous_headings":"","what":"Replicate-specific seeds","title":"Parameterized Quarto with dynamic branching (raw version). — tar_quarto_rep_raw","text":"ordinary pipelines, target unique deterministic pseudo-random number generator seed derived target name. batched replicate, however, batch target multiple replicate within batch. tar_rep() friends give replicate unique seed. replicate-specific seed created based dynamic parent target name, tar_option_get(\"seed\") (targets version 0.13.5.9000 ), batch index, rep-within-batch index. seed set just replicate runs. Replicate-specific seeds invariant batching structure. words, tar_rep(name = x, command = rnorm(1), batches = 100, reps = 1, ...) produces numerical output tar_rep(name = x, command = rnorm(1), batches = 10, reps = 10, ...) (different batch names). target factories seed scheme tar_rep2(), tar_map_rep(), tar_map2_count(), tar_map2_size(), tar_render_rep(). tar_map2_*() functions, possible manually supply seeds command1 argument invoke custom code command2 (set.seed(), withr::with_seed, withr::local_seed()). tar_render_rep(), custom seeds can supplied params argument invoked individual R Markdown reports. Likewise tar_quarto_rep() execute_params argument.","code":""},{"path":"https://docs.ropensci.org/tarchetypes/reference/tar_quarto_rep_raw.html","id":"literate-programming-limitations","dir":"Reference","previous_headings":"","what":"Literate programming limitations","title":"Parameterized Quarto with dynamic branching (raw version). — tar_quarto_rep_raw","text":"Literate programming files messy variable, functions like tar_render() limitations: * Child documents tracked changes. * Upstream target dependencies detected tar_read() /tar_load() called user-defined function. addition, single target names must mentioned must symbols. tar_load(\"x\") tar_load(contains(\"x\")) may detect target x. * Special/optional input/output files may detected cases. * tar_render() friends local files . integrate cloud storage capabilities targets.","code":""},{"path":"https://docs.ropensci.org/tarchetypes/reference/tar_quarto_rep_raw.html","id":"quarto-troubleshooting","dir":"Reference","previous_headings":"","what":"Quarto troubleshooting","title":"Parameterized Quarto with dynamic branching (raw version). — tar_quarto_rep_raw","text":"encounter difficult errors, please read https://github.com/quarto-dev/quarto-r/issues/16. addition, please try reproduce error using quarto::quarto_render(\"your_report.qmd\", execute_dir = getwd()) without using targets . Isolating errors way makes much easier solve.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/tarchetypes/reference/tar_quarto_rep_raw.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Parameterized Quarto with dynamic branching (raw version). — tar_quarto_rep_raw","text":"","code":"if (identical(Sys.getenv(\"TAR_LONG_EXAMPLES\"), \"true\")) { targets::tar_dir({ # tar_dir() runs code from a temporary directory. # Parameterized Quarto: lines <- c(   \"---\",   \"title: 'report.qmd source file'\",   \"output_format: html_document\",   \"params:\",   \"  par: \\\"default value\\\"\",   \"---\",   \"Assume these lines are in a file called report.qmd.\",   \"```{r}\",   \"print(params$par)\",   \"```\" ) writeLines(lines, \"report.qmd\") # In tar_dir(), not the user's file space. # The following pipeline will run the report for each row of params. targets::tar_script({   library(tarchetypes)   list(     tar_quarto_rep_raw(       \"report\",       path = \"report.qmd\",       execute_params = quote(tibble::tibble(par = c(1, 2)))     )   ) }, ask = FALSE) # Then, run the targets pipeline as usual. }) }"},{"path":"https://docs.ropensci.org/tarchetypes/reference/tar_quarto_rep_rep.html","id":null,"dir":"Reference","previous_headings":"","what":"Run a rep in a tar_quarto_rep(). — tar_quarto_rep_rep","title":"Run a rep in a tar_quarto_rep(). — tar_quarto_rep_rep","text":"user-side function. invoke directly.","code":""},{"path":"https://docs.ropensci.org/tarchetypes/reference/tar_quarto_rep_rep.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run a rep in a tar_quarto_rep(). — tar_quarto_rep_rep","text":"","code":"tar_quarto_rep_rep(rep, execute_params, args, default_output_file, seeds)"},{"path":"https://docs.ropensci.org/tarchetypes/reference/tar_quarto_rep_rep.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Run a rep in a tar_quarto_rep(). — tar_quarto_rep_rep","text":"rep Rep number. execute_params Quarto parameters. args Arguments quarto::quarto_render(). default_output_file Default Quarto output file. seeds Random number generator seeds batch.","code":""},{"path":"https://docs.ropensci.org/tarchetypes/reference/tar_quarto_rep_rep.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Run a rep in a tar_quarto_rep(). — tar_quarto_rep_rep","text":"Output file paths.","code":""},{"path":"https://docs.ropensci.org/tarchetypes/reference/tar_quarto_rep_rep.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Run a rep in a tar_quarto_rep(). — tar_quarto_rep_rep","text":"","code":"# See the examples of tar_quarto_rep()."},{"path":"https://docs.ropensci.org/tarchetypes/reference/tar_quarto_rep_run.html","id":null,"dir":"Reference","previous_headings":"","what":"Render a batch of parameterized Quarto reports\ninside a tar_quarto_rep() target. — tar_quarto_rep_run","title":"Render a batch of parameterized Quarto reports\ninside a tar_quarto_rep() target. — tar_quarto_rep_run","text":"Internal function needed tar_quarto(). Users invoke directly.","code":""},{"path":"https://docs.ropensci.org/tarchetypes/reference/tar_quarto_rep_run.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Render a batch of parameterized Quarto reports\ninside a tar_quarto_rep() target. — tar_quarto_rep_run","text":"","code":"tar_quarto_rep_run(   args,   execute_params,   extra_files,   deps,   default_output_file,   rep_workers )"},{"path":"https://docs.ropensci.org/tarchetypes/reference/tar_quarto_rep_run.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Render a batch of parameterized Quarto reports\ninside a tar_quarto_rep() target. — tar_quarto_rep_run","text":"args named list arguments quarto::quarto_render(). execute_params data frame Quarto parameters branch . extra_files Character vector extra files targets track changes. content one files changes, report rerun parameters next tar_make(). files extra files, include Quarto source document rendered output document, already tracked changes. Examples include bibliographies, style sheets, supporting image files. deps unnamed list target dependencies Quarto report, automatically created tar_quarto_rep(). default_output_file Output file path determined YAML front-matter Quarto source document. Automatic output file names based file. rep_workers Positive integer length 1, number local R processes use run reps within batches parallel. 1, reps run sequentially within batch. greater 1, reps within batch run parallel using PSOCK cluster.","code":""},{"path":"https://docs.ropensci.org/tarchetypes/reference/tar_quarto_rep_run.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Render a batch of parameterized Quarto reports\ninside a tar_quarto_rep() target. — tar_quarto_rep_run","text":"Character vector path Quarto source file rendered output file. paths depend input source path, defaults.","code":""},{"path":"https://docs.ropensci.org/tarchetypes/reference/tar_quarto_rep_run.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Render a batch of parameterized Quarto reports\ninside a tar_quarto_rep() target. — tar_quarto_rep_run","text":"","code":"if (identical(Sys.getenv(\"TAR_LONG_EXAMPLES\"), \"true\")) { targets::tar_dir({ # tar_dir() runs code from a temporary directory. # Parameterized Quarto: lines <- c(   \"---\",   \"title: 'report.qmd source file'\",   \"output_format: html_document\",   \"params:\",   \"  par: \\\"default value\\\"\",   \"---\",   \"Assume these lines are in a file called report.qmd.\",   \"```{r}\",   \"print(params$par)\",   \"```\" ) writeLines(lines, \"report.qmd\") # In tar_dir(), not the user's file space. args <- list(   input = \"report.qmd\",   execute = TRUE,   execute_dir = quote(getwd()),   execute_daemon = 0,   execute_daemon_restart = FALSE,   execute_debug = FALSE,   cache = FALSE,   cache_refresh = FALSE,   debug = FALSE,   quiet = TRUE,   as_job = FALSE ) execute_params <- tibble::tibble(   par = c(\"non-default value 1\", \"non-default value 2\"),   output_file = c(\"report1.html\", \"report2.html\") ) tar_quarto_rep_run(   args = args,   execute_params = execute_params,   extra_files = character(0),   deps = NULL,   default_output_file = \"report_default.html\" ) }) }"},{"path":"https://docs.ropensci.org/tarchetypes/reference/tar_quarto_rep_run_params.html","id":null,"dir":"Reference","previous_headings":"","what":"Prepare Quarto parameters for tar_quarto_rep(). — tar_quarto_rep_run_params","title":"Prepare Quarto parameters for tar_quarto_rep(). — tar_quarto_rep_run_params","text":"Internal function needed tar_quarto_rep(). Users invoke directly.","code":""},{"path":"https://docs.ropensci.org/tarchetypes/reference/tar_quarto_rep_run_params.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Prepare Quarto parameters for tar_quarto_rep(). — tar_quarto_rep_run_params","text":"","code":"tar_quarto_rep_run_params(execute_params, batches, default_output_file)"},{"path":"https://docs.ropensci.org/tarchetypes/reference/tar_quarto_rep_run_params.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Prepare Quarto parameters for tar_quarto_rep(). — tar_quarto_rep_run_params","text":"execute_params Data frame Quarto parameters. batches Number batches split renderings. default_output_file Default output file path deduced YAML front-matter Quarto source document.","code":""},{"path":"https://docs.ropensci.org/tarchetypes/reference/tar_quarto_rep_run_params.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Prepare Quarto parameters for tar_quarto_rep(). — tar_quarto_rep_run_params","text":"batched data frame Quarto parameters.","code":""},{"path":"https://docs.ropensci.org/tarchetypes/reference/tar_quarto_rep_run_params.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Prepare Quarto parameters for tar_quarto_rep(). — tar_quarto_rep_run_params","text":"","code":"execute_params <- tibble::tibble(param1 = letters[seq_len(4)]) tar_quarto_rep_run_params(execute_params, 1, \"report.html\") #> # A tibble: 4 × 3 #>   param1 output_file          tar_group #>   <chr>  <chr>                    <int> #> 1 a      report_e5491e5a.html         1 #> 2 b      report_7a625cd7.html         1 #> 3 c      report_09fcdaee.html         1 #> 4 d      report_3d64f4e0.html         1 tar_quarto_rep_run_params(execute_params, 2, \"report.html\") #> # A tibble: 4 × 3 #>   param1 output_file          tar_group #>   <chr>  <chr>                    <int> #> 1 a      report_e5491e5a.html         1 #> 2 b      report_7a625cd7.html         1 #> 3 c      report_09fcdaee.html         2 #> 4 d      report_3d64f4e0.html         2 tar_quarto_rep_run_params(execute_params, 3, \"report.html\") #> # A tibble: 4 × 3 #>   param1 output_file          tar_group #>   <chr>  <chr>                    <int> #> 1 a      report_e5491e5a.html         1 #> 2 b      report_7a625cd7.html         1 #> 3 c      report_09fcdaee.html         2 #> 4 d      report_3d64f4e0.html         3 tar_quarto_rep_run_params(execute_params, 4, \"report.html\") #> # A tibble: 4 × 3 #>   param1 output_file          tar_group #>   <chr>  <chr>                    <int> #> 1 a      report_e5491e5a.html         1 #> 2 b      report_7a625cd7.html         2 #> 3 c      report_09fcdaee.html         3 #> 4 d      report_3d64f4e0.html         4"},{"path":"https://docs.ropensci.org/tarchetypes/reference/tar_quarto_run.html","id":null,"dir":"Reference","previous_headings":"","what":"Render a Quarto project inside a tar_quarto() target. — tar_quarto_run","title":"Render a Quarto project inside a tar_quarto() target. — tar_quarto_run","text":"Internal function needed tar_quarto(). Users invoke directly.","code":""},{"path":"https://docs.ropensci.org/tarchetypes/reference/tar_quarto_run.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Render a Quarto project inside a tar_quarto() target. — tar_quarto_run","text":"","code":"tar_quarto_run(args, deps, sources, output, input, profile)"},{"path":"https://docs.ropensci.org/tarchetypes/reference/tar_quarto_run.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Render a Quarto project inside a tar_quarto() target. — tar_quarto_run","text":"args named list arguments quarto::quarto_render(). deps unnamed list target dependencies Quarto source files. sources Character vector Quarto source files. output Character vector Quarto output files directories. input Character vector non-source Quarto input files directories. profile Quarto profile.","code":""},{"path":"https://docs.ropensci.org/tarchetypes/reference/tar_quarto_run.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Render a Quarto project inside a tar_quarto() target. — tar_quarto_run","text":"Sorted character vector paths important files targets track changes.","code":""},{"path":"https://docs.ropensci.org/tarchetypes/reference/tar_quarto_run.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Render a Quarto project inside a tar_quarto() target. — tar_quarto_run","text":"","code":"if (identical(Sys.getenv(\"TAR_LONG_EXAMPLES\"), \"true\")) { targets::tar_dir({  # tar_dir() runs code from a temporary directory. # Unparameterized Quarto document: lines <- c(   \"---\",   \"title: Quarto source file\",   \"output_format: html\",   \"---\",   \"Assume these lines are in the Quarto source file.\",   \"```{r}\",   \"1 + 1\",   \"```\" ) tmp <- tempfile(fileext = \".qmd\") writeLines(lines, tmp) args <- list(input = tmp, quiet = TRUE) files <- fs::path_ext_set(tmp, \"html\") tar_quarto_run(args = args, deps = list(), files = files) file.exists(files) }) }"},{"path":"https://docs.ropensci.org/tarchetypes/reference/tar_render.html","id":null,"dir":"Reference","previous_headings":"","what":"Target with an R Markdown document. — tar_render","title":"Target with an R Markdown document. — tar_render","text":"Shorthand include R Markdown document targets pipeline.","code":""},{"path":"https://docs.ropensci.org/tarchetypes/reference/tar_render.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Target with an R Markdown document. — tar_render","text":"","code":"tar_render(   name,   path,   output_file = NULL,   working_directory = NULL,   tidy_eval = targets::tar_option_get(\"tidy_eval\"),   packages = targets::tar_option_get(\"packages\"),   library = targets::tar_option_get(\"library\"),   error = targets::tar_option_get(\"error\"),   memory = targets::tar_option_get(\"memory\"),   garbage_collection = targets::tar_option_get(\"garbage_collection\"),   deployment = \"main\",   priority = targets::tar_option_get(\"priority\"),   resources = targets::tar_option_get(\"resources\"),   retrieval = targets::tar_option_get(\"retrieval\"),   cue = targets::tar_option_get(\"cue\"),   description = targets::tar_option_get(\"description\"),   quiet = TRUE,   ... )"},{"path":"https://docs.ropensci.org/tarchetypes/reference/tar_render.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Target with an R Markdown document. — tar_render","text":"name Symbol, name target. target name must valid name symbol R, must start dot. Subsequent targets can refer name symbolically induce dependency relationship: e.g. tar_target(downstream_target, f(upstream_target)) target named downstream_target depends target upstream_target function f(). addition, target's name determines random number generator seed. way, target runs reproducible seed someone else running pipeline get results, two targets pipeline share seed. (Even dynamic branches different names thus different seeds.) can recover seed completed target tar_meta(your_target, seed) run tar_seed_set() result locally recreate target's initial RNG state. path Character string, file path R Markdown source file. Must length 1. output_file Character string, file path rendered output file. working_directory Optional character string, path working directory temporarily set running report. default NULL, runs report current working directory time pipeline run. default recommended vast majority cases. use anything NULL, must manually set value store argument relative working directory calls tar_read() tar_load() report. Otherwise, functions know find data. tidy_eval Logical, whether enable tidy evaluation interpreting command pattern. TRUE, can use \"bang-bang\" operator !! programmatically insert values global objects. packages Character vector packages load right target runs output data reloaded downstream targets. Use tar_option_set() set packages globally subsequent targets define. library Character vector library paths try loading packages. error Character length 1, target stops throws error. Options: \"stop\": whole pipeline stops throws error. \"continue\": whole pipeline keeps going. \"abridge\": currently running targets keep running, new targets launch . (Visit https://books.ropensci.org/targets/debugging.html learn debug targets using saved workspaces.) \"null\": errored target continues returns NULL. data hash deliberately wrong target date next run pipeline. memory Character length 1, memory strategy. \"persistent\", target stays memory end pipeline (unless storage \"worker\", case targets unloads value memory right storing order avoid sending copious data network). \"transient\", target gets unloaded every new target completes. Either way, target gets automatically loaded memory whenever another target needs value. cloud-based dynamic files (e.g. format = \"file\" repository = \"aws\"), memory strategy applies temporary local copy file: \"persistent\" means remains end pipeline deleted, \"transient\" means gets deleted soon possible. former conserves bandwidth, latter conserves local storage. garbage_collection Logical, whether run base::gc() just target runs. deployment Character length 1. deployment \"main\", target run central controlling R process. Otherwise, deployment \"worker\" set pipeline distributed/parallel computing, target runs parallel worker. distributed/parallel computing targets, please visit https://books.ropensci.org/targets/crew.html. priority Numeric length 1 0 1. Controls targets get deployed first multiple competing targets ready simultaneously. Targets priorities closer 1 get dispatched earlier (polled earlier tar_make_future()). resources Object returned tar_resources() optional settings high-performance computing functionality, alternative data storage formats, optional capabilities targets. See tar_resources() details. retrieval Character length 1, relevant tar_make_clustermq() tar_make_future(). Must one following values: \"main\": target's dependencies loaded host machine sent worker target runs. \"worker\": worker loads targets dependencies. \"none\": dependencies loaded . choice almost never recommended. niche situations, e.g. data needs loaded explicitly another language. cue optional object tar_cue() customize rules decide whether target date. description Character length 1, custom free-form human-readable text description target. Descriptions appear target labels functions like tar_manifest() tar_visnetwork(), let select subsets targets names argument functions like tar_make(). example, tar_manifest(names = tar_described_as(starts_with(\"survival model\"))) lists targets whose descriptions start character string \"survival model\". quiet option suppress printing rendering knitr, pandoc command line others. suppress printing last \"Output created: \" message, can set rmarkdown.render.message FALSE ... Named arguments rmarkdown::render(). arguments evaluated target actually runs tar_make(), target defined. means, example, can use upstream targets parameters parameterized R Markdown reports. tar_render(your_target, \"your_report.Rmd\", params = list(your_param = your_target)) # nolint run rmarkdown::render(\"your_report.Rmd\", params = list(your_param = your_target)). # nolint parameterized reports, recommended supply distinct output_file argument tar_render() call set useful defaults parameters R Markdown source. See examples section demonstration.","code":""},{"path":"https://docs.ropensci.org/tarchetypes/reference/tar_render.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Target with an R Markdown document. — tar_render","text":"target object format = \"file\". target runs, returns character vector file paths: rendered document, source file, *_files/ directory exists. Unlike rmarkdown::render(), returned paths relative paths ensure portability (project can moved one file system another without invalidating target). See \"Target objects\" section background.","code":""},{"path":"https://docs.ropensci.org/tarchetypes/reference/tar_render.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Target with an R Markdown document. — tar_render","text":"tar_render() alternative tar_target() R Markdown reports depend targets. R Markdown source mention dependency targets tar_load() tar_read() active code chunks (also allows render report outside pipeline _targets/ data store already exists). (use tar_load_raw() tar_read_raw() .) , tar_render() defines special kind target. 1. Finds tar_load()/tar_read() dependencies report inserts target's command. enforces proper dependency relationships. (use tar_load_raw() tar_read_raw() .) 2. Sets format = \"file\" (see tar_target()) targets watches files returned paths reruns report files change. 3. Configures target's command return output report files input source file. file paths relative paths project stays portable. 4. Forces report run user's current working directory instead working directory report. 5. Sets convenient default options deployment = \"main\" target quiet = TRUE rmarkdown::render().","code":""},{"path":"https://docs.ropensci.org/tarchetypes/reference/tar_render.html","id":"literate-programming-limitations","dir":"Reference","previous_headings":"","what":"Literate programming limitations","title":"Target with an R Markdown document. — tar_render","text":"Literate programming files messy variable, functions like tar_render() limitations: * Child documents tracked changes. * Upstream target dependencies detected tar_read() /tar_load() called user-defined function. addition, single target names must mentioned must symbols. tar_load(\"x\") tar_load(contains(\"x\")) may detect target x. * Special/optional input/output files may detected cases. * tar_render() friends local files . integrate cloud storage capabilities targets.","code":""},{"path":"https://docs.ropensci.org/tarchetypes/reference/tar_render.html","id":"target-objects","dir":"Reference","previous_headings":"","what":"Target objects","title":"Target with an R Markdown document. — tar_render","text":"tarchetypes functions target factories, means return target objects lists target objects. Target objects represent skippable steps analysis pipeline described https://books.ropensci.org/targets/. Please read walkthrough https://books.ropensci.org/targets/walkthrough.html understand role target objects analysis pipelines. developers, https://wlandau.github.io/targetopia/contributing.html#target-factories explains target factories (functions like one generate targets) design specification https://books.ropensci.org/targets-design/ details structure composition target objects.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/tarchetypes/reference/tar_render.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Target with an R Markdown document. — tar_render","text":"","code":"if (identical(Sys.getenv(\"TAR_LONG_EXAMPLES\"), \"true\")) { targets::tar_dir({  # tar_dir() runs code from a temporary directory. # Unparameterized R Markdown: lines <- c(   \"---\",   \"title: report.Rmd source file\",   \"output_format: html_document\",   \"---\",   \"Assume these lines are in report.Rmd.\",   \"```{r}\",   \"targets::tar_read(data)\",   \"```\" ) # Include the report in a pipeline as follows. targets::tar_script({   library(tarchetypes)   list(     tar_target(data, data.frame(x = seq_len(26), y = letters)),     tar_render(report, \"report.Rmd\")   ) }, ask = FALSE) # Then, run the targets pipeline as usual.  # Parameterized R Markdown: lines <- c(   \"---\",   \"title: 'report.Rmd source file with parameters'\",   \"output_format: html_document\",   \"params:\",   \"  your_param: \\\"default value\\\"\",   \"---\",   \"Assume these lines are in report.Rmd.\",   \"```{r}\",   \"print(params$your_param)\",   \"```\" ) # Include the report in the pipeline as follows. targets::tar_script({   library(tarchetypes)   list(     tar_target(data, data.frame(x = seq_len(26), y = letters)),     tar_render(report, \"report.Rmd\", params = list(your_param = data))   ) }, ask = FALSE) }) # Then, run the targets pipeline as usual. }"},{"path":"https://docs.ropensci.org/tarchetypes/reference/tar_render_raw.html","id":null,"dir":"Reference","previous_headings":"","what":"Target with an R Markdown document (raw version). — tar_render_raw","title":"Target with an R Markdown document (raw version). — tar_render_raw","text":"Shorthand include R Markdown document targets pipeline (raw version)","code":""},{"path":"https://docs.ropensci.org/tarchetypes/reference/tar_render_raw.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Target with an R Markdown document (raw version). — tar_render_raw","text":"","code":"tar_render_raw(   name,   path,   output_file = NULL,   working_directory = NULL,   packages = targets::tar_option_get(\"packages\"),   library = targets::tar_option_get(\"library\"),   error = targets::tar_option_get(\"error\"),   deployment = \"main\",   priority = targets::tar_option_get(\"priority\"),   resources = targets::tar_option_get(\"resources\"),   retrieval = targets::tar_option_get(\"retrieval\"),   cue = targets::tar_option_get(\"cue\"),   description = targets::tar_option_get(\"description\"),   quiet = TRUE,   render_arguments = quote(list()) )"},{"path":"https://docs.ropensci.org/tarchetypes/reference/tar_render_raw.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Target with an R Markdown document (raw version). — tar_render_raw","text":"name Character length 1, name target. path Character string, file path R Markdown source file. Must length 1. output_file Character string, file path rendered output file. working_directory Optional character string, path working directory temporarily set running report. default NULL, runs report current working directory time pipeline run. default recommended vast majority cases. use anything NULL, must manually set value store argument relative working directory calls tar_read() tar_load() report. Otherwise, functions know find data. packages Character vector packages load right target runs output data reloaded downstream targets. Use tar_option_set() set packages globally subsequent targets define. library Character vector library paths try loading packages. error Character length 1, target stops throws error. Options: \"stop\": whole pipeline stops throws error. \"continue\": whole pipeline keeps going. \"abridge\": currently running targets keep running, new targets launch . (Visit https://books.ropensci.org/targets/debugging.html learn debug targets using saved workspaces.) \"null\": errored target continues returns NULL. data hash deliberately wrong target date next run pipeline. deployment Character length 1. deployment \"main\", target run central controlling R process. Otherwise, deployment \"worker\" set pipeline distributed/parallel computing, target runs parallel worker. distributed/parallel computing targets, please visit https://books.ropensci.org/targets/crew.html. priority Numeric length 1 0 1. Controls targets get deployed first multiple competing targets ready simultaneously. Targets priorities closer 1 get dispatched earlier (polled earlier tar_make_future()). resources Object returned tar_resources() optional settings high-performance computing functionality, alternative data storage formats, optional capabilities targets. See tar_resources() details. retrieval Character length 1, relevant tar_make_clustermq() tar_make_future(). Must one following values: \"main\": target's dependencies loaded host machine sent worker target runs. \"worker\": worker loads targets dependencies. \"none\": dependencies loaded . choice almost never recommended. niche situations, e.g. data needs loaded explicitly another language. cue optional object tar_cue() customize rules decide whether target date. description Character length 1, custom free-form human-readable text description target. Descriptions appear target labels functions like tar_manifest() tar_visnetwork(), let select subsets targets names argument functions like tar_make(). example, tar_manifest(names = tar_described_as(starts_with(\"survival model\"))) lists targets whose descriptions start character string \"survival model\". quiet option suppress printing rendering knitr, pandoc command line others. suppress printing last \"Output created: \" message, can set rmarkdown.render.message FALSE render_arguments Optional language object list named arguments rmarkdown::render(). expression object. (Use quote(), expression().) reason quoting arguments may depend upstream targets whose values available time target defined, tar_render_raw() \"raw\" version function, want avoid non-standard evaluation.","code":""},{"path":"https://docs.ropensci.org/tarchetypes/reference/tar_render_raw.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Target with an R Markdown document (raw version). — tar_render_raw","text":"target object format = \"file\". target runs, returns character vector file paths: rendered document, source file, *_files/ directory exists. Unlike rmarkdown::render(), returned paths relative paths ensure portability (project can moved one file system another without invalidating target). See \"Target objects\" section background.","code":""},{"path":"https://docs.ropensci.org/tarchetypes/reference/tar_render_raw.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Target with an R Markdown document (raw version). — tar_render_raw","text":"tar_render_raw() just like tar_render() except uses standard evaluation. name argument character vector, render_arguments argument language object.","code":""},{"path":"https://docs.ropensci.org/tarchetypes/reference/tar_render_raw.html","id":"target-objects","dir":"Reference","previous_headings":"","what":"Target objects","title":"Target with an R Markdown document (raw version). — tar_render_raw","text":"tarchetypes functions target factories, means return target objects lists target objects. Target objects represent skippable steps analysis pipeline described https://books.ropensci.org/targets/. Please read walkthrough https://books.ropensci.org/targets/walkthrough.html understand role target objects analysis pipelines. developers, https://wlandau.github.io/targetopia/contributing.html#target-factories explains target factories (functions like one generate targets) design specification https://books.ropensci.org/targets-design/ details structure composition target objects.","code":""},{"path":"https://docs.ropensci.org/tarchetypes/reference/tar_render_raw.html","id":"literate-programming-limitations","dir":"Reference","previous_headings":"","what":"Literate programming limitations","title":"Target with an R Markdown document (raw version). — tar_render_raw","text":"Literate programming files messy variable, functions like tar_render() limitations: * Child documents tracked changes. * Upstream target dependencies detected tar_read() /tar_load() called user-defined function. addition, single target names must mentioned must symbols. tar_load(\"x\") tar_load(contains(\"x\")) may detect target x. * Special/optional input/output files may detected cases. * tar_render() friends local files . integrate cloud storage capabilities targets.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/tarchetypes/reference/tar_render_raw.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Target with an R Markdown document (raw version). — tar_render_raw","text":"","code":"if (identical(Sys.getenv(\"TAR_LONG_EXAMPLES\"), \"true\")) { targets::tar_dir({ # tar_dir() runs code from a temporary directory. # Unparameterized R Markdown report: lines <- c(   \"---\",   \"title: 'report.Rmd source file'\",   \"output_format: html_document\",   \"---\",   \"Assume these lines are in report.Rmd.\",   \"```{r}\",   \"targets::tar_read(data)\",   \"```\" ) # Include the report in the pipeline as follows: targets::tar_script({   library(tarchetypes)   list(     tar_target(data, data.frame(x = seq_len(26), y = letters)),     tar_render_raw(\"report\", \"report.Rmd\")   ) }, ask = FALSE) # Then, run the targets pipeline as usual.  # Parameterized R Markdown: lines <- c(   \"---\",   \"title: 'report.Rmd source file with parameters.'\",   \"output_format: html_document\",   \"params:\",   \"  your_param: \\\"default value\\\"\",   \"---\",   \"Assume these lines are in report.Rmd.\",   \"```{r}\",   \"print(params$your_param)\",   \"```\" ) # Include this parameterized report in the pipeline as follows. targets::tar_script({   library(tarchetypes)   list(     tar_target(data, data.frame(x = seq_len(26), y = letters)),     tar_render_raw(       \"report\",       \"report.Rmd\",       render_arguments = quote(list(params = list(your_param = data)))     )   ) }, ask = FALSE) # Then, run the targets pipeline as usual. }) }"},{"path":"https://docs.ropensci.org/tarchetypes/reference/tar_render_rep.html","id":null,"dir":"Reference","previous_headings":"","what":"Parameterized R Markdown with dynamic branching. — tar_render_rep","title":"Parameterized R Markdown with dynamic branching. — tar_render_rep","text":"Targets render parameterized R Markdown report multiple sets parameters.","code":""},{"path":"https://docs.ropensci.org/tarchetypes/reference/tar_render_rep.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Parameterized R Markdown with dynamic branching. — tar_render_rep","text":"","code":"tar_render_rep(   name,   path,   working_directory = NULL,   params = data.frame(),   batches = NULL,   rep_workers = 1,   packages = targets::tar_option_get(\"packages\"),   library = targets::tar_option_get(\"library\"),   format = targets::tar_option_get(\"format\"),   iteration = targets::tar_option_get(\"iteration\"),   error = targets::tar_option_get(\"error\"),   memory = targets::tar_option_get(\"memory\"),   garbage_collection = targets::tar_option_get(\"garbage_collection\"),   deployment = targets::tar_option_get(\"deployment\"),   priority = targets::tar_option_get(\"priority\"),   resources = targets::tar_option_get(\"resources\"),   retrieval = targets::tar_option_get(\"retrieval\"),   cue = targets::tar_option_get(\"cue\"),   description = targets::tar_option_get(\"description\"),   quiet = TRUE,   ... )"},{"path":"https://docs.ropensci.org/tarchetypes/reference/tar_render_rep.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Parameterized R Markdown with dynamic branching. — tar_render_rep","text":"name Symbol, name target. target name must valid name symbol R, must start dot. Subsequent targets can refer name symbolically induce dependency relationship: e.g. tar_target(downstream_target, f(upstream_target)) target named downstream_target depends target upstream_target function f(). addition, target's name determines random number generator seed. way, target runs reproducible seed someone else running pipeline get results, two targets pipeline share seed. (Even dynamic branches different names thus different seeds.) can recover seed completed target tar_meta(your_target, seed) run tar_seed_set() result locally recreate target's initial RNG state. path Character string, file path R Markdown source file. Must length 1. working_directory Optional character string, path working directory temporarily set running report. default NULL, runs report current working directory time pipeline run. default recommended vast majority cases. use anything NULL, must manually set value store argument relative working directory calls tar_read() tar_load() report. Otherwise, functions know find data. params Code generate data frame tibble one row per rendered report one column per R Markdown parameter. may also include output_file column specify path rendered report. params argument converted command target supplies R Markdown parameters. batches Number batches. also number dynamic branches created tar_make(). rep_workers Positive integer length 1, number local R processes use run reps within batches parallel. 1, reps run sequentially within batch. greater 1, reps within batch run parallel using PSOCK cluster. packages Character vector packages load right target runs output data reloaded downstream targets. Use tar_option_set() set packages globally subsequent targets define. library Character vector library paths try loading packages. format Optional storage format target's return value. exception format = \"file\", target gets file _targets/objects, format different way save load file. See \"Storage formats\" section detailed list possible data storage formats. iteration Character length 1, name iteration mode target. Choices: \"vector\": branching happens vectors::vec_slice() aggregation happens vctrs::vec_c(). \"list\", branching happens [[]] aggregation happens list(). case list iteration, tar_read(your_target) return list lists, outer list one element per batch inner list one element per rep within batch. un-batch nested list, call tar_read(your_target, recursive = FALSE). \"group\": dplyr::group_by()-like functionality branch subsets data frame. target's return value must data frame special tar_group column consecutive integers 1 number groups. integer designates group, branch created collection rows group. See tar_group() function see can create special tar_group column dplyr::group_by(). error Character length 1, target stops throws error. Options: \"stop\": whole pipeline stops throws error. \"continue\": whole pipeline keeps going. \"abridge\": currently running targets keep running, new targets launch . (Visit https://books.ropensci.org/targets/debugging.html learn debug targets using saved workspaces.) \"null\": errored target continues returns NULL. data hash deliberately wrong target date next run pipeline. memory Character length 1, memory strategy. \"persistent\", target stays memory end pipeline (unless storage \"worker\", case targets unloads value memory right storing order avoid sending copious data network). \"transient\", target gets unloaded every new target completes. Either way, target gets automatically loaded memory whenever another target needs value. cloud-based dynamic files (e.g. format = \"file\" repository = \"aws\"), memory strategy applies temporary local copy file: \"persistent\" means remains end pipeline deleted, \"transient\" means gets deleted soon possible. former conserves bandwidth, latter conserves local storage. garbage_collection Logical, whether run base::gc() just target runs. deployment Character length 1. deployment \"main\", target run central controlling R process. Otherwise, deployment \"worker\" set pipeline distributed/parallel computing, target runs parallel worker. distributed/parallel computing targets, please visit https://books.ropensci.org/targets/crew.html. priority Numeric length 1 0 1. Controls targets get deployed first multiple competing targets ready simultaneously. Targets priorities closer 1 get dispatched earlier (polled earlier tar_make_future()). resources Object returned tar_resources() optional settings high-performance computing functionality, alternative data storage formats, optional capabilities targets. See tar_resources() details. retrieval Character length 1, relevant tar_make_clustermq() tar_make_future(). Must one following values: \"main\": target's dependencies loaded host machine sent worker target runs. \"worker\": worker loads targets dependencies. \"none\": dependencies loaded . choice almost never recommended. niche situations, e.g. data needs loaded explicitly another language. cue optional object tar_cue() customize rules decide whether target date. description Character length 1, custom free-form human-readable text description target. Descriptions appear target labels functions like tar_manifest() tar_visnetwork(), let select subsets targets names argument functions like tar_make(). example, tar_manifest(names = tar_described_as(starts_with(\"survival model\"))) lists targets whose descriptions start character string \"survival model\". quiet option suppress printing rendering knitr, pandoc command line others. suppress printing last \"Output created: \" message, can set rmarkdown.render.message FALSE ... named arguments rmarkdown::render(). Unlike tar_render(), arguments evaluated target defined, run. (reason delay evaluation tar_render() handle R Markdown parameters, tar_render_rep() handles differently.)","code":""},{"path":"https://docs.ropensci.org/tarchetypes/reference/tar_render_rep.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Parameterized R Markdown with dynamic branching. — tar_render_rep","text":"list target objects render R Markdown reports. Changes parameters, source file, dependencies, etc. cause appropriate targets rerun tar_make(). See \"Target objects\" section background.","code":""},{"path":"https://docs.ropensci.org/tarchetypes/reference/tar_render_rep.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Parameterized R Markdown with dynamic branching. — tar_render_rep","text":"tar_render_rep() alternative tar_target() parameterized R Markdown reports depend targets. Parameters must given data frame one row per rendered report one column per parameter. optional output_file column may included set output file path rendered report. R Markdown source mention dependency targets tar_load() tar_read() active code chunks (also allows render report outside pipeline _targets/ data store already exists appropriate defaults specified parameters). (use tar_load_raw() tar_read_raw() .) , tar_render() defines special kind target. 1. Finds tar_load()/tar_read() dependencies report inserts target's command. enforces proper dependency relationships. (use tar_load_raw() tar_read_raw() .) 2. Sets format = \"file\" (see tar_target()) targets watches files returned paths reruns report files change. 3. Configures target's command return output report files: rendered document, source file, *_files/ directory exists. file paths relative paths project stays portable. 4. Forces report run user's current working directory instead working directory report. 5. Sets convenient default options deployment = \"main\" target quiet = TRUE rmarkdown::render().","code":""},{"path":"https://docs.ropensci.org/tarchetypes/reference/tar_render_rep.html","id":"target-objects","dir":"Reference","previous_headings":"","what":"Target objects","title":"Parameterized R Markdown with dynamic branching. — tar_render_rep","text":"tarchetypes functions target factories, means return target objects lists target objects. Target objects represent skippable steps analysis pipeline described https://books.ropensci.org/targets/. Please read walkthrough https://books.ropensci.org/targets/walkthrough.html understand role target objects analysis pipelines. developers, https://wlandau.github.io/targetopia/contributing.html#target-factories explains target factories (functions like one generate targets) design specification https://books.ropensci.org/targets-design/ details structure composition target objects.","code":""},{"path":"https://docs.ropensci.org/tarchetypes/reference/tar_render_rep.html","id":"replicate-specific-seeds","dir":"Reference","previous_headings":"","what":"Replicate-specific seeds","title":"Parameterized R Markdown with dynamic branching. — tar_render_rep","text":"ordinary pipelines, target unique deterministic pseudo-random number generator seed derived target name. batched replicate, however, batch target multiple replicate within batch. tar_rep() friends give replicate unique seed. replicate-specific seed created based dynamic parent target name, tar_option_get(\"seed\") (targets version 0.13.5.9000 ), batch index, rep-within-batch index. seed set just replicate runs. Replicate-specific seeds invariant batching structure. words, tar_rep(name = x, command = rnorm(1), batches = 100, reps = 1, ...) produces numerical output tar_rep(name = x, command = rnorm(1), batches = 10, reps = 10, ...) (different batch names). target factories seed scheme tar_rep2(), tar_map_rep(), tar_map2_count(), tar_map2_size(), tar_render_rep(). tar_map2_*() functions, possible manually supply seeds command1 argument invoke custom code command2 (set.seed(), withr::with_seed, withr::local_seed()). tar_render_rep(), custom seeds can supplied params argument invoked individual R Markdown reports. Likewise tar_quarto_rep() execute_params argument.","code":""},{"path":"https://docs.ropensci.org/tarchetypes/reference/tar_render_rep.html","id":"literate-programming-limitations","dir":"Reference","previous_headings":"","what":"Literate programming limitations","title":"Parameterized R Markdown with dynamic branching. — tar_render_rep","text":"Literate programming files messy variable, functions like tar_render() limitations: * Child documents tracked changes. * Upstream target dependencies detected tar_read() /tar_load() called user-defined function. addition, single target names must mentioned must symbols. tar_load(\"x\") tar_load(contains(\"x\")) may detect target x. * Special/optional input/output files may detected cases. * tar_render() friends local files . integrate cloud storage capabilities targets.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/tarchetypes/reference/tar_render_rep.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Parameterized R Markdown with dynamic branching. — tar_render_rep","text":"","code":"if (identical(Sys.getenv(\"TAR_LONG_EXAMPLES\"), \"true\")) { targets::tar_dir({ # tar_dir() runs code from a temporary directory. # Parameterized R Markdown: lines <- c(   \"---\",   \"title: 'report.Rmd file'\",   \"output_format: html_document\",   \"params:\",   \"  par: \\\"default value\\\"\",   \"---\",   \"Assume these lines are in a file called report.Rmd.\",   \"```{r}\",   \"print(params$par)\",   \"```\" ) # The following pipeline will run the report for each row of params. targets::tar_script({   library(tarchetypes)   list(     tar_render_rep(       report,       \"report.Rmd\",       params = tibble::tibble(par = c(1, 2))     )   ) }, ask = FALSE) # Then, run the targets pipeline as usual. }) }"},{"path":"https://docs.ropensci.org/tarchetypes/reference/tar_render_rep_raw.html","id":null,"dir":"Reference","previous_headings":"","what":"Parameterized R Markdown with dynamic branching (raw version). — tar_render_rep_raw","title":"Parameterized R Markdown with dynamic branching (raw version). — tar_render_rep_raw","text":"Targets render parameterized R Markdown report multiple sets parameters (raw version). tar_render_rep() except name character string, params expression object, extra arguments rmarkdown::render() passed args argument instead ....","code":""},{"path":"https://docs.ropensci.org/tarchetypes/reference/tar_render_rep_raw.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Parameterized R Markdown with dynamic branching (raw version). — tar_render_rep_raw","text":"","code":"tar_render_rep_raw(   name,   path,   working_directory = NULL,   params = expression(NULL),   batches = NULL,   rep_workers = 1,   packages = targets::tar_option_get(\"packages\"),   library = targets::tar_option_get(\"library\"),   format = targets::tar_option_get(\"format\"),   iteration = targets::tar_option_get(\"iteration\"),   error = targets::tar_option_get(\"error\"),   memory = targets::tar_option_get(\"memory\"),   garbage_collection = targets::tar_option_get(\"garbage_collection\"),   deployment = targets::tar_option_get(\"deployment\"),   priority = targets::tar_option_get(\"priority\"),   resources = targets::tar_option_get(\"resources\"),   retrieval = targets::tar_option_get(\"retrieval\"),   cue = targets::tar_option_get(\"cue\"),   description = targets::tar_option_get(\"description\"),   quiet = TRUE,   args = list() )"},{"path":"https://docs.ropensci.org/tarchetypes/reference/tar_render_rep_raw.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Parameterized R Markdown with dynamic branching (raw version). — tar_render_rep_raw","text":"name Symbol, name target. target name must valid name symbol R, must start dot. Subsequent targets can refer name symbolically induce dependency relationship: e.g. tar_target(downstream_target, f(upstream_target)) target named downstream_target depends target upstream_target function f(). addition, target's name determines random number generator seed. way, target runs reproducible seed someone else running pipeline get results, two targets pipeline share seed. (Even dynamic branches different names thus different seeds.) can recover seed completed target tar_meta(your_target, seed) run tar_seed_set() result locally recreate target's initial RNG state. path Character string, file path R Markdown source file. Must length 1. working_directory Optional character string, path working directory temporarily set running report. default NULL, runs report current working directory time pipeline run. default recommended vast majority cases. use anything NULL, must manually set value store argument relative working directory calls tar_read() tar_load() report. Otherwise, functions know find data. params Expression object code generate data frame tibble one row per rendered report one column per R Markdown parameter. may also include output_file column specify path rendered report. R Markdown parameters must named tar_group output_file. params argument converted command target supplies R Markdown parameters. batches Number batches group R Markdown files. large number reports, increase number batches decrease target-level overhead. Defaults number reports render (1 report per batch). rep_workers Positive integer length 1, number local R processes use run reps within batches parallel. 1, reps run sequentially within batch. greater 1, reps within batch run parallel using PSOCK cluster. packages Character vector packages load right target runs output data reloaded downstream targets. Use tar_option_set() set packages globally subsequent targets define. library Character vector library paths try loading packages. format Character length 1, format argument tar_target() store data frame R Markdown parameters. iteration Character length 1, iteration argument tar_target() R Markdown documents. apply target R Markdown parameters (whose iteration always \"group\"). error Character length 1, target stops throws error. Options: \"stop\": whole pipeline stops throws error. \"continue\": whole pipeline keeps going. \"abridge\": currently running targets keep running, new targets launch . (Visit https://books.ropensci.org/targets/debugging.html learn debug targets using saved workspaces.) \"null\": errored target continues returns NULL. data hash deliberately wrong target date next run pipeline. memory Character length 1, memory strategy. \"persistent\", target stays memory end pipeline (unless storage \"worker\", case targets unloads value memory right storing order avoid sending copious data network). \"transient\", target gets unloaded every new target completes. Either way, target gets automatically loaded memory whenever another target needs value. cloud-based dynamic files (e.g. format = \"file\" repository = \"aws\"), memory strategy applies temporary local copy file: \"persistent\" means remains end pipeline deleted, \"transient\" means gets deleted soon possible. former conserves bandwidth, latter conserves local storage. garbage_collection Logical, whether run base::gc() just target runs. deployment Character length 1. deployment \"main\", target run central controlling R process. Otherwise, deployment \"worker\" set pipeline distributed/parallel computing, target runs parallel worker. distributed/parallel computing targets, please visit https://books.ropensci.org/targets/crew.html. priority Numeric length 1 0 1. Controls targets get deployed first multiple competing targets ready simultaneously. Targets priorities closer 1 get dispatched earlier (polled earlier tar_make_future()). resources Object returned tar_resources() optional settings high-performance computing functionality, alternative data storage formats, optional capabilities targets. See tar_resources() details. retrieval Character length 1, relevant tar_make_clustermq() tar_make_future(). Must one following values: \"main\": target's dependencies loaded host machine sent worker target runs. \"worker\": worker loads targets dependencies. \"none\": dependencies loaded . choice almost never recommended. niche situations, e.g. data needs loaded explicitly another language. cue optional object tar_cue() customize rules decide whether target date. description Character length 1, custom free-form human-readable text description target. Descriptions appear target labels functions like tar_manifest() tar_visnetwork(), let select subsets targets names argument functions like tar_make(). example, tar_manifest(names = tar_described_as(starts_with(\"survival model\"))) lists targets whose descriptions start character string \"survival model\". quiet option suppress printing rendering knitr, pandoc command line others. suppress printing last \"Output created: \" message, can set rmarkdown.render.message FALSE args Named list arguments rmarkdown::render(). Must include params output_file. Evaluated target defined.","code":""},{"path":"https://docs.ropensci.org/tarchetypes/reference/tar_render_rep_raw.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Parameterized R Markdown with dynamic branching (raw version). — tar_render_rep_raw","text":"list target objects render R Markdown reports. Changes parameters, source file, dependencies, etc. cause appropriate targets rerun tar_make(). See \"Target objects\" section background.","code":""},{"path":"https://docs.ropensci.org/tarchetypes/reference/tar_render_rep_raw.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Parameterized R Markdown with dynamic branching (raw version). — tar_render_rep_raw","text":"tar_render_rep_raw() alternative tar_target_raw() parameterized R Markdown reports depend targets. Parameters must given data frame one row per rendered report one column per parameter. optional output_file column may included set output file path rendered report. R Markdown source mention dependency targets tar_load() tar_read() active code chunks (also allows render report outside pipeline _targets/ data store already exists appropriate defaults specified parameters). (use tar_load_raw() tar_read_raw() .) , tar_render() defines special kind target. 1. Finds tar_load()/tar_read() dependencies report inserts target's command. enforces proper dependency relationships. (use tar_load_raw() tar_read_raw() .) 2. Sets format = \"file\" (see tar_target()) targets watches files returned paths reruns report files change. 3. Configures target's command return output report files: rendered document, source file, *_files/ directory exists. file paths relative paths project stays portable. 4. Forces report run user's current working directory instead working directory report. 5. Sets convenient default options deployment = \"main\" target quiet = TRUE rmarkdown::render().","code":""},{"path":"https://docs.ropensci.org/tarchetypes/reference/tar_render_rep_raw.html","id":"target-objects","dir":"Reference","previous_headings":"","what":"Target objects","title":"Parameterized R Markdown with dynamic branching (raw version). — tar_render_rep_raw","text":"tarchetypes functions target factories, means return target objects lists target objects. Target objects represent skippable steps analysis pipeline described https://books.ropensci.org/targets/. Please read walkthrough https://books.ropensci.org/targets/walkthrough.html understand role target objects analysis pipelines. developers, https://wlandau.github.io/targetopia/contributing.html#target-factories explains target factories (functions like one generate targets) design specification https://books.ropensci.org/targets-design/ details structure composition target objects.","code":""},{"path":"https://docs.ropensci.org/tarchetypes/reference/tar_render_rep_raw.html","id":"replicate-specific-seeds","dir":"Reference","previous_headings":"","what":"Replicate-specific seeds","title":"Parameterized R Markdown with dynamic branching (raw version). — tar_render_rep_raw","text":"ordinary pipelines, target unique deterministic pseudo-random number generator seed derived target name. batched replicate, however, batch target multiple replicate within batch. tar_rep() friends give replicate unique seed. replicate-specific seed created based dynamic parent target name, tar_option_get(\"seed\") (targets version 0.13.5.9000 ), batch index, rep-within-batch index. seed set just replicate runs. Replicate-specific seeds invariant batching structure. words, tar_rep(name = x, command = rnorm(1), batches = 100, reps = 1, ...) produces numerical output tar_rep(name = x, command = rnorm(1), batches = 10, reps = 10, ...) (different batch names). target factories seed scheme tar_rep2(), tar_map_rep(), tar_map2_count(), tar_map2_size(), tar_render_rep(). tar_map2_*() functions, possible manually supply seeds command1 argument invoke custom code command2 (set.seed(), withr::with_seed, withr::local_seed()). tar_render_rep(), custom seeds can supplied params argument invoked individual R Markdown reports. Likewise tar_quarto_rep() execute_params argument.","code":""},{"path":"https://docs.ropensci.org/tarchetypes/reference/tar_render_rep_raw.html","id":"literate-programming-limitations","dir":"Reference","previous_headings":"","what":"Literate programming limitations","title":"Parameterized R Markdown with dynamic branching (raw version). — tar_render_rep_raw","text":"Literate programming files messy variable, functions like tar_render() limitations: * Child documents tracked changes. * Upstream target dependencies detected tar_read() /tar_load() called user-defined function. addition, single target names must mentioned must symbols. tar_load(\"x\") tar_load(contains(\"x\")) may detect target x. * Special/optional input/output files may detected cases. * tar_render() friends local files . integrate cloud storage capabilities targets.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/tarchetypes/reference/tar_render_rep_raw.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Parameterized R Markdown with dynamic branching (raw version). — tar_render_rep_raw","text":"","code":"if (identical(Sys.getenv(\"TAR_LONG_EXAMPLES\"), \"true\")) { targets::tar_dir({ # tar_dir() runs code from a temporary directory. # Parameterized R Markdown: lines <- c(   \"---\",   \"title: 'report.Rmd source file'\",   \"output_format: html_document\",   \"params:\",   \"  par: \\\"default value\\\"\",   \"---\",   \"Assume these lines are in a file called report.Rmd.\",   \"```{r}\",   \"print(params$par)\",   \"```\" ) # The following pipeline will run the report for each row of params. targets::tar_script({   library(tarchetypes)   list(     tar_render_rep_raw(       \"report\",       \"report.Rmd\",       params = quote(tibble::tibble(par = c(1, 2)))     )   ) }, ask = FALSE) # Then, run the targets pipeline as usual. }) }"},{"path":"https://docs.ropensci.org/tarchetypes/reference/tar_render_rep_rep.html","id":null,"dir":"Reference","previous_headings":"","what":"Run a rep in a tar_render_rep(). — tar_render_rep_rep","title":"Run a rep in a tar_render_rep(). — tar_render_rep_rep","text":"user-side function. invoke directly.","code":""},{"path":"https://docs.ropensci.org/tarchetypes/reference/tar_render_rep_rep.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run a rep in a tar_render_rep(). — tar_render_rep_rep","text":"","code":"tar_render_rep_rep(rep, params, args, path, seeds)"},{"path":"https://docs.ropensci.org/tarchetypes/reference/tar_render_rep_rep.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Run a rep in a tar_render_rep(). — tar_render_rep_rep","text":"rep Rep number. params R Markdown parameters. args Arguments rmarkdown::render(). path R Markdown output file. seeds Random number generator seeds batch.","code":""},{"path":"https://docs.ropensci.org/tarchetypes/reference/tar_render_rep_rep.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Run a rep in a tar_render_rep(). — tar_render_rep_rep","text":"Output file paths.","code":""},{"path":"https://docs.ropensci.org/tarchetypes/reference/tar_render_rep_rep.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Run a rep in a tar_render_rep(). — tar_render_rep_rep","text":"","code":"# See the examples of tar_quarto_rep()."},{"path":"https://docs.ropensci.org/tarchetypes/reference/tar_render_rep_run.html","id":null,"dir":"Reference","previous_headings":"","what":"Render a batch of parameterized R Markdown reports\ninside a tar_render_rep() target. — tar_render_rep_run","title":"Render a batch of parameterized R Markdown reports\ninside a tar_render_rep() target. — tar_render_rep_run","text":"Internal function needed tar_render(). Users invoke directly.","code":""},{"path":"https://docs.ropensci.org/tarchetypes/reference/tar_render_rep_run.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Render a batch of parameterized R Markdown reports\ninside a tar_render_rep() target. — tar_render_rep_run","text":"","code":"tar_render_rep_run(path, params, args, deps, rep_workers)"},{"path":"https://docs.ropensci.org/tarchetypes/reference/tar_render_rep_run.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Render a batch of parameterized R Markdown reports\ninside a tar_render_rep() target. — tar_render_rep_run","text":"path Path R Markdown source file. args named list arguments rmarkdown::render(). deps unnamed list target dependencies R Markdown report, automatically created tar_render_rep(). rep_workers Positive integer length 1, number local R processes use run reps within batches parallel. 1, reps run sequentially within batch. greater 1, reps within batch run parallel using PSOCK cluster.","code":""},{"path":"https://docs.ropensci.org/tarchetypes/reference/tar_render_rep_run.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Render a batch of parameterized R Markdown reports\ninside a tar_render_rep() target. — tar_render_rep_run","text":"Character vector path R Markdown source file rendered output file. paths depend input source path, defaults.","code":""},{"path":"https://docs.ropensci.org/tarchetypes/reference/tar_render_rep_run_params.html","id":null,"dir":"Reference","previous_headings":"","what":"Prepare R Markdown parameters for tar_render_rep(). — tar_render_rep_run_params","title":"Prepare R Markdown parameters for tar_render_rep(). — tar_render_rep_run_params","text":"Internal function needed tar_render_rep(). Users invoke directly.","code":""},{"path":"https://docs.ropensci.org/tarchetypes/reference/tar_render_rep_run_params.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Prepare R Markdown parameters for tar_render_rep(). — tar_render_rep_run_params","text":"","code":"tar_render_rep_run_params(params, batches)"},{"path":"https://docs.ropensci.org/tarchetypes/reference/tar_render_rep_run_params.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Prepare R Markdown parameters for tar_render_rep(). — tar_render_rep_run_params","text":"params Data frame R Markdown parameters. batches Number batches split renderings.","code":""},{"path":"https://docs.ropensci.org/tarchetypes/reference/tar_render_rep_run_params.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Prepare R Markdown parameters for tar_render_rep(). — tar_render_rep_run_params","text":"batched data frame R Markdown parameters.","code":""},{"path":"https://docs.ropensci.org/tarchetypes/reference/tar_render_rep_run_params.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Prepare R Markdown parameters for tar_render_rep(). — tar_render_rep_run_params","text":"","code":"params <- tibble::tibble(param1 = letters[seq_len(4)]) tar_render_rep_run_params(params, 1) #> # A tibble: 4 × 2 #>   param1 tar_group #>   <chr>      <int> #> 1 a              1 #> 2 b              1 #> 3 c              1 #> 4 d              1 tar_render_rep_run_params(params, 2) #> # A tibble: 4 × 2 #>   param1 tar_group #>   <chr>      <int> #> 1 a              1 #> 2 b              1 #> 3 c              2 #> 4 d              2 tar_render_rep_run_params(params, 3) #> # A tibble: 4 × 2 #>   param1 tar_group #>   <chr>      <int> #> 1 a              1 #> 2 b              1 #> 3 c              2 #> 4 d              3 tar_render_rep_run_params(params, 4) #> # A tibble: 4 × 2 #>   param1 tar_group #>   <chr>      <int> #> 1 a              1 #> 2 b              2 #> 3 c              3 #> 4 d              4"},{"path":"https://docs.ropensci.org/tarchetypes/reference/tar_render_run.html","id":null,"dir":"Reference","previous_headings":"","what":"Render an R Markdown report inside a tar_render() target. — tar_render_run","title":"Render an R Markdown report inside a tar_render() target. — tar_render_run","text":"Internal function needed tar_render(). Users invoke directly.","code":""},{"path":"https://docs.ropensci.org/tarchetypes/reference/tar_render_run.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Render an R Markdown report inside a tar_render() target. — tar_render_run","text":"","code":"tar_render_run(path, args, deps)"},{"path":"https://docs.ropensci.org/tarchetypes/reference/tar_render_run.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Render an R Markdown report inside a tar_render() target. — tar_render_run","text":"path Path R Markdown source file. args named list arguments rmarkdown::render(). deps unnamed list target dependencies R Markdown report, automatically created tar_render().","code":""},{"path":"https://docs.ropensci.org/tarchetypes/reference/tar_render_run.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Render an R Markdown report inside a tar_render() target. — tar_render_run","text":"Character vector path R Markdown source file relative path output. paths depend input source file path defaults.","code":""},{"path":"https://docs.ropensci.org/tarchetypes/reference/tar_rep.html","id":null,"dir":"Reference","previous_headings":"","what":"Batched replication with dynamic branching. — tar_rep","title":"Batched replication with dynamic branching. — tar_rep","text":"Batching important optimizing efficiency heavily dynamically-branched workflows: https://books.ropensci.org/targets/dynamic.html#batching. tar_rep() replicates command strategically sized batches.","code":""},{"path":"https://docs.ropensci.org/tarchetypes/reference/tar_rep.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Batched replication with dynamic branching. — tar_rep","text":"","code":"tar_rep(   name,   command,   batches = 1,   reps = 1,   rep_workers = 1,   tidy_eval = targets::tar_option_get(\"tidy_eval\"),   packages = targets::tar_option_get(\"packages\"),   library = targets::tar_option_get(\"library\"),   format = targets::tar_option_get(\"format\"),   repository = targets::tar_option_get(\"repository\"),   iteration = targets::tar_option_get(\"iteration\"),   error = targets::tar_option_get(\"error\"),   memory = targets::tar_option_get(\"memory\"),   garbage_collection = targets::tar_option_get(\"garbage_collection\"),   deployment = targets::tar_option_get(\"deployment\"),   priority = targets::tar_option_get(\"priority\"),   resources = targets::tar_option_get(\"resources\"),   storage = targets::tar_option_get(\"storage\"),   retrieval = targets::tar_option_get(\"retrieval\"),   cue = targets::tar_option_get(\"cue\"),   description = targets::tar_option_get(\"description\") )"},{"path":"https://docs.ropensci.org/tarchetypes/reference/tar_rep.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Batched replication with dynamic branching. — tar_rep","text":"name Symbol, name target. target name must valid name symbol R, must start dot. Subsequent targets can refer name symbolically induce dependency relationship: e.g. tar_target(downstream_target, f(upstream_target)) target named downstream_target depends target upstream_target function f(). addition, target's name determines random number generator seed. way, target runs reproducible seed someone else running pipeline get results, two targets pipeline share seed. (Even dynamic branches different names thus different seeds.) can recover seed completed target tar_meta(your_target, seed) run tar_seed_set() result locally recreate target's initial RNG state. command R code run multiple times. Must return list data frame tar_rep() try append new elements/columns tar_batch tar_rep output denote batch rep-within-batch IDs, respectively. batches Number batches. also number dynamic branches created tar_make(). reps Number replications batch. total number replications batches * reps. rep_workers Positive integer length 1, number local R processes use run reps within batches parallel. 1, reps run sequentially within batch. greater 1, reps within batch run parallel using PSOCK cluster. tidy_eval Whether invoke tidy evaluation (e.g. !! operator rlang) soon target defined (tar_make()). Applies command argument. packages Character vector packages load right target runs output data reloaded downstream targets. Use tar_option_set() set packages globally subsequent targets define. library Character vector library paths try loading packages. format Optional storage format target's return value. exception format = \"file\", target gets file _targets/objects, format different way save load file. See \"Storage formats\" section detailed list possible data storage formats. repository Character length 1, remote repository target storage. Choices: \"local\": file system local machine. \"aws\": Amazon Web Services (AWS) S3 bucket. Can configured non-AWS S3 bucket using endpoint argument tar_resources_aws(), versioning capabilities may lost . See cloud storage section https://books.ropensci.org/targets/data.html details instructions. \"gcp\": Google Cloud Platform storage bucket. See cloud storage section https://books.ropensci.org/targets/data.html details instructions. Note: repository \"local\" format \"file\" target create single output file. output file uploaded cloud tracked changes exists cloud. local file deleted target runs. iteration Character length 1, name iteration mode target. Choices: \"vector\": branching happens vectors::vec_slice() aggregation happens vctrs::vec_c(). \"list\", branching happens [[]] aggregation happens list(). case list iteration, tar_read(your_target) return list lists, outer list one element per batch inner list one element per rep within batch. un-batch nested list, call tar_read(your_target, recursive = FALSE). \"group\": dplyr::group_by()-like functionality branch subsets data frame. target's return value must data frame special tar_group column consecutive integers 1 number groups. integer designates group, branch created collection rows group. See tar_group() function see can create special tar_group column dplyr::group_by(). error Character length 1, target stops throws error. Options: \"stop\": whole pipeline stops throws error. \"continue\": whole pipeline keeps going. \"abridge\": currently running targets keep running, new targets launch . (Visit https://books.ropensci.org/targets/debugging.html learn debug targets using saved workspaces.) \"null\": errored target continues returns NULL. data hash deliberately wrong target date next run pipeline. memory Character length 1, memory strategy. \"persistent\", target stays memory end pipeline (unless storage \"worker\", case targets unloads value memory right storing order avoid sending copious data network). \"transient\", target gets unloaded every new target completes. Either way, target gets automatically loaded memory whenever another target needs value. cloud-based dynamic files (e.g. format = \"file\" repository = \"aws\"), memory strategy applies temporary local copy file: \"persistent\" means remains end pipeline deleted, \"transient\" means gets deleted soon possible. former conserves bandwidth, latter conserves local storage. garbage_collection Logical, whether run base::gc() just target runs. deployment Character length 1. deployment \"main\", target run central controlling R process. Otherwise, deployment \"worker\" set pipeline distributed/parallel computing, target runs parallel worker. distributed/parallel computing targets, please visit https://books.ropensci.org/targets/crew.html. priority Numeric length 1 0 1. Controls targets get deployed first multiple competing targets ready simultaneously. Targets priorities closer 1 get dispatched earlier (polled earlier tar_make_future()). resources Object returned tar_resources() optional settings high-performance computing functionality, alternative data storage formats, optional capabilities targets. See tar_resources() details. storage Character length 1, relevant tar_make_clustermq() tar_make_future(). Must one following values: \"main\": target's return value sent back host machine saved/uploaded locally. \"worker\": worker saves/uploads value. \"none\": almost never recommended. niche situations, e.g. data needs loaded explicitly another language. use , return value target totally ignored target ends, downstream target still attempts load data file (except retrieval = \"none\"). select storage = \"none\", return value target's command ignored, data saved automatically. dynamic files (format = \"file\") responsibility user write data store inside target. distinguishing feature storage = \"none\" (opposed format = \"file\") general case, downstream targets automatically try load data data store dependency. corollary, storage = \"none\" completely unnecessary format \"file\". retrieval Character length 1, relevant tar_make_clustermq() tar_make_future(). Must one following values: \"main\": target's dependencies loaded host machine sent worker target runs. \"worker\": worker loads targets dependencies. \"none\": dependencies loaded . choice almost never recommended. niche situations, e.g. data needs loaded explicitly another language. cue optional object tar_cue() customize rules decide whether target date. description Character length 1, custom free-form human-readable text description target. Descriptions appear target labels functions like tar_manifest() tar_visnetwork(), let select subsets targets names argument functions like tar_make(). example, tar_manifest(names = tar_described_as(starts_with(\"survival model\"))) lists targets whose descriptions start character string \"survival model\".","code":""},{"path":"https://docs.ropensci.org/tarchetypes/reference/tar_rep.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Batched replication with dynamic branching. — tar_rep","text":"list two targets, one upstream one downstream. upstream target returns numeric index batch ids, downstream one dynamically maps batch ids run command multiple times. command returns list data frame, targets tar_rep() try append new elements/columns tar_batch tar_rep output denote batch rep-within-batch IDs, respectively. See \"Target objects\" section background. tar_read(your_target) (downstream target actual work) return list lists, outer list one element per batch inner list one element per rep within batch. un-batch nested list, call tar_read(your_target, recursive = FALSE).","code":""},{"path":"https://docs.ropensci.org/tarchetypes/reference/tar_rep.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Batched replication with dynamic branching. — tar_rep","text":"tar_rep() tar_rep_raw() create two targets: upstream local stem integer vector batch ids, downstream pattern maps batch ids. (Thus, batch branch.) batch/branch replicates command certain number times. command returns list data frame, targets tar_rep() try append new elements/columns tar_batch, tar_rep, tar_seed output denote batch, rep-within-batch index, rep-specific seed, respectively. batches reps within batch aggregated according method specify iteration argument. \"list\", reps batches aggregated list(). \"vector\", vctrs::vec_c(). \"group\", vctrs::vec_rbind().","code":""},{"path":"https://docs.ropensci.org/tarchetypes/reference/tar_rep.html","id":"replicate-specific-seeds","dir":"Reference","previous_headings":"","what":"Replicate-specific seeds","title":"Batched replication with dynamic branching. — tar_rep","text":"ordinary pipelines, target unique deterministic pseudo-random number generator seed derived target name. batched replicate, however, batch target multiple replicate within batch. tar_rep() friends give replicate unique seed. replicate-specific seed created based dynamic parent target name, tar_option_get(\"seed\") (targets version 0.13.5.9000 ), batch index, rep-within-batch index. seed set just replicate runs. Replicate-specific seeds invariant batching structure. words, tar_rep(name = x, command = rnorm(1), batches = 100, reps = 1, ...) produces numerical output tar_rep(name = x, command = rnorm(1), batches = 10, reps = 10, ...) (different batch names). target factories seed scheme tar_rep2(), tar_map_rep(), tar_map2_count(), tar_map2_size(), tar_render_rep(). tar_map2_*() functions, possible manually supply seeds command1 argument invoke custom code command2 (set.seed(), withr::with_seed, withr::local_seed()). tar_render_rep(), custom seeds can supplied params argument invoked individual R Markdown reports. Likewise tar_quarto_rep() execute_params argument.","code":""},{"path":"https://docs.ropensci.org/tarchetypes/reference/tar_rep.html","id":"target-objects","dir":"Reference","previous_headings":"","what":"Target objects","title":"Batched replication with dynamic branching. — tar_rep","text":"tarchetypes functions target factories, means return target objects lists target objects. Target objects represent skippable steps analysis pipeline described https://books.ropensci.org/targets/. Please read walkthrough https://books.ropensci.org/targets/walkthrough.html understand role target objects analysis pipelines. developers, https://wlandau.github.io/targetopia/contributing.html#target-factories explains target factories (functions like one generate targets) design specification https://books.ropensci.org/targets-design/ details structure composition target objects.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/tarchetypes/reference/tar_rep.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Batched replication with dynamic branching. — tar_rep","text":"","code":"if (identical(Sys.getenv(\"TAR_LONG_EXAMPLES\"), \"true\")) { targets::tar_dir({ # tar_dir() runs code from a temporary directory. targets::tar_script({   list(     tarchetypes::tar_rep(       x,       data.frame(x = sample.int(1e4, 2)),       batches = 2,       reps = 3     )   ) }) targets::tar_make() targets::tar_read(x) }) }"},{"path":"https://docs.ropensci.org/tarchetypes/reference/tar_rep2.html","id":null,"dir":"Reference","previous_headings":"","what":"Dynamic batched computation downstream of tar_rep() — tar_rep2","title":"Dynamic batched computation downstream of tar_rep() — tar_rep2","text":"Batching important optimizing efficiency heavily dynamically-branched workflows: https://books.ropensci.org/targets/dynamic.html#batching. tar_rep2() uses dynamic branching iterate batches reps existing upstream targets.","code":""},{"path":"https://docs.ropensci.org/tarchetypes/reference/tar_rep2.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Dynamic batched computation downstream of tar_rep() — tar_rep2","text":"","code":"tar_rep2(   name,   command,   ...,   rep_workers = 1,   tidy_eval = targets::tar_option_get(\"tidy_eval\"),   packages = targets::tar_option_get(\"packages\"),   library = targets::tar_option_get(\"library\"),   format = targets::tar_option_get(\"format\"),   repository = targets::tar_option_get(\"repository\"),   iteration = targets::tar_option_get(\"iteration\"),   error = targets::tar_option_get(\"error\"),   memory = targets::tar_option_get(\"memory\"),   garbage_collection = targets::tar_option_get(\"garbage_collection\"),   deployment = targets::tar_option_get(\"deployment\"),   priority = targets::tar_option_get(\"priority\"),   resources = targets::tar_option_get(\"resources\"),   storage = targets::tar_option_get(\"storage\"),   retrieval = targets::tar_option_get(\"retrieval\"),   cue = targets::tar_option_get(\"cue\"),   description = targets::tar_option_get(\"description\") )"},{"path":"https://docs.ropensci.org/tarchetypes/reference/tar_rep2.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Dynamic batched computation downstream of tar_rep() — tar_rep2","text":"name Symbol, name target. target name must valid name symbol R, must start dot. Subsequent targets can refer name symbolically induce dependency relationship: e.g. tar_target(downstream_target, f(upstream_target)) target named downstream_target depends target upstream_target function f(). addition, target's name determines random number generator seed. way, target runs reproducible seed someone else running pipeline get results, two targets pipeline share seed. (Even dynamic branches different names thus different seeds.) can recover seed completed target tar_meta(your_target, seed) run tar_seed_set() result locally recreate target's initial RNG state. command R code run target. ... Symbols name one upstream batched targets created tar_rep(). supply one target, targets must number batches reps per batch. must return either data frames lists. List targets must use iteration = \"list\" tar_rep(). rep_workers Positive integer length 1, number local R processes use run reps within batches parallel. 1, reps run sequentially within batch. greater 1, reps within batch run parallel using PSOCK cluster. tidy_eval Logical, whether enable tidy evaluation interpreting command pattern. TRUE, can use \"bang-bang\" operator !! programmatically insert values global objects. packages Character vector packages load right target runs output data reloaded downstream targets. Use tar_option_set() set packages globally subsequent targets define. library Character vector library paths try loading packages. format Optional storage format target's return value. exception format = \"file\", target gets file _targets/objects, format different way save load file. See \"Storage formats\" section detailed list possible data storage formats. repository Character length 1, remote repository target storage. Choices: \"local\": file system local machine. \"aws\": Amazon Web Services (AWS) S3 bucket. Can configured non-AWS S3 bucket using endpoint argument tar_resources_aws(), versioning capabilities may lost . See cloud storage section https://books.ropensci.org/targets/data.html details instructions. \"gcp\": Google Cloud Platform storage bucket. See cloud storage section https://books.ropensci.org/targets/data.html details instructions. Note: repository \"local\" format \"file\" target create single output file. output file uploaded cloud tracked changes exists cloud. local file deleted target runs. iteration Character length 1, name iteration mode target. Choices: \"vector\": branching happens vctrs::vec_slice() aggregation happens vctrs::vec_c(). \"list\", branching happens [[]] aggregation happens list(). \"group\": dplyr::group_by()-like functionality branch subsets non-dynamic data frame. iteration = \"group\", target must dynamic (pattern argument tar_target() must left NULL). target's return value must data frame special tar_group column consecutive integers 1 number groups. integer designates group, branch created collection rows group. See tar_group() function see can create special tar_group column dplyr::group_by(). error Character length 1, target stops throws error. Options: \"stop\": whole pipeline stops throws error. \"continue\": whole pipeline keeps going. \"abridge\": currently running targets keep running, new targets launch . (Visit https://books.ropensci.org/targets/debugging.html learn debug targets using saved workspaces.) \"null\": errored target continues returns NULL. data hash deliberately wrong target date next run pipeline. memory Character length 1, memory strategy. \"persistent\", target stays memory end pipeline (unless storage \"worker\", case targets unloads value memory right storing order avoid sending copious data network). \"transient\", target gets unloaded every new target completes. Either way, target gets automatically loaded memory whenever another target needs value. cloud-based dynamic files (e.g. format = \"file\" repository = \"aws\"), memory strategy applies temporary local copy file: \"persistent\" means remains end pipeline deleted, \"transient\" means gets deleted soon possible. former conserves bandwidth, latter conserves local storage. garbage_collection Logical, whether run base::gc() just target runs. deployment Character length 1. deployment \"main\", target run central controlling R process. Otherwise, deployment \"worker\" set pipeline distributed/parallel computing, target runs parallel worker. distributed/parallel computing targets, please visit https://books.ropensci.org/targets/crew.html. priority Numeric length 1 0 1. Controls targets get deployed first multiple competing targets ready simultaneously. Targets priorities closer 1 get dispatched earlier (polled earlier tar_make_future()). resources Object returned tar_resources() optional settings high-performance computing functionality, alternative data storage formats, optional capabilities targets. See tar_resources() details. storage Character length 1, relevant tar_make_clustermq() tar_make_future(). Must one following values: \"main\": target's return value sent back host machine saved/uploaded locally. \"worker\": worker saves/uploads value. \"none\": almost never recommended. niche situations, e.g. data needs loaded explicitly another language. use , return value target totally ignored target ends, downstream target still attempts load data file (except retrieval = \"none\"). select storage = \"none\", return value target's command ignored, data saved automatically. dynamic files (format = \"file\") responsibility user write data store inside target. distinguishing feature storage = \"none\" (opposed format = \"file\") general case, downstream targets automatically try load data data store dependency. corollary, storage = \"none\" completely unnecessary format \"file\". retrieval Character length 1, relevant tar_make_clustermq() tar_make_future(). Must one following values: \"main\": target's dependencies loaded host machine sent worker target runs. \"worker\": worker loads targets dependencies. \"none\": dependencies loaded . choice almost never recommended. niche situations, e.g. data needs loaded explicitly another language. cue optional object tar_cue() customize rules decide whether target date. description Character length 1, custom free-form human-readable text description target. Descriptions appear target labels functions like tar_manifest() tar_visnetwork(), let select subsets targets names argument functions like tar_make(). example, tar_manifest(names = tar_described_as(starts_with(\"survival model\"))) lists targets whose descriptions start character string \"survival model\".","code":""},{"path":"https://docs.ropensci.org/tarchetypes/reference/tar_rep2.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Dynamic batched computation downstream of tar_rep() — tar_rep2","text":"new target object perform batched computation. See \"Target objects\" section background.","code":""},{"path":"https://docs.ropensci.org/tarchetypes/reference/tar_rep2.html","id":"target-objects","dir":"Reference","previous_headings":"","what":"Target objects","title":"Dynamic batched computation downstream of tar_rep() — tar_rep2","text":"tarchetypes functions target factories, means return target objects lists target objects. Target objects represent skippable steps analysis pipeline described https://books.ropensci.org/targets/. Please read walkthrough https://books.ropensci.org/targets/walkthrough.html understand role target objects analysis pipelines. developers, https://wlandau.github.io/targetopia/contributing.html#target-factories explains target factories (functions like one generate targets) design specification https://books.ropensci.org/targets-design/ details structure composition target objects.","code":""},{"path":"https://docs.ropensci.org/tarchetypes/reference/tar_rep2.html","id":"replicate-specific-seeds","dir":"Reference","previous_headings":"","what":"Replicate-specific seeds","title":"Dynamic batched computation downstream of tar_rep() — tar_rep2","text":"ordinary pipelines, target unique deterministic pseudo-random number generator seed derived target name. batched replicate, however, batch target multiple replicate within batch. tar_rep() friends give replicate unique seed. replicate-specific seed created based dynamic parent target name, tar_option_get(\"seed\") (targets version 0.13.5.9000 ), batch index, rep-within-batch index. seed set just replicate runs. Replicate-specific seeds invariant batching structure. words, tar_rep(name = x, command = rnorm(1), batches = 100, reps = 1, ...) produces numerical output tar_rep(name = x, command = rnorm(1), batches = 10, reps = 10, ...) (different batch names). target factories seed scheme tar_rep2(), tar_map_rep(), tar_map2_count(), tar_map2_size(), tar_render_rep(). tar_map2_*() functions, possible manually supply seeds command1 argument invoke custom code command2 (set.seed(), withr::with_seed, withr::local_seed()). tar_render_rep(), custom seeds can supplied params argument invoked individual R Markdown reports. Likewise tar_quarto_rep() execute_params argument.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/tarchetypes/reference/tar_rep2.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Dynamic batched computation downstream of tar_rep() — tar_rep2","text":"","code":"if (identical(Sys.getenv(\"TAR_LONG_EXAMPLES\"), \"true\")) { targets::tar_dir({ # tar_dir() runs code from a temporary directory. targets::tar_script({   list(     tarchetypes::tar_rep(       data1,       data.frame(value = rnorm(1)),       batches = 2,       reps = 3     ),     tarchetypes::tar_rep(       data2,       list(value = rnorm(1)),       batches = 2, reps = 3,       iteration = \"list\" # List iteration is important for batched lists.     ),     tarchetypes::tar_rep2(       aggregate,       data.frame(value = data1$value + data2$value),       data1,       data2     )   ) }) targets::tar_make() targets::tar_read(aggregate) }) }"},{"path":"https://docs.ropensci.org/tarchetypes/reference/tar_rep2_raw.html","id":null,"dir":"Reference","previous_headings":"","what":"Dynamic batched computation downstream of tar_rep() (raw version). — tar_rep2_raw","title":"Dynamic batched computation downstream of tar_rep() (raw version). — tar_rep2_raw","text":"Batching important optimizing efficiency heavily dynamically-branched workflows: https://books.ropensci.org/targets/dynamic.html#batching. tar_rep2_raw() just like tar_rep2() except accepts character length 1 name, language object command, character vector names upstream batched targets.","code":""},{"path":"https://docs.ropensci.org/tarchetypes/reference/tar_rep2_raw.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Dynamic batched computation downstream of tar_rep() (raw version). — tar_rep2_raw","text":"","code":"tar_rep2_raw(   name,   command,   targets,   rep_workers = 1,   tidy_eval = targets::tar_option_get(\"tidy_eval\"),   packages = targets::tar_option_get(\"packages\"),   library = targets::tar_option_get(\"library\"),   format = targets::tar_option_get(\"format\"),   repository = targets::tar_option_get(\"repository\"),   iteration = targets::tar_option_get(\"iteration\"),   error = targets::tar_option_get(\"error\"),   memory = targets::tar_option_get(\"memory\"),   garbage_collection = targets::tar_option_get(\"garbage_collection\"),   deployment = targets::tar_option_get(\"deployment\"),   priority = targets::tar_option_get(\"priority\"),   resources = targets::tar_option_get(\"resources\"),   storage = targets::tar_option_get(\"storage\"),   retrieval = targets::tar_option_get(\"retrieval\"),   cue = targets::tar_option_get(\"cue\"),   description = targets::tar_option_get(\"description\") )"},{"path":"https://docs.ropensci.org/tarchetypes/reference/tar_rep2_raw.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Dynamic batched computation downstream of tar_rep() (raw version). — tar_rep2_raw","text":"name Symbol, name target. target name must valid name symbol R, must start dot. Subsequent targets can refer name symbolically induce dependency relationship: e.g. tar_target(downstream_target, f(upstream_target)) target named downstream_target depends target upstream_target function f(). addition, target's name determines random number generator seed. way, target runs reproducible seed someone else running pipeline get results, two targets pipeline share seed. (Even dynamic branches different names thus different seeds.) can recover seed completed target tar_meta(your_target, seed) run tar_seed_set() result locally recreate target's initial RNG state. command R code run target. targets Character vector names upstream batched targets created tar_rep(). supply one target, targets must number batches reps per batch. must return either data frames lists. List targets must use iteration = \"list\" tar_rep(). rep_workers Positive integer length 1, number local R processes use run reps within batches parallel. 1, reps run sequentially within batch. greater 1, reps within batch run parallel using PSOCK cluster. tidy_eval Logical, whether enable tidy evaluation interpreting command pattern. TRUE, can use \"bang-bang\" operator !! programmatically insert values global objects. packages Character vector packages load right target runs output data reloaded downstream targets. Use tar_option_set() set packages globally subsequent targets define. library Character vector library paths try loading packages. format Optional storage format target's return value. exception format = \"file\", target gets file _targets/objects, format different way save load file. See \"Storage formats\" section detailed list possible data storage formats. repository Character length 1, remote repository target storage. Choices: \"local\": file system local machine. \"aws\": Amazon Web Services (AWS) S3 bucket. Can configured non-AWS S3 bucket using endpoint argument tar_resources_aws(), versioning capabilities may lost . See cloud storage section https://books.ropensci.org/targets/data.html details instructions. \"gcp\": Google Cloud Platform storage bucket. See cloud storage section https://books.ropensci.org/targets/data.html details instructions. Note: repository \"local\" format \"file\" target create single output file. output file uploaded cloud tracked changes exists cloud. local file deleted target runs. iteration Character length 1, name iteration mode target. Choices: \"vector\": branching happens vctrs::vec_slice() aggregation happens vctrs::vec_c(). \"list\", branching happens [[]] aggregation happens list(). \"group\": dplyr::group_by()-like functionality branch subsets non-dynamic data frame. iteration = \"group\", target must dynamic (pattern argument tar_target() must left NULL). target's return value must data frame special tar_group column consecutive integers 1 number groups. integer designates group, branch created collection rows group. See tar_group() function see can create special tar_group column dplyr::group_by(). error Character length 1, target stops throws error. Options: \"stop\": whole pipeline stops throws error. \"continue\": whole pipeline keeps going. \"abridge\": currently running targets keep running, new targets launch . (Visit https://books.ropensci.org/targets/debugging.html learn debug targets using saved workspaces.) \"null\": errored target continues returns NULL. data hash deliberately wrong target date next run pipeline. memory Character length 1, memory strategy. \"persistent\", target stays memory end pipeline (unless storage \"worker\", case targets unloads value memory right storing order avoid sending copious data network). \"transient\", target gets unloaded every new target completes. Either way, target gets automatically loaded memory whenever another target needs value. cloud-based dynamic files (e.g. format = \"file\" repository = \"aws\"), memory strategy applies temporary local copy file: \"persistent\" means remains end pipeline deleted, \"transient\" means gets deleted soon possible. former conserves bandwidth, latter conserves local storage. garbage_collection Logical, whether run base::gc() just target runs. deployment Character length 1. deployment \"main\", target run central controlling R process. Otherwise, deployment \"worker\" set pipeline distributed/parallel computing, target runs parallel worker. distributed/parallel computing targets, please visit https://books.ropensci.org/targets/crew.html. priority Numeric length 1 0 1. Controls targets get deployed first multiple competing targets ready simultaneously. Targets priorities closer 1 get dispatched earlier (polled earlier tar_make_future()). resources Object returned tar_resources() optional settings high-performance computing functionality, alternative data storage formats, optional capabilities targets. See tar_resources() details. storage Character length 1, relevant tar_make_clustermq() tar_make_future(). Must one following values: \"main\": target's return value sent back host machine saved/uploaded locally. \"worker\": worker saves/uploads value. \"none\": almost never recommended. niche situations, e.g. data needs loaded explicitly another language. use , return value target totally ignored target ends, downstream target still attempts load data file (except retrieval = \"none\"). select storage = \"none\", return value target's command ignored, data saved automatically. dynamic files (format = \"file\") responsibility user write data store inside target. distinguishing feature storage = \"none\" (opposed format = \"file\") general case, downstream targets automatically try load data data store dependency. corollary, storage = \"none\" completely unnecessary format \"file\". retrieval Character length 1, relevant tar_make_clustermq() tar_make_future(). Must one following values: \"main\": target's dependencies loaded host machine sent worker target runs. \"worker\": worker loads targets dependencies. \"none\": dependencies loaded . choice almost never recommended. niche situations, e.g. data needs loaded explicitly another language. cue optional object tar_cue() customize rules decide whether target date. description Character length 1, custom free-form human-readable text description target. Descriptions appear target labels functions like tar_manifest() tar_visnetwork(), let select subsets targets names argument functions like tar_make(). example, tar_manifest(names = tar_described_as(starts_with(\"survival model\"))) lists targets whose descriptions start character string \"survival model\".","code":""},{"path":"https://docs.ropensci.org/tarchetypes/reference/tar_rep2_raw.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Dynamic batched computation downstream of tar_rep() (raw version). — tar_rep2_raw","text":"new target object perform batched computation downstream tar_rep(). See \"Target objects\" section background.","code":""},{"path":"https://docs.ropensci.org/tarchetypes/reference/tar_rep2_raw.html","id":"target-objects","dir":"Reference","previous_headings":"","what":"Target objects","title":"Dynamic batched computation downstream of tar_rep() (raw version). — tar_rep2_raw","text":"tarchetypes functions target factories, means return target objects lists target objects. Target objects represent skippable steps analysis pipeline described https://books.ropensci.org/targets/. Please read walkthrough https://books.ropensci.org/targets/walkthrough.html understand role target objects analysis pipelines. developers, https://wlandau.github.io/targetopia/contributing.html#target-factories explains target factories (functions like one generate targets) design specification https://books.ropensci.org/targets-design/ details structure composition target objects.","code":""},{"path":"https://docs.ropensci.org/tarchetypes/reference/tar_rep2_raw.html","id":"replicate-specific-seeds","dir":"Reference","previous_headings":"","what":"Replicate-specific seeds","title":"Dynamic batched computation downstream of tar_rep() (raw version). — tar_rep2_raw","text":"ordinary pipelines, target unique deterministic pseudo-random number generator seed derived target name. batched replicate, however, batch target multiple replicate within batch. tar_rep() friends give replicate unique seed. replicate-specific seed created based dynamic parent target name, tar_option_get(\"seed\") (targets version 0.13.5.9000 ), batch index, rep-within-batch index. seed set just replicate runs. Replicate-specific seeds invariant batching structure. words, tar_rep(name = x, command = rnorm(1), batches = 100, reps = 1, ...) produces numerical output tar_rep(name = x, command = rnorm(1), batches = 10, reps = 10, ...) (different batch names). target factories seed scheme tar_rep2(), tar_map_rep(), tar_map2_count(), tar_map2_size(), tar_render_rep(). tar_map2_*() functions, possible manually supply seeds command1 argument invoke custom code command2 (set.seed(), withr::with_seed, withr::local_seed()). tar_render_rep(), custom seeds can supplied params argument invoked individual R Markdown reports. Likewise tar_quarto_rep() execute_params argument.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/tarchetypes/reference/tar_rep2_raw.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Dynamic batched computation downstream of tar_rep() (raw version). — tar_rep2_raw","text":"","code":"if (identical(Sys.getenv(\"TAR_LONG_EXAMPLES\"), \"true\")) { targets::tar_dir({ # tar_dir() runs code from a temporary directory. targets::tar_script({   list(     tarchetypes::tar_rep(       data1,       data.frame(value = rnorm(1)),       batches = 2,       reps = 3     ),     tarchetypes::tar_rep(       data2,       list(value = rnorm(1)),       batches = 2, reps = 3,       iteration = \"list\" # List iteration is important for batched lists.     ),     tarchetypes::tar_rep2_raw(       \"aggregate\",       quote(data.frame(value = data1$value + data2$value)),       targets = c(\"data1\", \"data2\")     )   ) }) targets::tar_make() targets::tar_read(aggregate) }) }"},{"path":"https://docs.ropensci.org/tarchetypes/reference/tar_rep2_run.html","id":null,"dir":"Reference","previous_headings":"","what":"Run tar_rep2() batches. — tar_rep2_run","title":"Run tar_rep2() batches. — tar_rep2_run","text":"user-side function. invoke directly.","code":""},{"path":"https://docs.ropensci.org/tarchetypes/reference/tar_rep2_run.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run tar_rep2() batches. — tar_rep2_run","text":"","code":"tar_rep2_run(command, batches, iteration, rep_workers)"},{"path":"https://docs.ropensci.org/tarchetypes/reference/tar_rep2_run.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Run tar_rep2() batches. — tar_rep2_run","text":"command R expression, command run rep. batches Named list batch data map . iteration Iteration method: \"list\", \"vector\", \"group\". rep_workers Positive integer length 1, number local R processes use run reps within batches parallel. 1, reps run sequentially within batch. greater 1, reps within batch run parallel using PSOCK cluster.","code":""},{"path":"https://docs.ropensci.org/tarchetypes/reference/tar_rep2_run.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Run tar_rep2() batches. — tar_rep2_run","text":"result batched replication.","code":""},{"path":"https://docs.ropensci.org/tarchetypes/reference/tar_rep2_run_rep.html","id":null,"dir":"Reference","previous_headings":"","what":"Run a rep in a tar_rep2()-powered function. — tar_rep2_run_rep","title":"Run a rep in a tar_rep2()-powered function. — tar_rep2_run_rep","text":"user-side function. invoke directly.","code":""},{"path":"https://docs.ropensci.org/tarchetypes/reference/tar_rep2_run_rep.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run a rep in a tar_rep2()-powered function. — tar_rep2_run_rep","text":"","code":"tar_rep2_run_rep(rep, slice, command, batch, seeds, envir)"},{"path":"https://docs.ropensci.org/tarchetypes/reference/tar_rep2_run_rep.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Run a rep in a tar_rep2()-powered function. — tar_rep2_run_rep","text":"rep Rep number. slice Slice upstream batch data given rep. command R command run. batch Batch number. seeds Random number generator seeds batch. envir Environment target.","code":""},{"path":"https://docs.ropensci.org/tarchetypes/reference/tar_rep2_run_rep.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Run a rep in a tar_rep2()-powered function. — tar_rep2_run_rep","text":"result running expr.","code":""},{"path":"https://docs.ropensci.org/tarchetypes/reference/tar_rep2_run_rep.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Run a rep in a tar_rep2()-powered function. — tar_rep2_run_rep","text":"","code":"# See the examples of tar_rep2()."},{"path":"https://docs.ropensci.org/tarchetypes/reference/tar_rep_map.html","id":null,"dir":"Reference","previous_headings":"","what":"Dynamic batched computation downstream of tar_rep() (deprecated). — tar_rep_map","title":"Dynamic batched computation downstream of tar_rep() (deprecated). — tar_rep_map","text":"Use tar_rep2() instead.","code":""},{"path":"https://docs.ropensci.org/tarchetypes/reference/tar_rep_map.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Dynamic batched computation downstream of tar_rep() (deprecated). — tar_rep_map","text":"","code":"tar_rep_map(   name,   command,   ...,   tidy_eval = targets::tar_option_get(\"tidy_eval\"),   packages = targets::tar_option_get(\"packages\"),   library = targets::tar_option_get(\"library\"),   format = targets::tar_option_get(\"format\"),   repository = targets::tar_option_get(\"repository\"),   iteration = targets::tar_option_get(\"iteration\"),   error = targets::tar_option_get(\"error\"),   memory = targets::tar_option_get(\"memory\"),   garbage_collection = targets::tar_option_get(\"garbage_collection\"),   deployment = targets::tar_option_get(\"deployment\"),   priority = targets::tar_option_get(\"priority\"),   resources = targets::tar_option_get(\"resources\"),   storage = targets::tar_option_get(\"storage\"),   retrieval = targets::tar_option_get(\"retrieval\"),   cue = targets::tar_option_get(\"cue\"),   description = targets::tar_option_get(\"description\") )"},{"path":"https://docs.ropensci.org/tarchetypes/reference/tar_rep_map.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Dynamic batched computation downstream of tar_rep() (deprecated). — tar_rep_map","text":"name Symbol, name target. target name must valid name symbol R, must start dot. Subsequent targets can refer name symbolically induce dependency relationship: e.g. tar_target(downstream_target, f(upstream_target)) target named downstream_target depends target upstream_target function f(). addition, target's name determines random number generator seed. way, target runs reproducible seed someone else running pipeline get results, two targets pipeline share seed. (Even dynamic branches different names thus different seeds.) can recover seed completed target tar_meta(your_target, seed) run tar_seed_set() result locally recreate target's initial RNG state. command R code run target. ... Symbols name one upstream batched targets created tar_rep(). supply one target, targets must number batches reps per batch. must return either data frames lists. List targets must use iteration = \"list\" tar_rep(). tidy_eval Logical, whether enable tidy evaluation interpreting command pattern. TRUE, can use \"bang-bang\" operator !! programmatically insert values global objects. packages Character vector packages load right target runs output data reloaded downstream targets. Use tar_option_set() set packages globally subsequent targets define. library Character vector library paths try loading packages. format Optional storage format target's return value. exception format = \"file\", target gets file _targets/objects, format different way save load file. See \"Storage formats\" section detailed list possible data storage formats. repository Character length 1, remote repository target storage. Choices: \"local\": file system local machine. \"aws\": Amazon Web Services (AWS) S3 bucket. Can configured non-AWS S3 bucket using endpoint argument tar_resources_aws(), versioning capabilities may lost . See cloud storage section https://books.ropensci.org/targets/data.html details instructions. \"gcp\": Google Cloud Platform storage bucket. See cloud storage section https://books.ropensci.org/targets/data.html details instructions. Note: repository \"local\" format \"file\" target create single output file. output file uploaded cloud tracked changes exists cloud. local file deleted target runs. iteration Character length 1, name iteration mode target. Choices: \"vector\": branching happens vctrs::vec_slice() aggregation happens vctrs::vec_c(). \"list\", branching happens [[]] aggregation happens list(). \"group\": dplyr::group_by()-like functionality branch subsets non-dynamic data frame. iteration = \"group\", target must dynamic (pattern argument tar_target() must left NULL). target's return value must data frame special tar_group column consecutive integers 1 number groups. integer designates group, branch created collection rows group. See tar_group() function see can create special tar_group column dplyr::group_by(). error Character length 1, target stops throws error. Options: \"stop\": whole pipeline stops throws error. \"continue\": whole pipeline keeps going. \"abridge\": currently running targets keep running, new targets launch . (Visit https://books.ropensci.org/targets/debugging.html learn debug targets using saved workspaces.) \"null\": errored target continues returns NULL. data hash deliberately wrong target date next run pipeline. memory Character length 1, memory strategy. \"persistent\", target stays memory end pipeline (unless storage \"worker\", case targets unloads value memory right storing order avoid sending copious data network). \"transient\", target gets unloaded every new target completes. Either way, target gets automatically loaded memory whenever another target needs value. cloud-based dynamic files (e.g. format = \"file\" repository = \"aws\"), memory strategy applies temporary local copy file: \"persistent\" means remains end pipeline deleted, \"transient\" means gets deleted soon possible. former conserves bandwidth, latter conserves local storage. garbage_collection Logical, whether run base::gc() just target runs. deployment Character length 1. deployment \"main\", target run central controlling R process. Otherwise, deployment \"worker\" set pipeline distributed/parallel computing, target runs parallel worker. distributed/parallel computing targets, please visit https://books.ropensci.org/targets/crew.html. priority Numeric length 1 0 1. Controls targets get deployed first multiple competing targets ready simultaneously. Targets priorities closer 1 get dispatched earlier (polled earlier tar_make_future()). resources Object returned tar_resources() optional settings high-performance computing functionality, alternative data storage formats, optional capabilities targets. See tar_resources() details. storage Character length 1, relevant tar_make_clustermq() tar_make_future(). Must one following values: \"main\": target's return value sent back host machine saved/uploaded locally. \"worker\": worker saves/uploads value. \"none\": almost never recommended. niche situations, e.g. data needs loaded explicitly another language. use , return value target totally ignored target ends, downstream target still attempts load data file (except retrieval = \"none\"). select storage = \"none\", return value target's command ignored, data saved automatically. dynamic files (format = \"file\") responsibility user write data store inside target. distinguishing feature storage = \"none\" (opposed format = \"file\") general case, downstream targets automatically try load data data store dependency. corollary, storage = \"none\" completely unnecessary format \"file\". retrieval Character length 1, relevant tar_make_clustermq() tar_make_future(). Must one following values: \"main\": target's dependencies loaded host machine sent worker target runs. \"worker\": worker loads targets dependencies. \"none\": dependencies loaded . choice almost never recommended. niche situations, e.g. data needs loaded explicitly another language. cue optional object tar_cue() customize rules decide whether target date. description Character length 1, custom free-form human-readable text description target. Descriptions appear target labels functions like tar_manifest() tar_visnetwork(), let select subsets targets names argument functions like tar_make(). example, tar_manifest(names = tar_described_as(starts_with(\"survival model\"))) lists targets whose descriptions start character string \"survival model\".","code":""},{"path":"https://docs.ropensci.org/tarchetypes/reference/tar_rep_map.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Dynamic batched computation downstream of tar_rep() (deprecated). — tar_rep_map","text":"new target object perform batched computation. See \"Target objects\" section background.","code":""},{"path":"https://docs.ropensci.org/tarchetypes/reference/tar_rep_map.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Dynamic batched computation downstream of tar_rep() (deprecated). — tar_rep_map","text":"Deprecated version 0.4.0, 2021-12-06.","code":""},{"path":"https://docs.ropensci.org/tarchetypes/reference/tar_rep_map.html","id":"target-objects","dir":"Reference","previous_headings":"","what":"Target objects","title":"Dynamic batched computation downstream of tar_rep() (deprecated). — tar_rep_map","text":"tarchetypes functions target factories, means return target objects lists target objects. Target objects represent skippable steps analysis pipeline described https://books.ropensci.org/targets/. Please read walkthrough https://books.ropensci.org/targets/walkthrough.html understand role target objects analysis pipelines. developers, https://wlandau.github.io/targetopia/contributing.html#target-factories explains target factories (functions like one generate targets) design specification https://books.ropensci.org/targets-design/ details structure composition target objects.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/tarchetypes/reference/tar_rep_map.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Dynamic batched computation downstream of tar_rep() (deprecated). — tar_rep_map","text":"","code":"if (identical(Sys.getenv(\"TAR_LONG_EXAMPLES\"), \"true\")) { targets::tar_dir({ # tar_dir() runs code from a temporary directory. targets::tar_script({   list(     tarchetypes::tar_rep(       data1,       data.frame(value = rnorm(1)),       batches = 2,       reps = 3     ),     tarchetypes::tar_rep(       data2,       list(value = rnorm(1)),       batches = 2, reps = 3,       iteration = \"list\" # List iteration is important for batched lists.     ),     tarchetypes::tar_rep2( # Use instead of tar_rep_map().       aggregate,       data.frame(value = data1$value + data2$value),       data1,       data2     )   ) }) targets::tar_make() targets::tar_read(aggregate) }) }"},{"path":"https://docs.ropensci.org/tarchetypes/reference/tar_rep_map_raw.html","id":null,"dir":"Reference","previous_headings":"","what":"Dynamic batched computation downstream of tar_rep()\n(raw; deprecated). — tar_rep_map_raw","title":"Dynamic batched computation downstream of tar_rep()\n(raw; deprecated). — tar_rep_map_raw","text":"Deprecated. Use tar_rep2_raw() instead.","code":""},{"path":"https://docs.ropensci.org/tarchetypes/reference/tar_rep_map_raw.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Dynamic batched computation downstream of tar_rep()\n(raw; deprecated). — tar_rep_map_raw","text":"","code":"tar_rep_map_raw(   name,   command,   targets,   tidy_eval = targets::tar_option_get(\"tidy_eval\"),   packages = targets::tar_option_get(\"packages\"),   library = targets::tar_option_get(\"library\"),   format = targets::tar_option_get(\"format\"),   repository = targets::tar_option_get(\"repository\"),   iteration = targets::tar_option_get(\"iteration\"),   error = targets::tar_option_get(\"error\"),   memory = targets::tar_option_get(\"memory\"),   garbage_collection = targets::tar_option_get(\"garbage_collection\"),   deployment = targets::tar_option_get(\"deployment\"),   priority = targets::tar_option_get(\"priority\"),   resources = targets::tar_option_get(\"resources\"),   storage = targets::tar_option_get(\"storage\"),   retrieval = targets::tar_option_get(\"retrieval\"),   cue = targets::tar_option_get(\"cue\"),   description = targets::tar_option_get(\"description\") )"},{"path":"https://docs.ropensci.org/tarchetypes/reference/tar_rep_map_raw.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Dynamic batched computation downstream of tar_rep()\n(raw; deprecated). — tar_rep_map_raw","text":"name Symbol, name target. target name must valid name symbol R, must start dot. Subsequent targets can refer name symbolically induce dependency relationship: e.g. tar_target(downstream_target, f(upstream_target)) target named downstream_target depends target upstream_target function f(). addition, target's name determines random number generator seed. way, target runs reproducible seed someone else running pipeline get results, two targets pipeline share seed. (Even dynamic branches different names thus different seeds.) can recover seed completed target tar_meta(your_target, seed) run tar_seed_set() result locally recreate target's initial RNG state. command R code run target. targets Character vector names upstream batched targets created tar_rep(). supply one target, targets must number batches reps per batch. must return either data frames lists. List targets must use iteration = \"list\" tar_rep(). tidy_eval Logical, whether enable tidy evaluation interpreting command pattern. TRUE, can use \"bang-bang\" operator !! programmatically insert values global objects. packages Character vector packages load right target runs output data reloaded downstream targets. Use tar_option_set() set packages globally subsequent targets define. library Character vector library paths try loading packages. format Optional storage format target's return value. exception format = \"file\", target gets file _targets/objects, format different way save load file. See \"Storage formats\" section detailed list possible data storage formats. repository Character length 1, remote repository target storage. Choices: \"local\": file system local machine. \"aws\": Amazon Web Services (AWS) S3 bucket. Can configured non-AWS S3 bucket using endpoint argument tar_resources_aws(), versioning capabilities may lost . See cloud storage section https://books.ropensci.org/targets/data.html details instructions. \"gcp\": Google Cloud Platform storage bucket. See cloud storage section https://books.ropensci.org/targets/data.html details instructions. Note: repository \"local\" format \"file\" target create single output file. output file uploaded cloud tracked changes exists cloud. local file deleted target runs. iteration Character length 1, name iteration mode target. Choices: \"vector\": branching happens vctrs::vec_slice() aggregation happens vctrs::vec_c(). \"list\", branching happens [[]] aggregation happens list(). \"group\": dplyr::group_by()-like functionality branch subsets non-dynamic data frame. iteration = \"group\", target must dynamic (pattern argument tar_target() must left NULL). target's return value must data frame special tar_group column consecutive integers 1 number groups. integer designates group, branch created collection rows group. See tar_group() function see can create special tar_group column dplyr::group_by(). error Character length 1, target stops throws error. Options: \"stop\": whole pipeline stops throws error. \"continue\": whole pipeline keeps going. \"abridge\": currently running targets keep running, new targets launch . (Visit https://books.ropensci.org/targets/debugging.html learn debug targets using saved workspaces.) \"null\": errored target continues returns NULL. data hash deliberately wrong target date next run pipeline. memory Character length 1, memory strategy. \"persistent\", target stays memory end pipeline (unless storage \"worker\", case targets unloads value memory right storing order avoid sending copious data network). \"transient\", target gets unloaded every new target completes. Either way, target gets automatically loaded memory whenever another target needs value. cloud-based dynamic files (e.g. format = \"file\" repository = \"aws\"), memory strategy applies temporary local copy file: \"persistent\" means remains end pipeline deleted, \"transient\" means gets deleted soon possible. former conserves bandwidth, latter conserves local storage. garbage_collection Logical, whether run base::gc() just target runs. deployment Character length 1. deployment \"main\", target run central controlling R process. Otherwise, deployment \"worker\" set pipeline distributed/parallel computing, target runs parallel worker. distributed/parallel computing targets, please visit https://books.ropensci.org/targets/crew.html. priority Numeric length 1 0 1. Controls targets get deployed first multiple competing targets ready simultaneously. Targets priorities closer 1 get dispatched earlier (polled earlier tar_make_future()). resources Object returned tar_resources() optional settings high-performance computing functionality, alternative data storage formats, optional capabilities targets. See tar_resources() details. storage Character length 1, relevant tar_make_clustermq() tar_make_future(). Must one following values: \"main\": target's return value sent back host machine saved/uploaded locally. \"worker\": worker saves/uploads value. \"none\": almost never recommended. niche situations, e.g. data needs loaded explicitly another language. use , return value target totally ignored target ends, downstream target still attempts load data file (except retrieval = \"none\"). select storage = \"none\", return value target's command ignored, data saved automatically. dynamic files (format = \"file\") responsibility user write data store inside target. distinguishing feature storage = \"none\" (opposed format = \"file\") general case, downstream targets automatically try load data data store dependency. corollary, storage = \"none\" completely unnecessary format \"file\". retrieval Character length 1, relevant tar_make_clustermq() tar_make_future(). Must one following values: \"main\": target's dependencies loaded host machine sent worker target runs. \"worker\": worker loads targets dependencies. \"none\": dependencies loaded . choice almost never recommended. niche situations, e.g. data needs loaded explicitly another language. cue optional object tar_cue() customize rules decide whether target date. description Character length 1, custom free-form human-readable text description target. Descriptions appear target labels functions like tar_manifest() tar_visnetwork(), let select subsets targets names argument functions like tar_make(). example, tar_manifest(names = tar_described_as(starts_with(\"survival model\"))) lists targets whose descriptions start character string \"survival model\".","code":""},{"path":"https://docs.ropensci.org/tarchetypes/reference/tar_rep_map_raw.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Dynamic batched computation downstream of tar_rep()\n(raw; deprecated). — tar_rep_map_raw","text":"new target object perform batched computation downstream tar_rep(). See \"Target objects\" section background.","code":""},{"path":"https://docs.ropensci.org/tarchetypes/reference/tar_rep_map_raw.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Dynamic batched computation downstream of tar_rep()\n(raw; deprecated). — tar_rep_map_raw","text":"Deprecated version 0.4.0, 2021-12-06.","code":""},{"path":"https://docs.ropensci.org/tarchetypes/reference/tar_rep_map_raw.html","id":"target-objects","dir":"Reference","previous_headings":"","what":"Target objects","title":"Dynamic batched computation downstream of tar_rep()\n(raw; deprecated). — tar_rep_map_raw","text":"tarchetypes functions target factories, means return target objects lists target objects. Target objects represent skippable steps analysis pipeline described https://books.ropensci.org/targets/. Please read walkthrough https://books.ropensci.org/targets/walkthrough.html understand role target objects analysis pipelines. developers, https://wlandau.github.io/targetopia/contributing.html#target-factories explains target factories (functions like one generate targets) design specification https://books.ropensci.org/targets-design/ details structure composition target objects.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/tarchetypes/reference/tar_rep_map_raw.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Dynamic batched computation downstream of tar_rep()\n(raw; deprecated). — tar_rep_map_raw","text":"","code":"if (identical(Sys.getenv(\"TAR_LONG_EXAMPLES\"), \"true\")) { targets::tar_dir({ # tar_dir() runs code from a temporary directory. targets::tar_script({   list(     tarchetypes::tar_rep(       data1,       data.frame(value = rnorm(1)),       batches = 2,       reps = 3     ),     tarchetypes::tar_rep(       data2,       list(value = rnorm(1)),       batches = 2, reps = 3,       iteration = \"list\" # List iteration is important for batched lists.     ),     tarchetypes::tar_rep2_raw( # Use instead of tar_rep_map_raw().       \"aggregate\",       quote(data.frame(value = data1$value + data2$value)),       targets = c(\"data1\", \"data2\")     )   ) }) targets::tar_make() targets::tar_read(aggregate) }) }"},{"path":"https://docs.ropensci.org/tarchetypes/reference/tar_rep_raw.html","id":null,"dir":"Reference","previous_headings":"","what":"Batched replication with dynamic branching\n(raw version). — tar_rep_raw","title":"Batched replication with dynamic branching\n(raw version). — tar_rep_raw","text":"Batching important optimizing efficiency heavily dynamically-branched workflows: https://books.ropensci.org/targets/dynamic.html#batching. tar_rep_raw() just like tar_rep() except name character string command language object.","code":""},{"path":"https://docs.ropensci.org/tarchetypes/reference/tar_rep_raw.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Batched replication with dynamic branching\n(raw version). — tar_rep_raw","text":"","code":"tar_rep_raw(   name,   command,   batches = 1,   reps = 1,   rep_workers = 1,   tidy_eval = targets::tar_option_get(\"tidy_eval\"),   packages = targets::tar_option_get(\"packages\"),   library = targets::tar_option_get(\"library\"),   format = targets::tar_option_get(\"format\"),   repository = targets::tar_option_get(\"repository\"),   iteration = targets::tar_option_get(\"iteration\"),   error = targets::tar_option_get(\"error\"),   memory = targets::tar_option_get(\"memory\"),   garbage_collection = targets::tar_option_get(\"garbage_collection\"),   deployment = targets::tar_option_get(\"deployment\"),   priority = targets::tar_option_get(\"priority\"),   resources = targets::tar_option_get(\"resources\"),   storage = targets::tar_option_get(\"storage\"),   retrieval = targets::tar_option_get(\"retrieval\"),   cue = targets::tar_option_get(\"cue\"),   description = targets::tar_option_get(\"description\") )"},{"path":"https://docs.ropensci.org/tarchetypes/reference/tar_rep_raw.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Batched replication with dynamic branching\n(raw version). — tar_rep_raw","text":"name Character length 1, name target. target name must valid name symbol R, must start dot. Subsequent targets can refer name symbolically induce dependency relationship: e.g. tar_target(downstream_target, f(upstream_target)) target named downstream_target depends target upstream_target function f(). addition, target's name determines random number generator seed. way, target runs reproducible seed someone else running pipeline get results, two targets pipeline share seed. (Even dynamic branches different names thus different seeds.) can recover seed completed target tar_meta(your_target, seed) run tar_seed_set() result locally recreate target's initial RNG state. command Expression object code run multiple times. Must return list data frame evaluated. batches Number batches. also number dynamic branches created tar_make(). reps Number replications batch. total number replications batches * reps. rep_workers Positive integer length 1, number local R processes use run reps within batches parallel. 1, reps run sequentially within batch. greater 1, reps within batch run parallel using PSOCK cluster. tidy_eval Whether invoke tidy evaluation (e.g. !! operator rlang) soon target defined (tar_make()). Applies command argument. packages Character vector packages load right target runs output data reloaded downstream targets. Use tar_option_set() set packages globally subsequent targets define. library Character vector library paths try loading packages. format Optional storage format target's return value. exception format = \"file\", target gets file _targets/objects, format different way save load file. See \"Storage formats\" section detailed list possible data storage formats. repository Character length 1, remote repository target storage. Choices: \"local\": file system local machine. \"aws\": Amazon Web Services (AWS) S3 bucket. Can configured non-AWS S3 bucket using endpoint argument tar_resources_aws(), versioning capabilities may lost . See cloud storage section https://books.ropensci.org/targets/data.html details instructions. \"gcp\": Google Cloud Platform storage bucket. See cloud storage section https://books.ropensci.org/targets/data.html details instructions. Note: repository \"local\" format \"file\" target create single output file. output file uploaded cloud tracked changes exists cloud. local file deleted target runs. iteration Character length 1, name iteration mode target. Choices: \"vector\": branching happens vctrs::vec_slice() aggregation happens vctrs::vec_c(). \"list\", branching happens [[]] aggregation happens list(). \"group\": dplyr::group_by()-like functionality branch subsets non-dynamic data frame. iteration = \"group\", target must dynamic (pattern argument tar_target() must left NULL). target's return value must data frame special tar_group column consecutive integers 1 number groups. integer designates group, branch created collection rows group. See tar_group() function see can create special tar_group column dplyr::group_by(). error Character length 1, target stops throws error. Options: \"stop\": whole pipeline stops throws error. \"continue\": whole pipeline keeps going. \"abridge\": currently running targets keep running, new targets launch . (Visit https://books.ropensci.org/targets/debugging.html learn debug targets using saved workspaces.) \"null\": errored target continues returns NULL. data hash deliberately wrong target date next run pipeline. memory Character length 1, memory strategy. \"persistent\", target stays memory end pipeline (unless storage \"worker\", case targets unloads value memory right storing order avoid sending copious data network). \"transient\", target gets unloaded every new target completes. Either way, target gets automatically loaded memory whenever another target needs value. cloud-based dynamic files (e.g. format = \"file\" repository = \"aws\"), memory strategy applies temporary local copy file: \"persistent\" means remains end pipeline deleted, \"transient\" means gets deleted soon possible. former conserves bandwidth, latter conserves local storage. garbage_collection Logical, whether run base::gc() just target runs. deployment Character length 1. deployment \"main\", target run central controlling R process. Otherwise, deployment \"worker\" set pipeline distributed/parallel computing, target runs parallel worker. distributed/parallel computing targets, please visit https://books.ropensci.org/targets/crew.html. priority Numeric length 1 0 1. Controls targets get deployed first multiple competing targets ready simultaneously. Targets priorities closer 1 get dispatched earlier (polled earlier tar_make_future()). resources Object returned tar_resources() optional settings high-performance computing functionality, alternative data storage formats, optional capabilities targets. See tar_resources() details. storage Character length 1, relevant tar_make_clustermq() tar_make_future(). Must one following values: \"main\": target's return value sent back host machine saved/uploaded locally. \"worker\": worker saves/uploads value. \"none\": almost never recommended. niche situations, e.g. data needs loaded explicitly another language. use , return value target totally ignored target ends, downstream target still attempts load data file (except retrieval = \"none\"). select storage = \"none\", return value target's command ignored, data saved automatically. dynamic files (format = \"file\") responsibility user write data store inside target. distinguishing feature storage = \"none\" (opposed format = \"file\") general case, downstream targets automatically try load data data store dependency. corollary, storage = \"none\" completely unnecessary format \"file\". retrieval Character length 1, relevant tar_make_clustermq() tar_make_future(). Must one following values: \"main\": target's dependencies loaded host machine sent worker target runs. \"worker\": worker loads targets dependencies. \"none\": dependencies loaded . choice almost never recommended. niche situations, e.g. data needs loaded explicitly another language. cue optional object tar_cue() customize rules decide whether target date. description Character length 1, custom free-form human-readable text description target. Descriptions appear target labels functions like tar_manifest() tar_visnetwork(), let select subsets targets names argument functions like tar_make(). example, tar_manifest(names = tar_described_as(starts_with(\"survival model\"))) lists targets whose descriptions start character string \"survival model\".","code":""},{"path":"https://docs.ropensci.org/tarchetypes/reference/tar_rep_raw.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Batched replication with dynamic branching\n(raw version). — tar_rep_raw","text":"list two target objects, one upstream one downstream. upstream one work returns file paths, downstream target pattern applies format = \"file\". See \"Target objects\" section background.","code":""},{"path":"https://docs.ropensci.org/tarchetypes/reference/tar_rep_raw.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Batched replication with dynamic branching\n(raw version). — tar_rep_raw","text":"tar_rep_raw() creates two targets: upstream local stem integer vector batch ids, downstream pattern maps batch ids. (Thus, batch branch.) batch/branch replicates command certain number times. batches reps within batch aggregated according method specify iteration argument. \"list\", reps batches aggregated list(). \"vector\", vctrs::vec_c(). \"group\", vctrs::vec_rbind().","code":""},{"path":"https://docs.ropensci.org/tarchetypes/reference/tar_rep_raw.html","id":"replicate-specific-seeds","dir":"Reference","previous_headings":"","what":"Replicate-specific seeds","title":"Batched replication with dynamic branching\n(raw version). — tar_rep_raw","text":"ordinary pipelines, target unique deterministic pseudo-random number generator seed derived target name. batched replicate, however, batch target multiple replicate within batch. tar_rep() friends give replicate unique seed. replicate-specific seed created based dynamic parent target name, tar_option_get(\"seed\") (targets version 0.13.5.9000 ), batch index, rep-within-batch index. seed set just replicate runs. Replicate-specific seeds invariant batching structure. words, tar_rep(name = x, command = rnorm(1), batches = 100, reps = 1, ...) produces numerical output tar_rep(name = x, command = rnorm(1), batches = 10, reps = 10, ...) (different batch names). target factories seed scheme tar_rep2(), tar_map_rep(), tar_map2_count(), tar_map2_size(), tar_render_rep(). tar_map2_*() functions, possible manually supply seeds command1 argument invoke custom code command2 (set.seed(), withr::with_seed, withr::local_seed()). tar_render_rep(), custom seeds can supplied params argument invoked individual R Markdown reports. Likewise tar_quarto_rep() execute_params argument.","code":""},{"path":"https://docs.ropensci.org/tarchetypes/reference/tar_rep_raw.html","id":"target-objects","dir":"Reference","previous_headings":"","what":"Target objects","title":"Batched replication with dynamic branching\n(raw version). — tar_rep_raw","text":"tarchetypes functions target factories, means return target objects lists target objects. Target objects represent skippable steps analysis pipeline described https://books.ropensci.org/targets/. Please read walkthrough https://books.ropensci.org/targets/walkthrough.html understand role target objects analysis pipelines. developers, https://wlandau.github.io/targetopia/contributing.html#target-factories explains target factories (functions like one generate targets) design specification https://books.ropensci.org/targets-design/ details structure composition target objects.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/tarchetypes/reference/tar_rep_raw.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Batched replication with dynamic branching\n(raw version). — tar_rep_raw","text":"","code":"if (identical(Sys.getenv(\"TAR_LONG_EXAMPLES\"), \"true\")) { targets::tar_dir({ # tar_dir() runs code from a temporary directory. targets::tar_script({   list(     tarchetypes::tar_rep_raw(       \"x\",       expression(data.frame(x = sample.int(1e4, 2))),       batches = 2,       reps = 3     )   ) }) targets::tar_make(callr_function = NULL) targets::tar_read(x) }) }"},{"path":"https://docs.ropensci.org/tarchetypes/reference/tar_rep_run.html","id":null,"dir":"Reference","previous_headings":"","what":"Run a batch in a tar_rep() archetype. — tar_rep_run","title":"Run a batch in a tar_rep() archetype. — tar_rep_run","text":"Internal function needed tar_rep(). Users invoke directly.","code":""},{"path":"https://docs.ropensci.org/tarchetypes/reference/tar_rep_run.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run a batch in a tar_rep() archetype. — tar_rep_run","text":"","code":"tar_rep_run(command, batch, reps, iteration, rep_workers)"},{"path":"https://docs.ropensci.org/tarchetypes/reference/tar_rep_run.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Run a batch in a tar_rep() archetype. — tar_rep_run","text":"command Expression object, command replicate. batch Numeric length 1, batch index. reps Numeric length 1, number reps per batch. iteration Character, iteration method. rep_workers Positive integer length 1, number local R processes use run reps within batches parallel. 1, reps run sequentially within batch. greater 1, reps within batch run parallel using PSOCK cluster.","code":""},{"path":"https://docs.ropensci.org/tarchetypes/reference/tar_rep_run.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Run a batch in a tar_rep() archetype. — tar_rep_run","text":"Aggregated results multiple executions user-defined command supplied tar_rep(). Depends user specifies. Common use cases simulated datasets.","code":""},{"path":"https://docs.ropensci.org/tarchetypes/reference/tar_rep_run_map_rep.html","id":null,"dir":"Reference","previous_headings":"","what":"Run a rep in tar_rep(). — tar_rep_run_map_rep","title":"Run a rep in tar_rep(). — tar_rep_run_map_rep","text":"user-side function. invoke directly.","code":""},{"path":"https://docs.ropensci.org/tarchetypes/reference/tar_rep_run_map_rep.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run a rep in tar_rep(). — tar_rep_run_map_rep","text":"","code":"tar_rep_run_map_rep(rep, expr, batch, seeds, envir)"},{"path":"https://docs.ropensci.org/tarchetypes/reference/tar_rep_run_map_rep.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Run a rep in tar_rep(). — tar_rep_run_map_rep","text":"rep Rep number. expr R expression run. batch Batch number. seeds Random number generator seeds batch. envir Environment target.","code":""},{"path":"https://docs.ropensci.org/tarchetypes/reference/tar_rep_run_map_rep.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Run a rep in tar_rep(). — tar_rep_run_map_rep","text":"result running expr.","code":""},{"path":"https://docs.ropensci.org/tarchetypes/reference/tar_rep_run_map_rep.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Run a rep in tar_rep(). — tar_rep_run_map_rep","text":"","code":"# See the examples of tar_rep()."},{"path":"https://docs.ropensci.org/tarchetypes/reference/tar_select_names.html","id":null,"dir":"Reference","previous_headings":"","what":"Select target names from a target list — tar_select_names","title":"Select target names from a target list — tar_select_names","text":"Select names targets target list.","code":""},{"path":"https://docs.ropensci.org/tarchetypes/reference/tar_select_names.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Select target names from a target list — tar_select_names","text":"","code":"tar_select_names(targets, ...)"},{"path":"https://docs.ropensci.org/tarchetypes/reference/tar_select_names.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Select target names from a target list — tar_select_names","text":"targets list target objects described \"Target objects\" section. matter nested list long leaf nodes targets. ... One comma-separated tidyselect expressions, e.g. starts_with(\"prefix\"). Just like ... dplyr::select().","code":""},{"path":"https://docs.ropensci.org/tarchetypes/reference/tar_select_names.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Select target names from a target list — tar_select_names","text":"character vector target names.","code":""},{"path":"https://docs.ropensci.org/tarchetypes/reference/tar_select_names.html","id":"target-objects","dir":"Reference","previous_headings":"","what":"Target objects","title":"Select target names from a target list — tar_select_names","text":"tarchetypes functions target factories, means return target objects lists target objects. Target objects represent skippable steps analysis pipeline described https://books.ropensci.org/targets/. Please read walkthrough https://books.ropensci.org/targets/walkthrough.html understand role target objects analysis pipelines. developers, https://wlandau.github.io/targetopia/contributing.html#target-factories explains target factories (functions like one generate targets) design specification https://books.ropensci.org/targets-design/ details structure composition target objects.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/tarchetypes/reference/tar_select_names.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Select target names from a target list — tar_select_names","text":"","code":"if (identical(Sys.getenv(\"TAR_LONG_EXAMPLES\"), \"true\")) { targets::tar_dir({ # tar_dir() runs code from a temporary directory. targets <- list(   list(     targets::tar_target(x, 1),     targets::tar_target(y1, 2)   ),   targets::tar_target(y2, 3),   targets::tar_target(z, 4) ) tar_select_names(targets, starts_with(\"y\"), contains(\"z\")) }) }"},{"path":"https://docs.ropensci.org/tarchetypes/reference/tar_select_targets.html","id":null,"dir":"Reference","previous_headings":"","what":"Select target objects from a target list — tar_select_targets","title":"Select target objects from a target list — tar_select_targets","text":"Select target objects target list.","code":""},{"path":"https://docs.ropensci.org/tarchetypes/reference/tar_select_targets.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Select target objects from a target list — tar_select_targets","text":"","code":"tar_select_targets(targets, ...)"},{"path":"https://docs.ropensci.org/tarchetypes/reference/tar_select_targets.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Select target objects from a target list — tar_select_targets","text":"targets list target objects described \"Target objects\" section. matter nested list long leaf nodes targets. ... One comma-separated tidyselect expressions, e.g. starts_with(\"prefix\"). Just like ... dplyr::select().","code":""},{"path":"https://docs.ropensci.org/tarchetypes/reference/tar_select_targets.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Select target objects from a target list — tar_select_targets","text":"list target objects. See \"Target objects\" section help file.","code":""},{"path":"https://docs.ropensci.org/tarchetypes/reference/tar_select_targets.html","id":"target-objects","dir":"Reference","previous_headings":"","what":"Target objects","title":"Select target objects from a target list — tar_select_targets","text":"tarchetypes functions target factories, means return target objects lists target objects. Target objects represent skippable steps analysis pipeline described https://books.ropensci.org/targets/. Please read walkthrough https://books.ropensci.org/targets/walkthrough.html understand role target objects analysis pipelines. developers, https://wlandau.github.io/targetopia/contributing.html#target-factories explains target factories (functions like one generate targets) design specification https://books.ropensci.org/targets-design/ details structure composition target objects.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/tarchetypes/reference/tar_select_targets.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Select target objects from a target list — tar_select_targets","text":"","code":"if (identical(Sys.getenv(\"TAR_LONG_EXAMPLES\"), \"true\")) { targets::tar_dir({ # tar_dir() runs code from a temporary directory. targets <- list(   list(     targets::tar_target(x, 1),     targets::tar_target(y1, 2)   ),   targets::tar_target(y2, 3),   targets::tar_target(z, 4) ) tar_select_targets(targets, starts_with(\"y\"), contains(\"z\")) }) }"},{"path":"https://docs.ropensci.org/tarchetypes/reference/tar_skip.html","id":null,"dir":"Reference","previous_headings":"","what":"Target with a custom cancellation condition. — tar_skip","title":"Target with a custom cancellation condition. — tar_skip","text":"Create target cancels user-defined decision rule met.","code":""},{"path":"https://docs.ropensci.org/tarchetypes/reference/tar_skip.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Target with a custom cancellation condition. — tar_skip","text":"","code":"tar_skip(   name,   command,   skip,   tidy_eval = targets::tar_option_get(\"tidy_eval\"),   packages = targets::tar_option_get(\"packages\"),   library = targets::tar_option_get(\"library\"),   format = targets::tar_option_get(\"format\"),   repository = targets::tar_option_get(\"repository\"),   iteration = targets::tar_option_get(\"iteration\"),   error = targets::tar_option_get(\"error\"),   memory = targets::tar_option_get(\"memory\"),   garbage_collection = targets::tar_option_get(\"garbage_collection\"),   deployment = targets::tar_option_get(\"deployment\"),   priority = targets::tar_option_get(\"priority\"),   resources = targets::tar_option_get(\"resources\"),   storage = targets::tar_option_get(\"storage\"),   retrieval = targets::tar_option_get(\"retrieval\"),   cue = targets::tar_option_get(\"cue\"),   description = targets::tar_option_get(\"description\") )"},{"path":"https://docs.ropensci.org/tarchetypes/reference/tar_skip.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Target with a custom cancellation condition. — tar_skip","text":"name Symbol, name target. target name must valid name symbol R, must start dot. Subsequent targets can refer name symbolically induce dependency relationship: e.g. tar_target(downstream_target, f(upstream_target)) target named downstream_target depends target upstream_target function f(). addition, target's name determines random number generator seed. way, target runs reproducible seed someone else running pipeline get results, two targets pipeline share seed. (Even dynamic branches different names thus different seeds.) can recover seed completed target tar_meta(your_target, seed) run tar_seed_set() result locally recreate target's initial RNG state. command R code run target. skip R code skipping condition. evaluates TRUE tar_make(), target cancel . tidy_eval Whether invoke tidy evaluation (e.g. !! operator rlang) soon target defined (tar_make()). Applies arguments command skip. packages Character vector packages load right target runs output data reloaded downstream targets. Use tar_option_set() set packages globally subsequent targets define. library Character vector library paths try loading packages. format Optional storage format target's return value. exception format = \"file\", target gets file _targets/objects, format different way save load file. See \"Storage formats\" section detailed list possible data storage formats. repository Character length 1, remote repository target storage. Choices: \"local\": file system local machine. \"aws\": Amazon Web Services (AWS) S3 bucket. Can configured non-AWS S3 bucket using endpoint argument tar_resources_aws(), versioning capabilities may lost . See cloud storage section https://books.ropensci.org/targets/data.html details instructions. \"gcp\": Google Cloud Platform storage bucket. See cloud storage section https://books.ropensci.org/targets/data.html details instructions. Note: repository \"local\" format \"file\" target create single output file. output file uploaded cloud tracked changes exists cloud. local file deleted target runs. iteration Character length 1, name iteration mode target. Choices: \"vector\": branching happens vctrs::vec_slice() aggregation happens vctrs::vec_c(). \"list\", branching happens [[]] aggregation happens list(). \"group\": dplyr::group_by()-like functionality branch subsets non-dynamic data frame. iteration = \"group\", target must dynamic (pattern argument tar_target() must left NULL). target's return value must data frame special tar_group column consecutive integers 1 number groups. integer designates group, branch created collection rows group. See tar_group() function see can create special tar_group column dplyr::group_by(). error Character length 1, target stops throws error. Options: \"stop\": whole pipeline stops throws error. \"continue\": whole pipeline keeps going. \"abridge\": currently running targets keep running, new targets launch . (Visit https://books.ropensci.org/targets/debugging.html learn debug targets using saved workspaces.) \"null\": errored target continues returns NULL. data hash deliberately wrong target date next run pipeline. memory Character length 1, memory strategy. \"persistent\", target stays memory end pipeline (unless storage \"worker\", case targets unloads value memory right storing order avoid sending copious data network). \"transient\", target gets unloaded every new target completes. Either way, target gets automatically loaded memory whenever another target needs value. cloud-based dynamic files (e.g. format = \"file\" repository = \"aws\"), memory strategy applies temporary local copy file: \"persistent\" means remains end pipeline deleted, \"transient\" means gets deleted soon possible. former conserves bandwidth, latter conserves local storage. garbage_collection Logical, whether run base::gc() just target runs. deployment Character length 1. deployment \"main\", target run central controlling R process. Otherwise, deployment \"worker\" set pipeline distributed/parallel computing, target runs parallel worker. distributed/parallel computing targets, please visit https://books.ropensci.org/targets/crew.html. priority Numeric length 1 0 1. Controls targets get deployed first multiple competing targets ready simultaneously. Targets priorities closer 1 get dispatched earlier (polled earlier tar_make_future()). resources Object returned tar_resources() optional settings high-performance computing functionality, alternative data storage formats, optional capabilities targets. See tar_resources() details. storage Character length 1, relevant tar_make_clustermq() tar_make_future(). Must one following values: \"main\": target's return value sent back host machine saved/uploaded locally. \"worker\": worker saves/uploads value. \"none\": almost never recommended. niche situations, e.g. data needs loaded explicitly another language. use , return value target totally ignored target ends, downstream target still attempts load data file (except retrieval = \"none\"). select storage = \"none\", return value target's command ignored, data saved automatically. dynamic files (format = \"file\") responsibility user write data store inside target. distinguishing feature storage = \"none\" (opposed format = \"file\") general case, downstream targets automatically try load data data store dependency. corollary, storage = \"none\" completely unnecessary format \"file\". retrieval Character length 1, relevant tar_make_clustermq() tar_make_future(). Must one following values: \"main\": target's dependencies loaded host machine sent worker target runs. \"worker\": worker loads targets dependencies. \"none\": dependencies loaded . choice almost never recommended. niche situations, e.g. data needs loaded explicitly another language. cue optional object tar_cue() customize rules decide whether target date. description Character length 1, custom free-form human-readable text description target. Descriptions appear target labels functions like tar_manifest() tar_visnetwork(), let select subsets targets names argument functions like tar_make(). example, tar_manifest(names = tar_described_as(starts_with(\"survival model\"))) lists targets whose descriptions start character string \"survival model\".","code":""},{"path":"https://docs.ropensci.org/tarchetypes/reference/tar_skip.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Target with a custom cancellation condition. — tar_skip","text":"target object targets::tar_cancel(your_condition) inserted command. See \"Target objects\" section background.","code":""},{"path":"https://docs.ropensci.org/tarchetypes/reference/tar_skip.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Target with a custom cancellation condition. — tar_skip","text":"tar_skip() creates target cancels whenever custom condition met. mechanism cancellation targets::tar_cancel(your_condition), allows skipping happen even target exist yet. behavior differs tar_cue(mode = \"never\"), still runs target exist.","code":""},{"path":"https://docs.ropensci.org/tarchetypes/reference/tar_skip.html","id":"target-objects","dir":"Reference","previous_headings":"","what":"Target objects","title":"Target with a custom cancellation condition. — tar_skip","text":"tarchetypes functions target factories, means return target objects lists target objects. Target objects represent skippable steps analysis pipeline described https://books.ropensci.org/targets/. Please read walkthrough https://books.ropensci.org/targets/walkthrough.html understand role target objects analysis pipelines. developers, https://wlandau.github.io/targetopia/contributing.html#target-factories explains target factories (functions like one generate targets) design specification https://books.ropensci.org/targets-design/ details structure composition target objects.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/tarchetypes/reference/tar_skip.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Target with a custom cancellation condition. — tar_skip","text":"","code":"if (identical(Sys.getenv(\"TAR_LONG_EXAMPLES\"), \"true\")) { targets::tar_dir({ # tar_dir() runs code from a temporary directory. targets::tar_script({   list(     tarchetypes::tar_skip(x, command = \"value\", skip = 1 > 0)   ) }) targets::tar_make() }) }"},{"path":"https://docs.ropensci.org/tarchetypes/reference/tar_sub.html","id":null,"dir":"Reference","previous_headings":"","what":"Create multiple expressions with symbol substitution. — tar_sub","title":"Create multiple expressions with symbol substitution. — tar_sub","text":"Loop grid values create expression object one. Helps general metaprogramming.","code":""},{"path":"https://docs.ropensci.org/tarchetypes/reference/tar_sub.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create multiple expressions with symbol substitution. — tar_sub","text":"","code":"tar_sub(expr, values)"},{"path":"https://docs.ropensci.org/tarchetypes/reference/tar_sub.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create multiple expressions with symbol substitution. — tar_sub","text":"expr Starting expression. Values iteratively substituted place symbols expr create new expression. values List values substitute expr create expressions. elements values must length.","code":""},{"path":"https://docs.ropensci.org/tarchetypes/reference/tar_sub.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create multiple expressions with symbol substitution. — tar_sub","text":"list expression objects. Often, expression objects evaluate target objects (necessarily). See \"Target objects\" section background.","code":""},{"path":"https://docs.ropensci.org/tarchetypes/reference/tar_sub.html","id":"target-objects","dir":"Reference","previous_headings":"","what":"Target objects","title":"Create multiple expressions with symbol substitution. — tar_sub","text":"tarchetypes functions target factories, means return target objects lists target objects. Target objects represent skippable steps analysis pipeline described https://books.ropensci.org/targets/. Please read walkthrough https://books.ropensci.org/targets/walkthrough.html understand role target objects analysis pipelines. developers, https://wlandau.github.io/targetopia/contributing.html#target-factories explains target factories (functions like one generate targets) design specification https://books.ropensci.org/targets-design/ details structure composition target objects.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/tarchetypes/reference/tar_sub.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create multiple expressions with symbol substitution. — tar_sub","text":"","code":"# tar_map() is incompatible with tar_render() because the latter # operates on preexisting tar_target() objects. By contrast, # tar_eval() and tar_sub() iterate over code farther upstream. values <- list(   name = lapply(c(\"name1\", \"name2\"), as.symbol),   file = list(\"file1.Rmd\", \"file2.Rmd\") ) tar_sub(tar_render(name, file), values = values) #> [[1]] #> expression(tar_render(name1, \"file1.Rmd\")) #>  #> [[2]] #> expression(tar_render(name2, \"file2.Rmd\")) #>"},{"path":"https://docs.ropensci.org/tarchetypes/reference/tar_sub_raw.html","id":null,"dir":"Reference","previous_headings":"","what":"Create multiple expressions with symbol substitution (raw version). — tar_sub_raw","title":"Create multiple expressions with symbol substitution (raw version). — tar_sub_raw","text":"Loop grid values create expression object one. Helps general metaprogramming. Unlike tar_sub(), quotes expr argument, tar_sub_raw() assumes expr expression object.","code":""},{"path":"https://docs.ropensci.org/tarchetypes/reference/tar_sub_raw.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create multiple expressions with symbol substitution (raw version). — tar_sub_raw","text":"","code":"tar_sub_raw(expr, values)"},{"path":"https://docs.ropensci.org/tarchetypes/reference/tar_sub_raw.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create multiple expressions with symbol substitution (raw version). — tar_sub_raw","text":"expr Expression object starting expression. Values iteratively substituted place symbols expr create new expression. values List values substitute expr create expressions. elements values must length.","code":""},{"path":"https://docs.ropensci.org/tarchetypes/reference/tar_sub_raw.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create multiple expressions with symbol substitution (raw version). — tar_sub_raw","text":"list expression objects. Often, expression objects evaluate target objects (necessarily). See \"Target objects\" section background.","code":""},{"path":"https://docs.ropensci.org/tarchetypes/reference/tar_sub_raw.html","id":"target-objects","dir":"Reference","previous_headings":"","what":"Target objects","title":"Create multiple expressions with symbol substitution (raw version). — tar_sub_raw","text":"tarchetypes functions target factories, means return target objects lists target objects. Target objects represent skippable steps analysis pipeline described https://books.ropensci.org/targets/. Please read walkthrough https://books.ropensci.org/targets/walkthrough.html understand role target objects analysis pipelines. developers, https://wlandau.github.io/targetopia/contributing.html#target-factories explains target factories (functions like one generate targets) design specification https://books.ropensci.org/targets-design/ details structure composition target objects.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/tarchetypes/reference/tar_sub_raw.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create multiple expressions with symbol substitution (raw version). — tar_sub_raw","text":"","code":"# tar_map() is incompatible with tar_render() because the latter # operates on preexisting tar_target() objects. By contrast, # tar_eval_raw() and tar_sub_raw() iterate over code farther upstream. values <- list(   name = lapply(c(\"name1\", \"name2\"), as.symbol),   file = c(\"file1.Rmd\", \"file2.Rmd\") ) tar_sub_raw(quote(tar_render(name, file)), values = values) #> [[1]] #> expression(tar_render(name1, \"file1.Rmd\")) #>  #> [[2]] #> expression(tar_render(name2, \"file2.Rmd\")) #>"},{"path":"https://docs.ropensci.org/tarchetypes/reference/tarchetypes-package.html","id":null,"dir":"Reference","previous_headings":"","what":"targets: Archetypes for Targets — tarchetypes-package","title":"targets: Archetypes for Targets — tarchetypes-package","text":"pipeline toolkit R, targets package brings together function-oriented programming Make-like declarative pipelines Statistics data science. tarchetypes package provides convenient helper functions create specialized targets, making pipelines targets easier cleaner write understand.","code":""},{"path":"https://docs.ropensci.org/tarchetypes/reference/walk_ast.html","id":null,"dir":"Reference","previous_headings":"","what":"Static code analysis for tarchetypes. — walk_ast","title":"Static code analysis for tarchetypes. — walk_ast","text":"Walk abstract syntax tree capture data.","code":""},{"path":"https://docs.ropensci.org/tarchetypes/reference/walk_ast.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Static code analysis for tarchetypes. — walk_ast","text":"","code":"walk_ast(expr, walk_call)"},{"path":"https://docs.ropensci.org/tarchetypes/reference/walk_ast.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Static code analysis for tarchetypes. — walk_ast","text":"expr language object function scan. walk_call function handle specific kind function call relevant code analysis hand.","code":""},{"path":"https://docs.ropensci.org/tarchetypes/reference/walk_ast.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Static code analysis for tarchetypes. — walk_ast","text":"character vector data found static code analysis.","code":""},{"path":"https://docs.ropensci.org/tarchetypes/reference/walk_ast.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Static code analysis for tarchetypes. — walk_ast","text":"internal use . user-side function. Powers functionality like automatic detection tar_load()/tar_read() dependencies tar_render(). Packages codetools CodeDepends different (sophisticated elaborate) implementations concepts documented https://adv-r.hadley.nz/expressions.html#ast-funs.","code":""},{"path":"https://docs.ropensci.org/tarchetypes/reference/walk_ast.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Static code analysis for tarchetypes. — walk_ast","text":"","code":"# How tar_render() really works: expr <- quote({   if (a > 1) {     tar_load(target_name)   }   process_stuff(target_name) }) walk_ast(expr, walk_call_knitr) #> [1] \"target_name\" # Custom code analysis for developers of tarchetypes internals: walk_custom <- function(expr, counter) {   # New internals should use targets::tar_deparse_safe(backtick = FALSE).   name <- deparse(expr[[1]])   if (identical(name, \"detect_this\")) {     counter_set_names(counter, as.character(expr[[2]]))   } } expr <- quote({   for (i in seq_len(10)) {     for (j in seq_len(20)) {       if (i > 1) {         detect_this(\"prize\")       } else {         ignore_this(\"penalty\")       }     }   } }) walk_ast(expr, walk_custom) #> [1] \"prize\""},{"path":"https://docs.ropensci.org/tarchetypes/reference/walk_call_knitr.html","id":null,"dir":"Reference","previous_headings":"","what":"Code analysis for knitr reports. — walk_call_knitr","title":"Code analysis for knitr reports. — walk_call_knitr","text":"Walk abstract syntax tree capture knitr dependencies.","code":""},{"path":"https://docs.ropensci.org/tarchetypes/reference/walk_call_knitr.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Code analysis for knitr reports. — walk_call_knitr","text":"","code":"walk_call_knitr(expr, counter)"},{"path":"https://docs.ropensci.org/tarchetypes/reference/walk_call_knitr.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Code analysis for knitr reports. — walk_call_knitr","text":"expr language object function scan. counter internal counter object keeps track detected target names far.","code":""},{"path":"https://docs.ropensci.org/tarchetypes/reference/walk_call_knitr.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Code analysis for knitr reports. — walk_call_knitr","text":"character vector target names found static code analysis.","code":""},{"path":"https://docs.ropensci.org/tarchetypes/reference/walk_call_knitr.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Code analysis for knitr reports. — walk_call_knitr","text":"internal use . user-side function. Powers  automatic detection tar_load()/tar_read() dependencies tar_render(). Packages codetools CodeDepends different (sophisticated elaborate) implementations concepts documented https://adv-r.hadley.nz/expressions.html#ast-funs.","code":""},{"path":"https://docs.ropensci.org/tarchetypes/reference/walk_call_knitr.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Code analysis for knitr reports. — walk_call_knitr","text":"","code":"# How tar_render() really works: expr <- quote({   if (a > 1) {     tar_load(target_name)   }   process_stuff(target_name) }) walk_ast(expr, walk_call_knitr) #> [1] \"target_name\""},{"path":[]},{"path":"https://docs.ropensci.org/tarchetypes/news/index.html","id":"tarchetypes-080","dir":"Changelog","previous_headings":"","what":"tarchetypes 0.8.0","title":"tarchetypes 0.8.0","text":"Expose new description argument tar_target() targets 1.5.1.9001. tar_map() static branching target factories now append values target descriptions. Use descriptions argument functions customize. Ensure consistent repository settings tar_change() tar_map_rep(). tar_knit(), tar_render(), tar_quarto(), “rep” “raw” versions gain working_directory argument change working directory report knits . Users set working_directory need supply store argument tar_load() tar_read() relative working directory report knows find data (#169). tar_knit(), tar_render(), tar_quarto(), “raw” versions gain output_file argument conveniently set file path rendered output file. tar_quarto() “rep” “raw” versions gain new quarto_args argument advanced Quarto arguments (#166, @petrbouchal).","code":""},{"path":"https://docs.ropensci.org/tarchetypes/news/index.html","id":"tarchetypes-0712","dir":"Changelog","previous_headings":"","what":"tarchetypes 0.7.12","title":"tarchetypes 0.7.12","text":"CRAN release: 2024-02-06 Adjust tests group iteration now explicitly prohibited dynamic targets.","code":""},{"path":"https://docs.ropensci.org/tarchetypes/news/index.html","id":"tarchetypes-0711","dir":"Changelog","previous_headings":"","what":"tarchetypes 0.7.11","title":"tarchetypes 0.7.11","text":"CRAN release: 2024-01-09 Use tar_seed_create() tar_seed_set() targets. Document limitations literate programming target factories like tar_render() (#158). Make tar_rep2() compatible tar_map() (#165).","code":""},{"path":"https://docs.ropensci.org/tarchetypes/news/index.html","id":"tarchetypes-0710","dir":"Changelog","previous_headings":"","what":"tarchetypes 0.7.10","title":"tarchetypes 0.7.10","text":"CRAN release: 2023-12-04 Prepare use tar_seed_create() tar_seed_set() (https://github.com/ropensci/targets/issues/1139). Future versions tarchetypes use package functions, version compatibility constraints release cycle. Migrate tests targets >= 1.3.2.9004 progress statuses (“completed” instead “built”, “dispatched” instead “started”).","code":""},{"path":"https://docs.ropensci.org/tarchetypes/news/index.html","id":"tarchetypes-079","dir":"Changelog","previous_headings":"","what":"tarchetypes 0.7.9","title":"tarchetypes 0.7.9","text":"CRAN release: 2023-10-04 Deprecate packages library arguments tar_quarto() tar_quarto_raw() (#155, @svraka). Switch furrr parallel rep_workers tar_rep() etc. (#251, @solmos).","code":""},{"path":"https://docs.ropensci.org/tarchetypes/news/index.html","id":"tarchetypes-078","dir":"Changelog","previous_headings":"","what":"tarchetypes 0.7.8","title":"tarchetypes 0.7.8","text":"CRAN release: 2023-09-01 Relax overly strict assertion R Markdown / Quarto parameter lists (@rmgpanw, #152). Adjust test comply upcoming targets 1.3.0.","code":""},{"path":"https://docs.ropensci.org/tarchetypes/news/index.html","id":"tarchetypes-077","dir":"Changelog","previous_headings":"","what":"tarchetypes 0.7.7","title":"tarchetypes 0.7.7","text":"CRAN release: 2023-06-15 Allow format = \"file_fast\" target factories.","code":""},{"path":"https://docs.ropensci.org/tarchetypes/news/index.html","id":"tarchetypes-076","dir":"Changelog","previous_headings":"","what":"tarchetypes 0.7.6","title":"tarchetypes 0.7.6","text":"CRAN release: 2023-05-02 Support Quarto profiles QUARTO_PROFILE environment variable (#139, @andrewheiss). Take basename source file #129 output files land correctly source file subdirectory (#129, targets issue 1047, @joelnitta). Use targets::tar_runtime_object()$store instead targets::tar_runtime_object()$get_store() ensure forward compatibility targets. Use interactive test tar_download() avoid unpredictable network issues outside control.","code":""},{"path":"https://docs.ropensci.org/tarchetypes/news/index.html","id":"tarchetypes-075","dir":"Changelog","previous_headings":"","what":"tarchetypes 0.7.5","title":"tarchetypes 0.7.5","text":"CRAN release: 2023-03-07 Implement new set_deps argument hook functions force modified targets keep dependencies applying hook (#131, @edalfon). Forward settings tar_copy_target() (#131, @edalfon). Initialize directory output files tar_quarto_rep() tar_render_rep() (#129, @benzipperer). Work around https://github.com/quarto-dev/quarto-cli/pull/2456 writing temporary local files tar_quarto_rep() (#129, @benzipperer).","code":""},{"path":"https://docs.ropensci.org/tarchetypes/news/index.html","id":"tarchetypes-074","dir":"Changelog","previous_headings":"","what":"tarchetypes 0.7.4","title":"tarchetypes 0.7.4","text":"CRAN release: 2023-01-06 Implement rep_workers control inner parallelism batched replication functions (#117). Ensure function passed furrr functions environment tar_option_get(\"envir\"). Allow subdirectories rendered reports tar_quarto_rep() (#129, @mglev1n).","code":""},{"path":"https://docs.ropensci.org/tarchetypes/news/index.html","id":"tarchetypes-073","dir":"Changelog","previous_headings":"","what":"tarchetypes 0.7.3","title":"tarchetypes 0.7.3","text":"CRAN release: 2022-11-29 Support nested futures parallelism among reps within batches (#117, @kkmann). Add Quarto troubleshooting section help files.","code":""},{"path":"https://docs.ropensci.org/tarchetypes/news/index.html","id":"tarchetypes-072","dir":"Changelog","previous_headings":"","what":"tarchetypes 0.7.2","title":"tarchetypes 0.7.2","text":"CRAN release: 2022-10-31 Migrate away deprecated targets::tar_path(). Implement return resilient seeds batched replication (#111, #113).","code":""},{"path":"https://docs.ropensci.org/tarchetypes/news/index.html","id":"tarchetypes-071","dir":"Changelog","previous_headings":"","what":"tarchetypes 0.7.1","title":"tarchetypes 0.7.1","text":"CRAN release: 2022-09-07 Document https://github.com/ropensci/tarchetypes/discussions/105 (@MarekGierlinski). Adapt tests changes tar_manfiest() default output.","code":""},{"path":"https://docs.ropensci.org/tarchetypes/news/index.html","id":"tarchetypes-070","dir":"Changelog","previous_headings":"","what":"tarchetypes 0.7.0","title":"tarchetypes 0.7.0","text":"CRAN release: 2022-08-05 Add new functions tar_quarto() tar_quarto_rep() (“raw” versions) Quarto documents projects pipelines (#89). Add new function tar_quarto_files() inspect Quarto projects documents important files: source files inspect target dependencies, output documents, Quarto-specific inputs like _quarto.yml. Uses quarto::quarto_inspect() powers automatic file detection tar_quarto() etc. (#89). Add runtime guardrails params argument tar_render_rep() (must data frame unique rows (unique elements output_file)). Temporarily change root.dir scanning dependencies knitr child documents work (#93, @mutlusun). Use format = \"rds\" target_batch tar_map_rep_raw() global format option mess pipeline. Handle non-atomic length-one list columns tar_append_static_values(). Allow tar_render() work just one row parameters (#96, #97, @ugoebel73). Remove dependencies collect garbage running reports. Make sure target factories memory garbage_collection arguments.","code":""},{"path":"https://docs.ropensci.org/tarchetypes/news/index.html","id":"tarchetypes-060","dir":"Changelog","previous_headings":"","what":"tarchetypes 0.6.0","title":"tarchetypes 0.6.0","text":"CRAN release: 2022-04-19 Implement tar_file_read() (#84, @petrbouchal). Suppress warnings deprecated AWS formats. Select correct targets tar_select_targets() (#92, @arcruz0). Support repository argument targets >= 0.11.0.","code":""},{"path":"https://docs.ropensci.org/tarchetypes/news/index.html","id":"tarchetypes-041","dir":"Changelog","previous_headings":"","what":"tarchetypes 0.4.1","title":"tarchetypes 0.4.1","text":"CRAN release: 2022-01-07 Select list elements command1 using [[ [ tar_map2() functions.","code":""},{"path":"https://docs.ropensci.org/tarchetypes/news/index.html","id":"tarchetypes-040","dir":"Changelog","previous_headings":"","what":"tarchetypes 0.4.0","title":"tarchetypes 0.4.0","text":"CRAN release: 2021-12-10 Implement tar_map_rep() tar_map_rep_raw() dynamic batched replication within static branching data frames (#78). Implement tar_map2_count(), tar_map2_count_raw(), tar_map2_size(), tar_map2_size_raw() batched dynamic-within-static branching data frames (#78). Deprecate tar_rep_map() favor tar_rep2() avoid name confusion. Likewise tar_rep_map_raw() tar_rep2_raw() (#78).","code":""},{"path":"https://docs.ropensci.org/tarchetypes/news/index.html","id":"tarchetypes-032","dir":"Changelog","previous_headings":"","what":"tarchetypes 0.3.2","title":"tarchetypes 0.3.2","text":"CRAN release: 2021-10-26 Allow empty / NULL target list tar_map() (@kkami1115). claim support \"aws_file\" format tar_files() related target factories.","code":""},{"path":"https://docs.ropensci.org/tarchetypes/news/index.html","id":"tarchetypes-031","dir":"Changelog","previous_headings":"","what":"tarchetypes 0.3.1","title":"tarchetypes 0.3.1","text":"CRAN release: 2021-09-21 Relax assertion language objects. Explain targets timestamps correctly help files tar_age() tar_cue_age().","code":""},{"path":"https://docs.ropensci.org/tarchetypes/news/index.html","id":"tarchetypes-030","dir":"Changelog","previous_headings":"","what":"tarchetypes 0.3.0","title":"tarchetypes 0.3.0","text":"CRAN release: 2021-08-04","code":""},{"path":"https://docs.ropensci.org/tarchetypes/news/index.html","id":"invalidating-changes-0-3-0","dir":"Changelog","previous_headings":"","what":"Invalidating changes","title":"tarchetypes 0.3.0","text":"names = NULL tar_map(), use hashes instead numeric indexes generated target names (#67). way, target names longer sensitive order values, targets incorrectly invalidate less often. Unfortunately, invalidating change: targets automatically rerun install version tarchetypes. apologize inconvenience causes. However, need patch order solve #67, targets incorrectly invalidate less frequently future.","code":""},{"path":"https://docs.ropensci.org/tarchetypes/news/index.html","id":"enhancements-0-3-0","dir":"Changelog","previous_headings":"","what":"Enhancements","title":"tarchetypes 0.3.0","text":"Migrate utilities error handling metaprogramming exported targets (#59).","code":""},{"path":"https://docs.ropensci.org/tarchetypes/news/index.html","id":"tarchetypes-021","dir":"Changelog","previous_headings":"","what":"tarchetypes 0.2.1","title":"tarchetypes 0.2.1","text":"CRAN release: 2021-06-21","code":""},{"path":"https://docs.ropensci.org/tarchetypes/news/index.html","id":"bug-fixes-0-2-1","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"tarchetypes 0.2.1","text":"Make *_raw() target factories process command way whether expression ordinary language object. Ensure compatibility targets 0.5.0.9000, logs skipped targets.","code":""},{"path":"https://docs.ropensci.org/tarchetypes/news/index.html","id":"new-features-0-2-1","dir":"Changelog","previous_headings":"","what":"New features","title":"tarchetypes 0.2.1","text":"Add tar_rep_map() tar_rep_map_raw() perform batched computation downstream tar_rep() (#50). Add tar_select_names() tar_select_targets() make certain metaprogramming tasks easier. tar_map(), attempt convert elements values lists language objects.","code":""},{"path":"https://docs.ropensci.org/tarchetypes/news/index.html","id":"tarchetypes-020","dir":"Changelog","previous_headings":"","what":"tarchetypes 0.2.0","title":"tarchetypes 0.2.0","text":"CRAN release: 2021-05-11 Allow trailing commas tar_plan() (#40, @kendonB). Implement tar_age() based tar_cue_age() (#39, @petrbouchal). Implement new cue factories tar_cue_age(), tar_cue_age_raw(), tar_cue_force(), tar_cue_skip() (#39). Implement tar_download() (#38, @noamross, @petrbouchal) Set intermediate temporary directory remove race condition tar_render_rep() (#36, @gorgitko). Prefix internal condition classes “tar_”. Add new format helpers tar_aws_rds() tar_parquet(). Support hooks tar_hook_before(), tar_hook_inner(), tar_hook_outer() (#44). Deep-copy cue tar_map().","code":""},{"path":"https://docs.ropensci.org/tarchetypes/news/index.html","id":"tarchetypes-011","dir":"Changelog","previous_headings":"","what":"tarchetypes 0.1.1","title":"tarchetypes 0.1.1","text":"CRAN release: 2021-03-28 Unset crayon.enabled literate programming. Switch meaning %||% %|||% conform historical precedent.","code":""},{"path":"https://docs.ropensci.org/tarchetypes/news/index.html","id":"tarchetypes-010","dir":"Changelog","previous_headings":"","what":"tarchetypes 0.1.0","title":"tarchetypes 0.1.0","text":"CRAN release: 2021-02-27 Add new functions easier grouping data frames dynamic branching: tar_group_by(), tar_group_select(), tar_group_size(), tar_group_count() (#32, @liutiming). tar_render() related functions, track *_files/ output directory exists (#30). Implement external walk_ast() function make easier developers extend static code analysis tarchetypes (@MilesMcBain).","code":""},{"path":"https://docs.ropensci.org/tarchetypes/news/index.html","id":"tarchetypes-004","dir":"Changelog","previous_headings":"","what":"tarchetypes 0.0.4","title":"tarchetypes 0.0.4","text":"CRAN release: 2021-02-02 Skip literate programming tests pandoc missing insufficient version. Use explicit temp files examples even running inside targets::tar_dir(). (targets::tar_dir() targets::tar_test() already run code temporary directory.) Add comments examples emphasize targets::tar_dir() runs code temporary directory, means ostensibly files created enclosed expression actually written temporary storage user’s file space.","code":""},{"path":"https://docs.ropensci.org/tarchetypes/news/index.html","id":"tarchetypes-002","dir":"Changelog","previous_headings":"","what":"tarchetypes 0.0.2","title":"tarchetypes 0.0.2","text":"CRAN release: 2021-02-01 Make sure every function help file man/ Rd-tags \\value \\arguments. every function help file man/, describe return value \\value Rd tag. function returns target object list target objects, \\value tag now links https://books.ropensci.org/targets/, user manual purpose target objects explained, https://books.ropensci.org/targets-design/, design specification documents structure composition target objects. Ensure examples, vignettes, test write home file space user. Ensure function defined tarchetypes package writes default home file space user. paths output files controlled non-tarchetypes functions invoke tarchetypes.","code":""},{"path":"https://docs.ropensci.org/tarchetypes/news/index.html","id":"tarchetypes-001","dir":"Changelog","previous_headings":"","what":"tarchetypes 0.0.1","title":"tarchetypes 0.0.1","text":"tar_plan() now returns list target objects rather pipeline object. Related: https://github.com/ropensci/targets/issues/253.","code":""},{"path":"https://docs.ropensci.org/tarchetypes/news/index.html","id":"tarchetypes-0009000","dir":"Changelog","previous_headings":"","what":"tarchetypes 0.0.0.9000","title":"tarchetypes 0.0.0.9000","text":"First version. Implement tar_knitr_deps() tar_knitr_deps_expr() accommodate custom multi-file literate programming projects like R Markdown sites bookdown projects (#23, @tjmahr).","code":""}]
